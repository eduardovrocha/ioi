lib/:
  data/:
    comment_model.dart: |2

      import 'dio_client_service.dart';

      class CommentModel {
        final String imageProfile;
        final String userName;
        final String createdAt;
        final String commentBody;
        final int id;
        CommentModel({
          required this.imageProfile,
          required this.userName,
          required this.createdAt,
          required this.commentBody,
          required this.id,
        });
        factory CommentModel.fromJson(Map<String, dynamic> json) {
          final String hostUrl = '${DioClientService.baseUrl}${json['avatar_url']}';
          return CommentModel(
            imageProfile: hostUrl ?? 'assets/images/user1.png',
            userName: json['profile_name'] ?? 'An√¥nimo',
            createdAt: json['created_at'] ?? '',
            commentBody: json['body'] ?? '',
            id: json['id'] ?? '',
          );
        }
        Map<String, dynamic> toJson() {

          return {
            'id': id,
            'imageProfile': imageProfile,
            'userName': userName,
            'createdAt': createdAt,
            'commentBody': commentBody,
          };
        }
      }
    dio_client_service.dart: |2

      import 'package:dio/dio.dart';
      import 'package:shared_preferences/shared_preferences.dart';

      class DioClientService {
        static String baseUrl = 'http://192.168.12.184:3030';
        static final Dio dio = Dio(BaseOptions(
          baseUrl: baseUrl,
        ));

        static Future<void> setup() async {
          dio.options.headers['Accept-Language'] = 'pt-BR';
          dio.interceptors.add(InterceptorsWrapper(
            onRequest: (options, handler) async {
              // Retrieve token before request
              final prefs = await SharedPreferences.getInstance();
              String? token = prefs.getString('authorization');
              if (token != null) {
                options.headers['Authorization'] = "Bearer $token";
              }
              return handler.next(options);
            },
            onResponse: (response, handler) {
              return handler.next(response);
            },
            onError: (DioException e, handler) {
              return handler.next(e);
            },
          ));
        }
      }
    geolocation_service.dart: |
      import 'dart:developer';
      import 'package:geolocator/geolocator.dart';
      import 'package:geocoding/geocoding.dart';

      class GeolocationService {
        Future<LocationResult> fetchLocation() async {
          final hasPermission = await _handlePermission();
          if (!hasPermission) {

            return LocationResult(
              address: 'Location permissions denied',
              error: 'PermissionError',
            );
          }
          try {
            final position = await Geolocator.getCurrentPosition(
              desiredAccuracy: LocationAccuracy.high,
              timeLimit: const Duration(seconds: 10),
            );
            final placemarks = await placemarkFromCoordinates(
              position.latitude,
              position.longitude,
            );
            if (placemarks.isNotEmpty) {

              final placemark = placemarks.first;
              final String address =
                  "${placemark.subLocality ?? 'Unknown Neighborhood'}, "
                  "${placemark.locality ?? 'Unknown City'}, "
                  "${placemark.administrativeArea ?? 'Unknown State'} "
                  "${placemark.postalCode ?? 'Unknown Postcode'}";
              return LocationResult(
                address: address,
                coordinates: position,
              );
            } else {
              return LocationResult(
                address: 'Unknown Location',
                coordinates: position,
              );
            }
          } catch (e) {
            log("‚ùå Geolocation Error: $e");
            return LocationResult(
              address: 'Error fetching location',
              error: e.toString(),
            );
          }
        }
        Future<bool> _handlePermission() async {
          bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
          if (!serviceEnabled) {

            log("‚ùå Location services disabled.");
            return false;
          }
          LocationPermission permission = await Geolocator.checkPermission();
          if (permission == LocationPermission.denied) {

            permission = await Geolocator.requestPermission();
          }
          if (permission == LocationPermission.denied ||
              permission == LocationPermission.deniedForever) {
            log("‚ùå Location permission denied.");
            return false;
          }
          return true;
        }
      }
      class LocationResult {
        final String address;
        final Position? coordinates;
        final String? error;
        LocationResult({
          required this.address,
          this.coordinates,
          this.error,
        });
      }
    shared_prefs_service.dart: |
      import 'package:shared_preferences/shared_preferences.dart';

      class SharedPrefsService {

        static Future<void> setString(String key, String value) async {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(key, value);
        }

        static Future<String?> getString(String key) async {
          final prefs = await SharedPreferences.getInstance();
          return prefs.getString(key);
        }

        static Future<void> setBool(String key, bool value) async {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setBool(key, value);
        }

        static Future<bool> getBool(String key) async {
          final prefs = await SharedPreferences.getInstance();
          return prefs.getBool(key) ?? false;
        }

        static Future<void> setInt(String key, int value) async {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setInt(key, value);
        }

        static Future<int?> getInt(String key) async {
          final prefs = await SharedPreferences.getInstance();
          return prefs.getInt(key);
        }

        static Future<void> removeValue(String key) async {
          final prefs = await SharedPreferences.getInstance();
          await prefs.remove(key);
        }

        static Future<void> cleanPresence() async {
          final prefs = await SharedPreferences.getInstance();
          await prefs.clear();
        }

        static Future<void> printSharedPrefs() async {
          final SharedPreferences prefs = await SharedPreferences.getInstance();
          final keys = prefs.getKeys();
          if (keys.isEmpty) {

            return;
          }
          for (String key in keys) {

            final value = prefs.get(key);
          }
        }
      }
    socket_service.dart: |
      import 'dart:convert';

      import 'package:flutter/cupertino.dart';
      import 'package:provider/provider.dart';
      import 'package:shared_preferences/shared_preferences.dart';
      import 'package:web_socket_channel/web_socket_channel.dart';
      import 'package:xiis/main.dart';
      import 'package:xiis/presentation/providers/notification_provider.dart';

      class SocketService {
        static final SocketService _instance = SocketService._internal();
        factory SocketService() => _instance;
        SocketService._internal();
        WebSocketChannel? _channel;
        bool _isConnected = false;
        final ValueNotifier<Map<String, int>> badgeCounts = ValueNotifier({
          'comment': 0,
          'coin': 0,
          'follower': 0,
          'following': 0,
        });
        Future<void> connect({required String baseUrl}) async {
          if (_isConnected) return;
          final prefs = await SharedPreferences.getInstance();
          final token = prefs.getString('authorization');
          if (token == null || token.isEmpty) {

            debugPrint("‚ùå WebSocket: token n√£o encontrado.");
            return;
          }
          final wsUrl = _buildWsUrl(baseUrl, token);
          debugPrint('üîó Conectando ao WebSocket: $wsUrl');
          try {
            final subscriptionPayload = _buildSubscriptionPayload(token);
            _channel = WebSocketChannel.connect(Uri.parse(wsUrl));
            _channel!.sink.add(jsonEncode(subscriptionPayload));
            debugPrint('üì® Enviando subscription: ${jsonEncode(subscriptionPayload)}');
            _channel!.stream.listen(
              _handleIncomingMessage,
              onError: _handleError,
              onDone: _handleDone,
            );
            _isConnected = true;
            debugPrint('‚úÖ WebSocket conectado.');
          } catch (e) {
            debugPrint('‚ùå Erro ao conectar WebSocket: $e');
          }
        }
        void disconnect() {

          _channel?.sink.close();
          _isConnected = false;
          debugPrint('üßπ WebSocket desconectado manualmente.');
        }
        String _buildWsUrl(String baseUrl, String token) {

          return '${baseUrl.replaceFirst('http', 'ws')}/cable?token=$token';
        }
        Map<String, dynamic> _buildSubscriptionPayload(String token) {

          return {
            "command": "subscribe",
            "identifier": jsonEncode({
              "channel": "ContentInteractionChannel",
              "token": token,
            }),
          };
        }
        void _handleIncomingMessage(dynamic message) {

          try {
            final parsed = jsonDecode(message);
            if (parsed is! Map<String, dynamic>) return;
            if (parsed.containsKey('type')) {

              debugPrint('üîî Mensagem de sistema recebida: ${parsed['type']}');
              return;
            }
            if (parsed.containsKey('message') && parsed['message'] is Map<String, dynamic>) {

              final innerMessage = parsed['message'] as Map<String, dynamic>;
              final type = innerMessage['type'];
              debugPrint('üì© Mensagem recebida: $innerMessage');
              if (type != null) {

                _updateBadgeCount(type);
                _notifyProvider(type, innerMessage);
              }
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è Erro ao processar mensagem: $e');
          }
        }
        void _updateBadgeCount(String type) {

          if (badgeCounts.value.containsKey(type)) {

            final updated = Map<String, int>.from(badgeCounts.value);
            updated[type] = updated[type]! + 1;
            badgeCounts.value = updated;
            debugPrint('üî¢ Badge "$type" atualizado para ${updated[type]}');
          }
        }
        void resetBadge(String type) {

          if (badgeCounts.value.containsKey(type)) {

            final updated = Map<String, int>.from(badgeCounts.value);
            updated[type] = 0;
            badgeCounts.value = updated;
            debugPrint('üîÑ Badge "$type" resetado.');
          }
        }
        void _notifyProvider(String type, Map<String, dynamic> message) {

          try {
            final context = navigatorKey.currentContext;
            if (context == null) {

              debugPrint('‚ö†Ô∏è Contexto n√£o dispon√≠vel para notificar provider.');
              return;
            }
            final notificationProvider = Provider.of<NotificationProvider>(context, listen: false);
            notificationProvider.socketMessage(message);
          } catch (e) {
            debugPrint('‚ö†Ô∏è Erro ao notificar provider: $e');
          }
        }
        void _handleError(dynamic error) {

          debugPrint('‚ö†Ô∏è WebSocket error: $error');
          _isConnected = false;
        }
        void _handleDone() {

          debugPrint('‚ö†Ô∏è WebSocket desconectado inesperadamente.');
          _isConnected = false;
        }
      }
  l10n/:
    app_localizations.dart: |
      import 'dart:convert';
      import 'dart:ui';

      import 'package:flutter/cupertino.dart';
      import 'package:flutter/services.dart';

      class AppLocalizations {
        final Locale locale;
        late Map<String, String> _localizedStrings;
        AppLocalizations(this.locale);
        static AppLocalizations of(BuildContext context) {

          return Localizations.of<AppLocalizations>(context, AppLocalizations)!;
        }
        static const LocalizationsDelegate<AppLocalizations> delegate =
        _AppLocalizationsDelegate();
        Future<bool> load() async {
          String jsonString = await rootBundle
              .loadString('lib/l10n/intl_${locale.languageCode}.arb');
          Map<String, dynamic> jsonMap = json.decode(jsonString);
          _localizedStrings = jsonMap.map((key, value) {
            return MapEntry(key, value.toString());
          });
          return true;
        }
        String translate(String key) {

          return _localizedStrings[key] ?? key;
        }
      }
      class _AppLocalizationsDelegate
          extends LocalizationsDelegate<AppLocalizations> {
        const _AppLocalizationsDelegate();
        @override
        bool isSupported(Locale locale) => ['en', 'pt'].contains(locale.languageCode);
        @override
        Future<AppLocalizations> load(Locale locale) async {
          AppLocalizations localizations = AppLocalizations(locale);
          await localizations.load();
          return localizations;
        }
        @override
        bool shouldReload(LocalizationsDelegate<AppLocalizations> old) => false;
      }
  location/:
    en.dart: |2+

    pt-br.dart: |2+

  main.dart: |
    import 'dart:async';
    import 'package:dio/dio.dart';
    import 'package:flutter/material.dart';
    import 'package:flutter_localizations/flutter_localizations.dart';
    import 'package:flutter_stripe/flutter_stripe.dart';
    import 'package:provider/provider.dart';
    import 'package:showcaseview/showcaseview.dart';
    import 'package:xiis/data/dio_client_service.dart';
    import 'package:xiis/l10n/app_localizations.dart';
    import 'package:xiis/presentation/providers/access_provider.dart';
    import 'package:xiis/presentation/providers/content_provider.dart';
    import 'package:xiis/presentation/providers/entrance_provider.dart';
    import 'package:xiis/presentation/providers/financial_provider.dart';
    import 'package:xiis/presentation/providers/home_provider.dart';
    import 'package:xiis/presentation/providers/locale_provider.dart';
    import 'package:xiis/presentation/providers/notification_provider.dart';
    import 'package:xiis/presentation/providers/profile_provider.dart';
    import 'package:xiis/presentation/providers/reward_provider.dart';
    import 'package:xiis/presentation/providers/settings_provider.dart';
    import 'package:xiis/presentation/providers/splash_provider.dart';
    import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
    import 'package:xiis/presentation/views/splash_view.dart';

    final GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();
    final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

    Future<void> main() async {
      runZonedGuarded(() async {
        WidgetsFlutterBinding.ensureInitialized();

        await _initializeServices();
        _setupFlutterErrorHandler();

        runApp(_buildAppWithProviders());
      }, _handleZoneError);
    }

    Future<void> _initializeServices() async {
      await DioClientService.setup();
      await UIHelper.detectSimulator();
      // todo - .env variable
      Stripe.publishableKey = 'pk_cpf0S5GH6PW2neAgZW76U7epnyFiv';
    }

    Widget _buildAppWithProviders() {
      return MultiProvider(
        providers: [
          ChangeNotifierProvider<SplashProvider>(
            create: (_) => SplashProvider(),
          ),
          ChangeNotifierProvider<AccessProvider>(
            create: (_) => AccessProvider(),
          ),
          ChangeNotifierProvider<ProfileProvider>(
            create: (_) => ProfileProvider(),
          ),
          ChangeNotifierProvider<EntranceProvider>(
            create: (_) => EntranceProvider(),
          ),
          ChangeNotifierProvider<HomeProvider>(
            create: (_) => HomeProvider(),
          ),
          ChangeNotifierProvider<ContentProvider>(
            create: (_) => ContentProvider(),
          ),
          ChangeNotifierProvider<LocaleProvider>(
            create: (_) => LocaleProvider(),
          ),
          ChangeNotifierProvider<SetupProvider>(
            create: (_) => SetupProvider(),
          ),
          ChangeNotifierProvider<FinancialProvider>(
            create: (_) => FinancialProvider(),
          ),
          ChangeNotifierProvider<NotificationProvider>(
            create: (_) => NotificationProvider(),
          ),
          ChangeNotifierProvider<RewardProvider>(
            create: (context) => RewardProvider(
              entranceProvider: context.read<EntranceProvider>(),
            ),
          ),
        ],
        child: const MyApp(),
      );
    }

    void _setupFlutterErrorHandler() {
      FlutterError.onError = (FlutterErrorDetails details) async {
        await _reportError(details.exception.toString(), details.stack.toString());
        _showGlobalSnack(details.exceptionAsString());
        FlutterError.dumpErrorToConsole(details);
      };
    }

    Future<void> _handleZoneError(Object error, StackTrace stack) async {
      await _reportError(error.toString(), stack.toString());
      _showGlobalSnack(error.toString());
    }

    Future<void> _reportError(String error, String stack) async {
      try {
        await DioClientService.dio.post(
          '/handle_errors.json',
          data: {
            "details": error,
            "stack": stack,
          },
          options: Options(headers: {'Content-Type': 'application/json'}),
        );
      } catch (_) {
        // Silenciar falha no envio
      }
    }

    void _showGlobalSnack(String message) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        scaffoldMessengerKey.currentState?.showSnackBar(
          SnackBar(
            content: Text("üö® Ocorreu um erro: $message"),
            backgroundColor: Colors.redAccent,
            duration: const Duration(seconds: 5),
          ),
        );
      });
    }

    class MyApp extends StatelessWidget {
      const MyApp({super.key});

      static final GlobalKey firstShowcaseKey = GlobalKey();
      static final GlobalKey lastShowcaseKey = GlobalKey();

      Widget _buildApp(BuildContext context) {
        final localeProvider = Provider.of<LocaleProvider>(context);

        return MaterialApp(
          navigatorKey: navigatorKey,
          debugShowCheckedModeBanner: false,
          locale: localeProvider.locale,
          supportedLocales: const [
            Locale('en', 'US'),
            Locale('pt', 'BR'),
          ],
          localizationsDelegates: [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          scaffoldMessengerKey: scaffoldMessengerKey,
          home: const SplashView(),
        );
      }

      @override
      Widget build(BuildContext context) {
        return ShowCaseWidget(
          autoPlay: true,
          autoPlayDelay: const Duration(milliseconds: 2000),
          enableAutoPlayLock: true,
          blurValue: 1.3,
          builder: _buildApp,
        );
      }
    }
  presentation/:
    controllers/:
      home_controller.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/presentation/providers/home_provider.dart';

        class HomeController extends ChangeNotifier {
          final HomeProvider homeProvider;
          bool isLoading = true;
          bool hasError = false;
          HomeController(this.homeProvider);
          Future<void> loadSuggestions() async {
            isLoading = true;
            hasError = false;
            notifyListeners();
            try {
              await homeProvider.loadSuggestionsContent(page: 1);
              isLoading = false;
            } catch (_) {
              hasError = true;
              isLoading = false;
            }
            notifyListeners();
          }
          Future<void> loadFollowings() async {
            isLoading = true;
            hasError = false;
            notifyListeners();
            try {
              await homeProvider.loadFollowingsLatestContent(page: 1);
              isLoading = false;
            } catch (_) {
              hasError = true;
              isLoading = false;
            }
            notifyListeners();
          }
        }
      profile_controller.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/presentation/providers/profile_provider.dart';

        class ProfileController extends ChangeNotifier {
          final ProfileProvider profileProvider;
          bool isLoading = true;
          bool hasError = false;
          bool hasMore = false;
          int _currentPage = 1;
          ProfileController(this.profileProvider);
          Future<void> loadProfileHistory() async {
            if (!hasMore || isLoading) return;
            isLoading = true;
            hasError = false;
            notifyListeners();
            try {
              await profileProvider.loadProfileHistory(page: _currentPage);
              if (profileProvider.hasMoreData) {

                _currentPage += 1;
                hasMore = true;
              }
              isLoading = false;
            } catch (_) {
              hasError = true;
              isLoading = false;
            }
            notifyListeners();
          }
        }
    providers/:
      access_provider.dart: |
        import 'package:dio/dio.dart';
        import 'package:flutter/foundation.dart';
        import 'package:shared_preferences/shared_preferences.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/data/shared_prefs_service.dart';

        class AccessProvider extends ChangeNotifier {
          bool _acceptsAccountCreation = false;
          bool _agreesWithRules = false;
          late String _uiId = '';
          String _registerEmail = '';
          String _registerPassword = '';
          String _loginEmail = '';
          String _loginPassword = '';
          String _setRegisterPasswordConfirm = '';
          String _activationCode = '';
          String _accountEmail = '';
          bool _isLoading = false;
          bool _isReady = false;
          bool _isSuccess = false;
          String? _errorMessage;
          bool _rememberMe = false;
          bool get rememberMe => _rememberMe;
          List<dynamic> _numbers = [];
          List<dynamic> get numbers => _numbers;
          String get registerEmail => _registerEmail;
          String get registerPassword => _registerPassword;
          bool get acceptsAccountCreation => _acceptsAccountCreation;
          bool get agreesWithRules => _agreesWithRules;
          String get accountEmail => _accountEmail;
          String get loginEmail => _loginEmail;
          String get loginPassword => _loginPassword;
          String get activationCode => _activationCode;
          bool get isLoading => _isLoading;
          bool get isReady => _isReady;
          bool get isSuccess => _isSuccess;
          String? get errorMessage => _errorMessage;
          String get uiId => _uiId;
          void setAccountEmail(String value) {

            _accountEmail = value.toLowerCase();
            notifyListeners();
          }
          void setRegisterEmail(String value) {

            _registerEmail = value.toLowerCase();
            notifyListeners();
          }
          void setRegisterPassword(String value) {

            _registerPassword = value;
            notifyListeners();
          }
          void setRegisterPasswordConfirm(String value) {

            _setRegisterPasswordConfirm = value;
            notifyListeners();
          }
          void setAcceptsAccountCreation(bool value) {

            _acceptsAccountCreation = value;
            notifyListeners();
          }
          void setAgreesWithRules(bool value) {

            _agreesWithRules = value;
            notifyListeners();
          }
          void setLoginEmail(String value) {

            _loginEmail = value.toLowerCase();
            notifyListeners();
          }
          void setLoginPassword(String value) {

            _loginPassword = value;
            notifyListeners();
          }
          void setActivationCode(String value) {

            String cleanCode = value.replaceAll(RegExp(r'\D'), '');
            if (cleanCode.length <= 4) {

              _activationCode = cleanCode;
              notifyListeners();
            }
          }
          void setUiId(String value) {

            _uiId = value;
            notifyListeners();
          }
          void resetStatus() {

            _isSuccess = false;
            _errorMessage = null;
            notifyListeners();
          }
          bool validateRecoveryAccountLogin() {

            final emailRegex = RegExp(r"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$");
            final bool isEmailValid = emailRegex.hasMatch(accountEmail);
            return isEmailValid;
          }
          bool validateLoginForm() {

            final emailRegex = RegExp(r"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$");
            final bool isEmailValid = emailRegex.hasMatch(_loginEmail);
            final bool isPasswordValid = _loginPassword.length >= 6;
            return isEmailValid && isPasswordValid;
          }
          bool validateRegisterForm() {

            final emailRegex = RegExp(r"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$");
            final bool isEmailValid = emailRegex.hasMatch(_registerEmail);
            final bool isPasswordValid = _registerPassword.length >= 6;
            final bool isPasswordConfirmValid = _setRegisterPasswordConfirm.length >= 6;
            final bool passwordsMatch = _registerPassword == _setRegisterPasswordConfirm;
            final bool hasAcceptedAccountCreation = _acceptsAccountCreation;
            final bool hasAgreedWithRules = _agreesWithRules;
            return isEmailValid &&
                isPasswordValid &&
                isPasswordConfirmValid &&
                passwordsMatch &&
                hasAcceptedAccountCreation &&
                hasAgreedWithRules;
          }
          Future<void> loginUser() async {
            _isReady = false;
            _isLoading = true;
            _errorMessage = null;
            _isSuccess = false;
            notifyListeners();
            if (_loginEmail.isEmpty || _loginPassword.isEmpty) {

              _errorMessage = "E-mail e senha s√£o obrigat√≥rios!";
              _isLoading = false;
              notifyListeners();
              return;
            }
            try {
              final response = await DioClientService.dio.post(
                '/users/sign_in.json',
                data: {
                  "user": {
                    "email": _loginEmail,
                    "password": _loginPassword,
                  }
                },
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                String? token = response.headers['authorization']?[0].split('Bearer ')[1];
                await SharedPrefsService.setString("authorization", token!);
                await SharedPrefsService.setBool("userAccountActive", true);
                _isReady = true;
                _isSuccess = true;
              } else {
                _errorMessage = "Falha ao fazer login.";
              }
            } on DioException catch (e) {
              if (e.response != null) {

                final statusCode = e.response!.statusCode;
                final errorData = e.response!.data;
                if (statusCode == 401) {

                  _errorMessage =
                  "Credenciais inv√°lidas. Verifique seu e-mail e senha.";
                } else if (statusCode == 422) {
                  if (errorData is Map<String, dynamic> &&
                      errorData.containsKey('errors')) {
                    _errorMessage = errorData['errors'];
                  } else {
                    _errorMessage = "Erro de valida√ß√£o desconhecido.";
                  }
                } else {
                  _errorMessage = "Erro inesperado: ${e.response!.statusCode}";
                }
              } else {
                _errorMessage = "Erro inesperado: ${e.message}";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
          }
          Future<List<dynamic>> registerUser(String uid) async {
            _isLoading = true;
            _errorMessage = null;
            _isSuccess = false;
            notifyListeners();
            if (_registerEmail.isEmpty || _registerPassword.isEmpty) {

              _errorMessage = "Todos os campos devem ser preenchidos!";
              _isLoading = false;
              notifyListeners();
              return [];
            }
            try {
              final response = await DioClientService.dio.post(
                '/users.json',
                data: {
                  "user": {
                    "email": _registerEmail,
                    "password": _registerPassword,
                    "ui_id": uid,
                    "accepting_using_terms": _agreesWithRules,
                    "accepting_create_account": _acceptsAccountCreation
                  }
                },
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 201) {

                await SharedPrefsService.setBool("userAccountCreated", true);
                await SharedPrefsService.setBool("userAccountActive", false);
                await SharedPrefsService.setString("email", _registerEmail);
                if (response.data['activation_code_options'] != null) {

                  _numbers = response.data['activation_code_options'];
                }
                _isSuccess = true;
                return numbers;
              }  else {
                _isSuccess = false;
                _errorMessage = "ao validar conta";
              }
            } on DioException catch (e) {
              if (e.response != null && e.response!.statusCode == 422) {

                final errorData = e.response!.data;
                if (errorData is Map<String, dynamic> &&
                    errorData.containsKey('errors')) {
                  _errorMessage =
                  errorData['errors'];
                } else {
                  _errorMessage = "Erro de valida√ß√£o desconhecido.";
                }
              } else {
                _errorMessage = "Erro inesperado: ${e.message}";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
            return [];
          }
          Future<void> verifyCode(Map<String, dynamic> codeData) async {
            final prefs = await SharedPreferences.getInstance();
            try {
              final response = await DioClientService.dio.post(
                '/users/active_account.json',
                data: {
                  "email": codeData['email'],
                  "code": codeData['code'],
                },
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                String? token = response.headers['authorization']?[0].split('Bearer ')[1];
                if (token != null) {

                  await SharedPrefsService.setString("authorization", token);
                }
                await SharedPrefsService.setBool("userAccountActive", true);
                _isSuccess = true;
              } else {
                _errorMessage = "Erro ao verificar c√≥digo.";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
          }
          Future<void> recoveryAccount(String email) async {
            _isLoading = true;
            _errorMessage = null;
            _isSuccess = false;
            notifyListeners();
            if (_accountEmail.isEmpty) {

              _errorMessage = "O c√≥digo deve ser preenchido!";
              _isLoading = false;
              notifyListeners();
              return;
            }
            try {
              final response = await DioClientService.dio.post(
                '/users/password',
                data: {
                  "email": email,
                },
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                _isSuccess = true;
              } else {
                _errorMessage = "Erro ao verificar c√≥digo.";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
          }
        }
      content_provider.dart: |
        import 'dart:convert';
        import 'dart:io';
        import 'dart:ui';

        import 'package:dio/dio.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/foundation.dart';
        import 'package:flutter/material.dart';
        import 'package:image_cropper/image_cropper.dart';
        import 'package:image_picker/image_picker.dart';
        import 'package:shared_preferences/shared_preferences.dart';
        import 'package:xiis/data/comment_model.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/data/shared_prefs_service.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';
        import 'package:xiis/presentation/providers/home_provider.dart';

        enum WatermarkPosition { center, bottomRight, topRight }

        class ContentProvider extends ChangeNotifier implements DebuggableProvider  {
          bool _isLoading = false;
          bool _isReady = false;
          bool _isSuccess = false;
          String? _errorMessage;
          bool get isLoading => _isLoading;
          bool get isReady => _isReady;
          bool get isSuccess => _isSuccess;
          String? get errorMessage => _errorMessage;
          late int _id;
          String _title = '';
          String _description = '';
          int get id => _id;
          String get title => _title;
          String get description => _description;
          String _classifiedAs = "open";
          List<String> _reactions = ["clap_hands", "tip_owner"];
          List<String> _tagList = [];
          List<Map<String, dynamic>> _comments = [];
          final List<File> _selectedImages = [];
          final ImagePicker _picker = ImagePicker();
          File? _coverImage;
          double newBalance = 0.0;
          bool _isBlurEnabled = false;
          bool _isObfuscationEnabled = false;
          bool _isWatermarkEnabled = false;
          double _blurIntensity = 5.0;
          double _obfuscationIntensity = 50.0;
          double _watermarkOpacity = 0.5;
          double _watermarkFontSize = 18.0;
          String _watermarkText = "Xii\$ App";
          WatermarkPosition _watermarkPosition = WatermarkPosition.bottomRight;
          Offset _customWatermarkOffset = const Offset(0.9, 0.9);
          double _watermarkX = 0.0;
          double _watermarkY = 0.0;
          @override
          Map<String, dynamic> debugValues() {

            return {
              'isLoading': _isLoading,
              'isReady': _isReady,
              'isSuccess': _isSuccess,
              'errorMessage': _errorMessage,
              'title': _title,
              'description': _description,
              'classifiedAs': _classifiedAs,
              'reactions': _reactions,
              'tagList.length': _tagList.length,
              'comments.length': _comments.length,
              'selectedImages.length': _selectedImages.length,
              'coverImageSet': _coverImage != null,
              'newBalance': newBalance,
              'isBlurEnabled': _isBlurEnabled,
              'blurIntensity': _blurIntensity,
              'isObfuscationEnabled': _isObfuscationEnabled,
              'obfuscationIntensity': _obfuscationIntensity,
              'isWatermarkEnabled': _isWatermarkEnabled,
              'watermarkText': _watermarkText,
              'watermarkOpacity': _watermarkOpacity,
              'watermarkFontSize': _watermarkFontSize,
              'watermarkPosition': _watermarkPosition.toString(),
              'customWatermarkOffset': _customWatermarkOffset.toString(),
            };
          }
          late HomeProvider homeProvider;
          void setTitle(String value) {

            _title = value;
            notifyListeners();
          }
          void setDescription(String value) {

            _description = value;
            notifyListeners();
          }
          void setTags(List<String> tags) {

            _tagList = tags;
            notifyListeners();
          }
          bool get isBlurEnabled => _isBlurEnabled;
          bool get isObfuscationEnabled => _isObfuscationEnabled;
          bool get isWatermarkEnabled => _isWatermarkEnabled;
          String get classifiedAs => _classifiedAs;
          int get maxImages => _getMaxImages();
          double get blurIntensity => _blurIntensity;
          double get obfuscationIntensity => _obfuscationIntensity;
          double get watermarkOpacity => _watermarkOpacity;
          double get watermarkFontSize => _watermarkFontSize;
          String get watermarkText => _watermarkText;
          WatermarkPosition get watermarkPosition => _watermarkPosition;
          Offset get customWatermarkOffset => _customWatermarkOffset;
          List<String> get reactions => _reactions;
          List<String> get tagList => _tagList;
          List<Map<String, dynamic>> get comments => _comments;
          List<File> get selectedImages => _selectedImages;
          File? get coverImage => _coverImage;
          double get watermarkX => _watermarkX;
          double get watermarkY => _watermarkY;
          static const Map<WatermarkPosition, Offset> _watermarkOffsets = {
            WatermarkPosition.center: Offset(0.5, 0.5),
            WatermarkPosition.bottomRight: Offset(0.9, 0.9),
            WatermarkPosition.topRight: Offset(0.9, 0.1),
          };
          void setWatermarkX(double value) {

            _watermarkX = value;
            notifyListeners();
          }
          void setWatermarkY(double value) {

            _watermarkY = value;
            notifyListeners();
          }
          void setWatermarkPosition(WatermarkPosition position) {

            _watermarkPosition = position;
            notifyListeners();
          }
          void setCustomWatermarkOffset(double x, double y) {

            _customWatermarkOffset = Offset(x, y);
            notifyListeners();
          }
          void setWatermarkFontSize(double size) {

            _watermarkFontSize = size.clamp(18.0, 100.0);
            notifyListeners();
          }
          void toggleBlur(bool value) {

            if (value) disableObfuscation();
            _isBlurEnabled = value;
            notifyListeners();
          }
          void toggleObfuscation(bool value) {

            if (value) disableBlur();
            _isObfuscationEnabled = value;
            notifyListeners();
          }
          void setBlurIntensity(double level) {

            _blurIntensity = level;
            notifyListeners();
          }
          void setObfuscationIntensity(double level) {

            _obfuscationIntensity = level;
            notifyListeners();
          }
          void toggleWatermark(bool value) {

            _isWatermarkEnabled = value;
            notifyListeners();
          }
          void setWatermarkOpacity(double value) {

            _watermarkOpacity = value;
            notifyListeners();
          }
          void setWatermarkText(String text) {

            _watermarkText = text;
            notifyListeners();
          }
          void setClassifiedAs(String type) {

            _classifiedAs = type;
            _selectedImages.clear();
            _coverImage = null;
            _updateReactions();
            notifyListeners();
          }
          void _updateReactions() {

            switch (_classifiedAs) {

              case "auction":
                _reactions = ["auction_process"];
                break;
              case "restricted":
                _reactions = ["request_access"];
                break;
              case "open":
              default:
                _reactions = ["clap_hands", "tip_owner"];
                break;
            }
            notifyListeners();
          }
          void disableObfuscation() {

            _isObfuscationEnabled = false;
            notifyListeners();
          }
          void disableBlur() {

            _isBlurEnabled = false;
            notifyListeners();
          }
          void addTag(String tag) {

            if (!_tagList.contains(tag)) {

              _tagList.add(tag);
              notifyListeners();
            }
          }
          void removeTag(String tag) {

            _tagList.remove(tag);
            notifyListeners();
          }
          void setCoverImage(int index) {

            _coverImage = _selectedImages[index];
            notifyListeners();
          }
          void removeImage(int index) {

            if (_selectedImages[index] == _coverImage) {

              _coverImage = null;
            }
            _selectedImages.removeAt(index);
            notifyListeners();
          }
          void clearImages() {

            _selectedImages.clear();
            _coverImage = null;
            notifyListeners();
          }
          int _getMaxImages() {

            switch (_classifiedAs) {

              case "auction":
              case "restricted":
                return 11;
              case "open":
              default:
                return 1;
            }
          }
          Future<void> pickImages(BuildContext context) async {
            if (_selectedImages.length >= maxImages) {

              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                    "Max $maxImages images allowed for ${_classifiedAs.toUpperCase()}",
                  ),
                ),
              );
              return;
            }
            showDialog(
              context: context,
              barrierDismissible: false,
              builder: (BuildContext context) {
                return const Center(
                  child: CircularProgressIndicator(),
                );
              },
            );
            try {
              final pickedFiles = await _picker.pickMultiImage();
              if (pickedFiles != null) {

                for (var file in pickedFiles) {

                  if (_selectedImages.length < maxImages) {

                    _selectedImages.add(File(file.path));
                  }
                }
                notifyListeners();
              }
            } finally {
              Navigator.of(context, rootNavigator: true).pop();
            }
          }
          Future<void> saveDraft() async {
            final prefs = await SharedPreferences.getInstance();
            await prefs.setString('content_draft', jsonEncode(toJson()));
          }
          Future<void> loadDraft() async {
            final prefs = await SharedPreferences.getInstance();
            String? draftString = prefs.getString('content_draft');
            if (draftString != null) {

              Map<String, dynamic> draftData = jsonDecode(draftString);
              _classifiedAs = draftData["settings"]["classified_as"];
              _reactions = List<String>.from(draftData["settings"]["reactions"]);
              _isObfuscationEnabled = draftData["settings"]["obfuscate"]["apply"];
              _obfuscationIntensity = draftData["settings"]["obfuscate"]["level"];
              _isBlurEnabled = draftData["settings"]["blur"]["apply"];
              _blurIntensity = draftData["settings"]["blur"]["level"];
              _isWatermarkEnabled = draftData["settings"]["watermark"]["apply"];
              _watermarkText = draftData["settings"]["watermark"]["text"];
              _watermarkOpacity = draftData["settings"]["watermark"]["opacity"];
              _tagList = List<String>.from(draftData["settings"]["tag_list"]);
              notifyListeners();
            }
          }
          Future<void> clearDraft() async {
            final prefs = await SharedPreferences.getInstance();
            await prefs.remove('content_draft');
          }
          void resetState() {

            _selectedImages.clear();
            _coverImage = null;
            _isBlurEnabled = false;
            _isObfuscationEnabled = false;
            _blurIntensity = 5.0;
            _obfuscationIntensity = 50.0;
            _isWatermarkEnabled = false;
            _watermarkText = "Xii\$ App";
            _watermarkOpacity = 0.5;
            _watermarkFontSize = 18.0;
            _tagList.clear();
            notifyListeners();
          }
          Map<String, dynamic> toJson() {

            return {
              "id": DateTime.now().millisecondsSinceEpoch,
              "title": _title,
              "description": _description,
              "settings": {
                "classified_as": _classifiedAs,
                "reactions": _reactions,
                "max_image": maxImages,
                "obfuscate": {
                  "apply": _isObfuscationEnabled,
                  "level": _obfuscationIntensity
                },
                "blur": {"apply": _isBlurEnabled, "level": _blurIntensity},
                "watermark": {
                  "apply": _isWatermarkEnabled,
                  "text": _watermarkText,
                  "opacity": _watermarkOpacity,
                  "position": {"x": watermarkX, "y": watermarkY},
                  "font_size": _watermarkFontSize,
                },
                "tag_list": _tagList,
              },
              "images": _selectedImages
                  .map((image) => {"file": image.path, "cover": image == _coverImage})
                  .toList(),
            };
          }
          Future<List<CommentModel>> loadComments(int contentId) async {
            debugPrint('üîÑ Iniciando requisi√ß√£o de coment√°rios para contentId: $contentId');
            try {
              final response = await DioClientService.dio.get(
                '/comments.json', queryParameters: {'content_id': contentId},
              );
              if (response.statusCode == 200) {

                debugPrint(
                    '‚úÖ Status: ${response.statusCode} ${response.statusMessage}'
                );
                final data = response.data;
                if (data != null && data['comments'] is List) {

                  final comments = (data['comments'] as List)
                      .map((json) => CommentModel.fromJson(json))
                      .toList();
                  debugPrint('üóíÔ∏è Total de coment√°rios carregados: ${comments.length}');
                  return comments;
              }} else {
                debugPrint('‚ö†Ô∏è Formato inesperado: ${response.data.runtimeType}');
              }
            } catch (e, stack) {
              debugPrint('‚ùå Erro ao carregar coment√°rios: $e');
              debugPrint('$stack');
            }
            return [];
          }
          Future<void> loadProfileContents({int page = 1, bool isRefresh = false}) async {
            if (_isLoading) return;
            _errorMessage = null;
            try {
              final response = await DioClientService.dio.get(
                '/followings.json', queryParameters: {'page': page},
                options: Options(
                    headers: {'Content-Type': 'application/json'}
                ),
              );
              if (response.statusCode == 200) {

                final List<Map<String, dynamic>> newContents = List<Map<String, dynamic>>.from(response.data['followings'] ?? []);
                if (isRefresh) {

                } else {
                }
                notifyListeners();
              } else {
              }
            } catch (e) {
            } finally {
            }
          }
          double coverZoom = 1.0;
          Offset coverOffset = Offset.zero;
          void updateCoverZoom(double value) {

            coverZoom = value;
            notifyListeners();
          }
          void updateCoverOffset(Offset offset) {

            coverOffset = offset;
            notifyListeners();
          }
          void resetCoverTransform() {

            coverZoom = 1.0;
            coverOffset = Offset.zero;
            notifyListeners();
          }
          void clearCoverImage() {

            if (coverImage != null) {

              selectedImages.removeWhere((image) => image.path == coverImage!.path);
              _coverImage = null;
              notifyListeners();
            }
          }
          Future<void> cropCoverImage() async {
            if (_coverImage == null) return;
            final croppedFile = await ImageCropper().cropImage(
              sourcePath: _coverImage!.path,
              compressFormat: ImageCompressFormat.jpg,
              compressQuality: 95,
              aspectRatio: const CropAspectRatio(ratioX: 1, ratioY: 1),
              uiSettings: [
                AndroidUiSettings(
                  toolbarTitle: 'Recortar imagem',
                  toolbarColor: Colors.black,
                  toolbarWidgetColor: Colors.white,
                  lockAspectRatio: true,
                ),
                IOSUiSettings(
                  title: 'Recortar imagem',
                  aspectRatioLockEnabled: true,
                ),
              ],
            );
            if (croppedFile != null) {

              final newFile = File(croppedFile.path);
              final oldPath = _coverImage!.path;
              if (oldPath != newFile.path && await _coverImage!.exists()) {

                await _coverImage!.delete();
              }
              _coverImage = newFile;
              final index = selectedImages.indexWhere((file) => file.path == oldPath);
              if (index != -1) {

                selectedImages[index] = newFile;
              } else {
                selectedImages.insert(0, newFile);
              }
              notifyListeners();
            }
          }
          Future<List<dynamic>> submitComment(Map<String, dynamic> formData) async {
            _isLoading = true;
            _errorMessage = null;
            _isSuccess = false;
            notifyListeners();
            try {
              final response = await DioClientService.dio.post(
                '/comments.json',
                data: { 'comment': formData },
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 201) {

                _isSuccess = true;
                clearDraft();
                _comments = response.data;
                notifyListeners();
                return response.data;
              } else {
                _isSuccess = false;
                _errorMessage = "Erro ao enviar conte√∫do.";
              }
            } on DioException catch (e) {
              if (e.response?.statusCode == 422) {

                final errorData = e.response!.data;
                if (errorData is Map<String, dynamic> &&
                    errorData.containsKey('errors')) {
                  _errorMessage = errorData['errors'].toString();
                } else {
                  _errorMessage = "Erro de valida√ß√£o desconhecido.";
                }
              } else {
                _errorMessage = "Erro inesperado: ${e.message}";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
            return [];
          }
          Future<List<dynamic>> submitContent(FormData formData) async {
            _isLoading = true;
            _errorMessage = null;
            _isSuccess = false;
            notifyListeners();
            try {
              final response = await DioClientService.dio.post(
                '/contents.json',
                data: formData,
                options: Options(headers: {'Content-Type': 'multipart/form-data'}),
              );
              if (response.statusCode == 201) {

                _isSuccess = true;
                clearDraft();
                return response.data;
              } else {
                _isSuccess = false;
                _errorMessage = "Erro ao enviar conte√∫do.";
              }
            } on DioException catch (e) {
              if (e.response?.statusCode == 422) {

                final errorData = e.response!.data;
                if (errorData is Map<String, dynamic> &&
                    errorData.containsKey('errors')) {
                  _errorMessage = errorData['errors'].toString();
                } else {
                  _errorMessage = "Erro de valida√ß√£o desconhecido.";
                }
              } else {
                _errorMessage = "Erro inesperado: ${e.message}";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
            return [];
          }
          Future<void> postTipOwner(double tipOwner, int contentId) async {
            _isLoading = true;
            _errorMessage = null;
            _isSuccess = false;
            try {
              final response = await DioClientService.dio.post(
                '/profiles/contents/tip_owner.json',
                data: { "content": contentId,"tip": tipOwner },
                options: Options(headers: {'Content-Type': 'multipart/form-data'}),
              );
              if (response.statusCode == 200) {

                _isSuccess = true;
                newBalance = response.data['balance'];
                notifyListeners();
              } else {
                _isSuccess = false;
                _errorMessage = "Erro ao enviar conte√∫do.";
              }
            } on DioException catch (e) {
              if (e.response?.statusCode == 422) {

                final errorData = e.response!.data;
                if (errorData is Map<String, dynamic> &&
                    errorData.containsKey('errors')) {
                  _errorMessage = errorData['errors'].toString();
                } else {
                  _errorMessage = "Erro de valida√ß√£o desconhecido.";
                }
              } else {
                _errorMessage = "Erro inesperado: ${e.message}";
              }
            } catch (e) {
              _errorMessage = "Erro inesperado: $e";
            }
            _isLoading = false;
            notifyListeners();
          }
          Future<FormData> buildFormData(Map<String, dynamic> content) async {
            final formData = FormData();
            formData.fields.add(MapEntry('content[title]', content['title'] ?? ''));
            formData.fields.add(MapEntry('content[description]', content['description'] ?? ''));
            formData.fields.add(MapEntry('content[settings]', jsonEncode(content['settings'] ?? {})));
            final List<dynamic> images = content['images'] ?? [];
            for (var img in images) {

              final filePath = img['file'];
              final isCover = img['cover'] == true;
              final file = File(filePath);
              if (await file.exists()) {

                final multipartFile = await MultipartFile.fromFile(filePath,
                    filename: filePath.split('/').last);
                formData.files.add(MapEntry('content[images][][file]', multipartFile));
                formData.fields.add(MapEntry('content[images][][cover]', isCover.toString()));
              }
            }
            return formData;
          }
        }
      debuggable_provider.dart: |
        abstract class DebuggableProvider {
          Map<String, dynamic> debugValues();
        }
      entrance_provider.dart: |
        import 'package:dio/dio.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';

        class EntranceProvider extends ChangeNotifier implements DebuggableProvider {
          bool _hasProfile = false;
          String _balance = '0.00';
          String _errorMessage = '';
          Map<String, dynamic> _profile = {};
          bool get hasProfile => _hasProfile;
          String get errorMessage => _errorMessage;
          Map<String, dynamic> get profile => _profile;
          String get balance {
            final raw = _balance;
            final parsed = (double.tryParse(raw) ?? 0.0) + 1.0;
            return parsed.toStringAsFixed(2);
          }
          void updateBalance(double plusAmount) {

            final current = double.tryParse(_balance) ?? 0.0;
            final updated = current + plusAmount;
            _balance = updated.toStringAsFixed(2);
            if (_profile.containsKey('my_wallet')) {

              _profile['my_wallet']['balance'] = _balance;
            }
            notifyListeners();
          }
          Future<bool> checkUserAccountProfile() async {
            try {
              final response = await DioClientService.dio.get(
                '/profiles/about_me.json',
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                _hasProfile = response.data['has_profile'];
                _profile = response.data['profile'] ?? {};
                final wallet = _profile['my_wallet'];
                _balance = wallet?['balance']?.toString() ?? '0.00';
                return _hasProfile;
              } else {
                return _hasProfile;
              }
            } catch (e) {
              return _hasProfile;
            } finally {
              _setErrorState('');
            }
          }
          void _setErrorState(String message) {

            _errorMessage = message;
            notifyListeners();
          }
          @override
          Map<String, dynamic> debugValues() {

            return {
              'hasProfile': hasProfile,
              'balance': balance,
              'errorMessage': errorMessage,
              'profile.id': profile['id'],
              'profile.name': profile['name'],
              'wallet.balance': profile['my_wallet']?['balance'],
            };
          }
        }
      financial_provider.dart: |
        import 'package:dio/dio.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/data/dio_client_service.dart';

        class FinancialProvider extends ChangeNotifier {
          bool _isLoading = false;
          String? _errorMessage;
          String? _paymentStatus;
          double _selectedAmount = 5;
          String _selectedCountry = "US";
          bool _isFormDisabled = false;
          bool _isPurchaseAgreed = false;
          bool _isFormValid = false;
          String _selectedPaymentMethod = 'card';
          List<Map<String, dynamic>> _profileInvoices = [];
          int _currentPage = 1;
          int _totalPages = 1;
          int _totalEntries = 0;
          bool _hasMoreData = true;
          bool _isLastPage = false;
          String? get paymentStatus => _paymentStatus;
          double get selectedAmount => _selectedAmount;
          String get selectedPaymentMethod => _selectedPaymentMethod;
          bool get isPurchaseAgreed => _isPurchaseAgreed;
          bool get isFormDisabled => _isFormDisabled;
          bool get isFormValid => _isFormValid;
          double get unitPriceInDollars => 0.25;
          bool get isLoading => _isLoading;
          String? get errorMessage => _errorMessage;
          List<Map<String, dynamic>> get profileInvoices => _profileInvoices;
          bool get hasMoreData => _hasMoreData;
          void setSelectedAmount(double amount) {

            _selectedAmount = amount;
            validateForm();
          }
          void setSelectedCountry(String countryCode) {

            _selectedCountry = countryCode.toUpperCase();
            validateForm();
          }
          void setSelectedPaymentMethod(String method) {

            _selectedPaymentMethod = method;
            notifyListeners();
          }
          void setSelectedAgree(bool accepted) {

            _isPurchaseAgreed = accepted;
            validateForm();
          }
          void toggleFormState(bool enabled) {

            _isFormDisabled = !enabled;
            notifyListeners();
          }
          void disableForm() {

            _isFormDisabled = true;
            notifyListeners();
          }
          void enableForm() {

            _isFormDisabled = false;
            notifyListeners();
          }
          void validateForm() {

            _isFormValid = _selectedAmount > 0 && _isPurchaseAgreed;
            notifyListeners();
          }
          void _setLoadingState(bool isLoading) {

            _isLoading = isLoading;
            notifyListeners();
          }
          void _setErrorState(String message) {

            _errorMessage = message;
            notifyListeners();
          }
          Future<void> _loadData({
            required String endpoint,
            required int page,
            required bool isRefresh,
            required List<Map<String, dynamic>> existingData,
            required void Function(List<Map<String, dynamic>>) onData,
            String? errorLabel,
          }) async {
            const int itemsPerPage = 10;
            try {
              final response = await DioClientService.dio.get(
                endpoint, queryParameters: {
                  'page': page, 'per_page': itemsPerPage,
                },
              );
              if (response.statusCode == 200) {

                final data = response.data as Map<String, dynamic>;
                final resourceName = 'contents';
                final fetchedContents = (data[resourceName] as List<dynamic>)
                    .map((item) => Map<String, dynamic>.from(item))
                    .toList();
                _currentPage = data['current_page'] ?? page;
                _totalPages = data['total_pages'] ?? 1;
                _totalEntries = data['total_entries'] ?? fetchedContents.length;
                _isLastPage = _currentPage >= _totalPages;
                _hasMoreData = _currentPage < _totalPages;
                List<Map<String, dynamic>> combinedData = isRefresh
                    ? fetchedContents : [...existingData, ...fetchedContents];
                onData(combinedData);
                notifyListeners();
              } else {
                throw Exception('Erro ao carregar ${errorLabel ?? "dados"}');
              }
            } catch (e) {
              _setErrorState("Erro ao carregar ${errorLabel ?? "dados"}: $e");
            }
          }
          Future<void> loadProfileInvoices({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/profiles/wallets/info.json',
              page: page, isRefresh: isRefresh,
              existingData: _profileInvoices,
              onData: (data) => _profileInvoices = data,
              errorLabel: 'Invoices',
            );
          }
          Future<void> loadNextPage() async {
            if (_hasMoreData && !_isLoading) {

              await loadProfileInvoices(page: _currentPage + 1);
            }
          }
          Future<void> refreshFeed() async {
            await loadProfileInvoices(page: 1, isRefresh: true);
          }
          Map<String, dynamic> buildPaymentPayload(Map<String, dynamic> payloadBaseValues) {

            double totalPrice = _selectedAmount * unitPriceInDollars;
            return {
              "amount": _selectedAmount,
              "unit_price": unitPriceInDollars,
              "total_price": totalPrice,
              "payment_method": _selectedPaymentMethod,
              "country": _selectedCountry,
              "agreed": _isPurchaseAgreed,
              ...payloadBaseValues,
            };
          }
          Future<Map<String, dynamic>?> createPaymentIntent() async {
            _setLoadingState(true);
            try {
              final response = await DioClientService.dio.post(
                '/profiles/payments/create_intent',
                data: {
                  'amount': (_selectedAmount * 100).toInt(),
                  'currency': "USD",
                  'payment_method': _selectedPaymentMethod,
                },
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                return response.data;
              } else {
                _setErrorState("Erro ao criar pagamento.");
                return null;
              }
            } catch (e) {
              _setErrorState("Erro inesperado: $e");
              return null;
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> processPayment(Map<String, dynamic> payloadReceived) async {
            if (!isFormValid) {

              _setErrorState("Preencha todos os campos antes de continuar.");
              return;
            }
            _setLoadingState(true);
            _paymentStatus = null;
            notifyListeners();
            try {
              final payload = buildPaymentPayload(payloadReceived);
              final response = await DioClientService.dio.post(
                '/profiles/payments/process',
                data: payload,
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                _paymentStatus = "Pagamento realizado com sucesso!";
                disableForm();
              } else {
                _setErrorState("Erro ao processar pagamento.");
              }
            } catch (e) {
              _setErrorState("Erro ao processar pagamento: $e");
            } finally {
              _setLoadingState(false);
            }
          }
        }
      home_provider.dart: |
        import 'package:dio/dio.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';

        class HomeProvider extends ChangeNotifier implements DebuggableProvider {
          bool _isLoading = false;
          String? _errorMessage;
          int _totalPages = 0;
          int _totalEntries = 0;
          int _currentPage = 1;
          bool _hasMoreData = false;
          bool _isLastPage = true;
          double currentBalance = 0.0;
          List<Map<String, dynamic>> _feedContents = [];
          List<Map<String, dynamic>> _availableProfiles = [];
          List<Map<String, dynamic>> _availableFollowings = [];
          List<Map<String, dynamic>> _followingsLastContent = [];
          List<Map<String, dynamic>> _suggestionsLastContent = [];
          bool get isLoading => _isLoading;
          String? get errorMessage => _errorMessage;
          bool get hasMoreData => _hasMoreData;
          List<Map<String, dynamic>> get feedContents => _feedContents;
          List<Map<String, dynamic>> get availableProfiles => _availableProfiles;
          List<Map<String, dynamic>> get availableFollowings => _availableFollowings;
          List<Map<String, dynamic>> get followingsLastContent => _followingsLastContent;
          List<Map<String, dynamic>> get suggestionsLastContent => _suggestionsLastContent;
          Future<void> _loadData({
            required String endpoint,
            required int page,
            required bool isRefresh,
            required List<Map<String, dynamic>> existingData,
            required void Function(List<Map<String, dynamic>>) onData,
            String? errorLabel,
          }) async {
            const int itemsPerPage = 10;
            final int expectedMax = page * itemsPerPage;
            final String resourceName = endpoint.split('/').last.split('.')[0];
            try {
              final response = await DioClientService.dio.get(
                endpoint,
                queryParameters: {
                  'page': page,
                  'per_page': itemsPerPage,
                },
              );
              if (response.statusCode == 200) {

                final data = response.data as Map<String, dynamic>;
                final fetchedContents = (data[resourceName] as List<dynamic>)
                    .map((item) => Map<String, dynamic>.from(item))
                    .toList();
                _currentPage = data['current_page'];
                _totalPages = data['total_pages'];
                _totalEntries = data['total_entries'];
                final currentPage = data['current_page'] ?? page;
                final totalPages = data['total_pages'] ?? 1;
                final totalEntries = data['total_entries'] ?? fetchedContents.length;
                if (!isRefresh && currentPage > totalPages) {

                  _hasMoreData = false;
                  return;
                }
                _isLastPage = currentPage >= totalPages || totalEntries <= itemsPerPage;
                _hasMoreData = currentPage < totalPages;
                List<Map<String, dynamic>> combinedData;
                if (isRefresh) {

                  combinedData = fetchedContents;
                } else if (fetchedContents.length < itemsPerPage) {
                  combinedData = fetchedContents;
                } else {
                  combinedData = [...existingData, ...fetchedContents];
                }
                onData(combinedData);
                notifyListeners();
              } else {
                throw Exception('Erro ao carregar $errorLabel');
              }
            } catch (e) {
              _setErrorState("Erro ao carregar $errorLabel: $e");
            }
          }
          Future<void> loadFollowingsLatestContent({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/home/followings.json',
              page: page,
              isRefresh: isRefresh,
              existingData: _followingsLastContent,
              onData: (data) => _followingsLastContent = data,
              errorLabel: 'Followings Content',
            );
          }
          Future<void> loadSuggestionsContent({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/home/suggestions.json',
              page: page,
              isRefresh: isRefresh,
              existingData: _suggestionsLastContent,
              onData: (data) => _suggestionsLastContent = data,
              errorLabel: 'Suggestions Content',
            );
          }
          Future<void> refreshFollowingsContent() async => await loadFollowingsLatestContent(page: 1, isRefresh: true);
          Future<void> refreshSuggestionsContent() async => await loadSuggestionsContent(page: 1, isRefresh: true);
          Future<Map<String, dynamic>> loadFollowingProfile(int profileId) async {
            _setLoadingState(true);
            _errorMessage = null;
            try {
              final response = await DioClientService.dio.get(
                '/followings/$profileId.json',
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                final Map<String, dynamic> profileContent = response.data['profile'];
                notifyListeners();
                return profileContent;
              } else {
                _setErrorState("Erro ao carregar o feed.");
                return {};
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao carregar o feed: $e");
              return {};
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> loadAvailableProfiles({int page = 1, bool isRefresh = false}) async {
            if (_isLoading) return;
            _setLoadingState(true);
            _errorMessage = null;
            try {
              final response = await DioClientService.dio.get(
                '/profiles.json',
                queryParameters: {'page': page},
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                final List<Map<String, dynamic>> newContents =
                List<Map<String, dynamic>>.from(response.data['profiles'] ?? []);
                if (isRefresh) {

                  _availableProfiles = newContents;
                } else {
                  _availableProfiles.addAll(newContents);
                }
                _hasMoreData = newContents.isNotEmpty;
                _currentPage = page;
                notifyListeners();
              } else {
                _setErrorState("Erro ao carregar o feed.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao carregar o feed: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> loadHomeFollowings({int page = 1, bool isRefresh = false}) async {
            if (_isLoading) return;
            _setLoadingState(true);
            _errorMessage = null;
            try {
              final response = await DioClientService.dio.get(
                '/home/followings.json',
                queryParameters: {'page': page},
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                final List<Map<String, dynamic>> newContents =
                List<Map<String, dynamic>>.from(response.data['followings'] ?? []);
                if (isRefresh) {

                  _availableFollowings = newContents;
                } else {
                  _availableFollowings.addAll(newContents);
                }
                _hasMoreData = newContents.isNotEmpty;
                _currentPage = page;
                notifyListeners();
              } else {
                _setErrorState("Erro ao carregar o feed.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao carregar o feed: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> loadHomeSuggestions({int page = 1, bool isRefresh = false}) async {
            if (_isLoading) return;
            _setLoadingState(true);
            _errorMessage = null;
            try {
              final response = await DioClientService.dio.get(
                '/home/suggestions.json',
                queryParameters: {'page': page},
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                final List<Map<String, dynamic>> newContents =
                List<Map<String, dynamic>>.from(response.data['followings'] ?? []);
                if (isRefresh) {

                  _availableFollowings = newContents;
                } else {
                  _availableFollowings.addAll(newContents);
                }
                _hasMoreData = newContents.isNotEmpty;
                _currentPage = page;
                notifyListeners();
              } else {
                _setErrorState("Erro ao carregar o feed.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao carregar o feed: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> loadAvailableFollowings({int page = 1, bool isRefresh = false}) async {
            try {
              final response = await DioClientService.dio.get(
                '/home/followings.json',
                queryParameters: {'page': page},
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                final List<Map<String, dynamic>> newContents =
                List<Map<String, dynamic>>.from(response.data['followings'] ?? []);
                if (isRefresh) {

                  _availableFollowings = newContents;
                } else {
                  _availableFollowings.addAll(newContents);
                }
                _hasMoreData = newContents.isNotEmpty;
                _currentPage = page;
                notifyListeners();
              } else {
                _setErrorState("Erro ao carregar o feed.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao carregar o feed: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> loadFeed({int page = 1, bool isRefresh = false}) async {
            if (_isLoading) return;
            _setLoadingState(true);
            _errorMessage = null;
            try {
              final response = await DioClientService.dio.get(
                '/profiles.json',
                queryParameters: {'page': page},
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                final List<Map<String, dynamic>> newContents =
                List<Map<String, dynamic>>.from(response.data['feeds'] ?? []);
                if (isRefresh) {

                  _feedContents = newContents;
                } else {
                  _feedContents.addAll(newContents);
                }
                _hasMoreData = newContents.isNotEmpty;
                _currentPage = page;
                notifyListeners();
              } else {
                _setErrorState("Erro ao carregar o feed.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao carregar o feed: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> loadNextPage() async {
            if (_hasMoreData) {

              await loadFeed(page: _currentPage + 1);
            }
          }
          Future<void> refreshFeed() async {
            await loadFeed(page: 1, isRefresh: true);
          }
          void _setLoadingState(bool isLoading) {

            _isLoading = isLoading;
            notifyListeners();
          }
          void _setErrorState(String message) {

            _errorMessage = message;
            notifyListeners();
          }
          @override
          Map<String, dynamic> debugValues() {

            return {
              'isLoading': _isLoading,
              'errorMessage': _errorMessage,
              'currentBalance': currentBalance.toStringAsFixed(2),
              'currentPage': _currentPage,
              'totalPages': _totalPages,
              'totalEntries': _totalEntries,
              'hasMoreData': _hasMoreData,
              'isLastPage': _isLastPage,
              'feedContents.length': _feedContents.length,
              'availableProfiles.length': _availableProfiles.length,
              'availableFollowings.length': _availableFollowings.length,
              'followingsLastContent.length': _followingsLastContent.length,
              'suggestionsLastContent.length': _suggestionsLastContent.length,
            };
          }
        }
      locale_provider.dart: |
        import 'package:flutter/cupertino.dart';

        class LocaleProvider extends ChangeNotifier {
          Locale _locale = Locale('en');
          Locale get locale => _locale;
          void setLocale(Locale locale) {

            _locale = locale;
            notifyListeners();
          }
        }
      notification_provider.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/data/socket_service.dart';

        class NotificationProvider with ChangeNotifier {
          late final SocketService _socketService;
          NotificationProvider() {

            _initializeSocket();
          }
          Future<void> _initializeSocket() async {
            _socketService = SocketService();
            await _socketService.connect(baseUrl: DioClientService.baseUrl);
          }
          void socketMessage(Map<String, dynamic> data) {

            final String? scope = data['type'];
            if (scope == null) {

              debugPrint('Mensagem recebida sem scope definido.');
              return;
            }
            switch (scope) {

              case 'tip_owner':
                handleTipOwnerNotification(data);
                break;
              case 'relationship':
                handleRelationshipNotification(data);
                break;
              case 'profile_content_history':
                handleProfileContentHistoryNotification(data);
                break;
              case 'profile_my_network_relationship':
                handleProfileMyNetworkRelationshipNotification(data);
                break;
              case 'profile_comments':
                handleProfileCommentsNotification(data);
                break;
              case 'rewards_balance':
                handleRewardsBalanceNotification(data);
                break;
              default:
                debugPrint('Scope desconhecido: $scope');
            }
          }
          void handleRelationshipNotification(Map<String, dynamic> data) {

            final String type = data['type'] ?? '';
            switch (type) {

              case 'new_follower':
                _onNewFollower(data);
                break;
              case 'unfollowed':
                _onUnfollowed(data);
                break;
              default:
                debugPrint('Unhandled Relationship Notification: $type');
            }
          }
          void handleTipOwnerNotification(Map<String, dynamic> data) {

            final String type = data['type'] ?? '';
            switch (type) {

              case 'tip_owner':
                _onTipOwner(data);
                break;
              default:
                debugPrint('Unhandled Relationship Notification: $type');
            }
          }
          void handleProfileContentHistoryNotification(Map<String, dynamic> data) {

            final String type = data['type'] ?? '';
            switch (type) {

              case 'new_content':
                _onNewContent(data);
                break;
              case 'content_deleted':
                _onContentDeleted(data);
                break;
              default:
                debugPrint('Unhandled Content History Notification: $type');
            }
          }
          void handleProfileMyNetworkRelationshipNotification(Map<String, dynamic> data) {

            final String type = data['type'] ?? '';
            switch (type) {

              case 'accepted_follow_request':
                _onAcceptedFollowRequest(data);
                break;
              case 'rejected_follow_request':
                _onRejectedFollowRequest(data);
                break;
              default:
                debugPrint('Unhandled My Network Relationship Notification: $type');
            }
          }
          void handleProfileCommentsNotification(Map<String, dynamic> data) {

            final String type = data['type'] ?? '';
            switch (type) {

              case 'new_comment':
                _onNewComment(data);
                break;
              case 'comment_deleted':
                _onCommentDeleted(data);
                break;
              default:
                debugPrint('Unhandled Comments Notification: $type');
            }
          }
          void handleRewardsBalanceNotification(Map<String, dynamic> data) {

            final String type = data['type'] ?? '';
            switch (type) {

              case 'balance_updated':
                _onBalanceUpdated(data);
                break;
              default:
                debugPrint('Unhandled Rewards Balance Notification: $type');
            }
          }
          final List<dynamic> _notifications = [];
          List<dynamic> get notifications => _notifications;
          void addNotification(dynamic notification) {

            _notifications.insert(0, notification);
            notifyListeners();
          }
          void clearNotifications() {

            _notifications.clear();
            notifyListeners();
          }
          void _onTipOwner(Map<String, dynamic> data) {

            debugPrint('Content Tip Owner: ${data['body']}');
            notifyListeners();
          }
          void _onNewFollower(Map<String, dynamic> data) {

            debugPrint('Novo seguidor: ${data['follower_name']}');
            notifyListeners();
          }
          void _onUnfollowed(Map<String, dynamic> data) {

            debugPrint('Deixaram de seguir: ${data['follower_name']}');
            notifyListeners();
          }
          void _onNewContent(Map<String, dynamic> data) {

            debugPrint('Novo conte√∫do publicado: ${data['content_id']}');
            notifyListeners();
          }
          void _onContentDeleted(Map<String, dynamic> data) {

            debugPrint('Conte√∫do deletado: ${data['content_id']}');
            notifyListeners();
          }
          void _onAcceptedFollowRequest(Map<String, dynamic> data) {

            debugPrint('Solicita√ß√£o de amizade aceita: ${data['profile_name']}');
            notifyListeners();
          }
          void _onRejectedFollowRequest(Map<String, dynamic> data) {

            debugPrint('Solicita√ß√£o de amizade rejeitada: ${data['profile_name']}');
            notifyListeners();
          }
          void _onNewComment(Map<String, dynamic> data) {

            debugPrint('Novo coment√°rio: ${data['comment_id']}');
            notifyListeners();
          }
          void _onCommentDeleted(Map<String, dynamic> data) {

            debugPrint('Coment√°rio deletado: ${data['comment_id']}');
            notifyListeners();
          }
          void _onBalanceUpdated(Map<String, dynamic> data) {

            debugPrint('Saldo atualizado: ${data['new_balance']}');
            notifyListeners();
          }
        }
      profile_provider.dart: |
        import 'dart:io';

        import 'package:dio/dio.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:shared_preferences/shared_preferences.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';

        class ProfileProvider extends ChangeNotifier implements DebuggableProvider {
          bool _isLoading = false;
          bool get isLoading => _isLoading;
          bool _hasMoreData = false;
          bool get hasMoreData => _hasMoreData;
          String? _errorMessage;
          String? get errorMessage => _errorMessage;
          List<Map<String, dynamic>> _contents = [];
          List<Map<String, dynamic>> get contents => _contents;
          List<Map<String, dynamic>> _comments = [];
          List<Map<String, dynamic>> get comments => _comments;
          List<Map<String, dynamic>> _followers = [];
          List<Map<String, dynamic>> get followers => _followers;
          List<Map<String, dynamic>> _followings = [];
          List<Map<String, dynamic>> get followings => _followings;
          Map<String, dynamic> _newRelationship = {};
          Map<String, dynamic> get newRelationship => _newRelationship;
          int _currentPage = 1;
          int get currentPage => _currentPage;
          int _totalPages = 0;
          int get totalPages => _totalPages;
          int _totalEntries = 0;
          int get totalEntries => _totalEntries;
          @override
          Map<String, dynamic> debugValues() {

            return {
              'isLoading': isLoading,
              'hasMoreData': hasMoreData,
              'errorMessage': errorMessage,
              'contents': contents.length,
              'comments': comments.length,
              'followers': followers.length,
              'followings': followings.length,
              'newRelationship': newRelationship,
            };
          }
          void _setLoadingState(bool isLoading) {

            _isLoading = isLoading;
            notifyListeners();
          }
          void _setErrorState(String message) {

            _errorMessage = message;
            notifyListeners();
          }
          void clearError() {

            _errorMessage = null;
            notifyListeners();
          }
          Future<MultipartFile> _prepareImageFile(File file) async {
            return MultipartFile.fromFile(file.path, filename: file.path.split('/').last);
          }
          Future<void> _loadData({
            required String endpoint,
            required int page,
            required bool isRefresh,
            required List<Map<String, dynamic>> existingData,
            required void Function(List<Map<String, dynamic>>) onData,
            String? errorLabel,
          }) async {
            const int itemsPerPage = 10;
            try {
              final response = await DioClientService.dio.get(
                endpoint,
                queryParameters: {'page': page, 'per_page': itemsPerPage},
              );
              if (response.statusCode == 200) {

                final data = response.data as Map<String, dynamic>;
                final segments = endpoint.split('/');
                if (segments.length < 3) throw Exception('Endpoint inv√°lido');
                final String resourceName = segments[2].split('.').first;
                final fetched = (data[resourceName] as List<dynamic>)
                    .map((item) => Map<String, dynamic>.from(item))
                    .toList();
                _currentPage = data['current_page'] ?? page;
                _totalPages = data['total_pages'] ?? 1;
                _totalEntries = data['total_entries'] ?? fetched.length;
                _hasMoreData = _currentPage < _totalPages;
                final combinedData = isRefresh
                    ? fetched
                    : [...existingData, ...fetched];
                onData(combinedData);
                notifyListeners();
              } else {
                throw Exception('Erro ao carregar $errorLabel');
              }
            } catch (e) {
              _setErrorState("Erro ao carregar $errorLabel: $e");
            }
          }
          Future<void> loadProfileHistory({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/profiles/contents.json',
              page: page,
              isRefresh: isRefresh,
              existingData: _contents,
              onData: (data) => _contents = data,
              errorLabel: 'conte√∫dos do perfil',
            );
          }
          Future<void> loadCommentsHistory({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/profiles/comments.json',
              page: page,
              isRefresh: isRefresh,
              existingData: _comments,
              onData: (data) => _comments = data,
              errorLabel: 'coment√°rios',
            );
          }
          Future<void> loadFollowers({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/profiles/followers.json',
              page: page,
              isRefresh: isRefresh,
              existingData: _followers,
              onData: (data) => _followers = data,
              errorLabel: 'seguidores',
            );
          }
          Future<void> loadFollowings({int page = 1, bool isRefresh = false}) async {
            await _loadData(
              endpoint: '/profiles/followings.json',
              page: page,
              isRefresh: isRefresh,
              existingData: _followings,
              onData: (data) => _followings = data,
              errorLabel: 'seguidos',
            );
          }
          Future<void> refreshHistory() async => await loadProfileHistory(page: 1, isRefresh: true);
          Future<void> refreshFollowers() async => await loadFollowers(page: 1, isRefresh: true);
          Future<void> refreshFollowings() async => await loadFollowings(page: 1, isRefresh: true);
          Future<void> refreshComment() async => await loadCommentsHistory(page: 1, isRefresh: true);
          Future<void> loadNextPage() async {
            if (_hasMoreData && !_isLoading) {

              await loadProfileHistory(page: _currentPage + 1);
            }
          }
          Future<void> createProfileWithImage({
            required String name,
            required String gender,
            required String location,
            required File imageFile,
          }) async {
            final formData = FormData.fromMap({
              'profile[name]': name,
              'profile[gender]': gender,
              'profile[location]': location,
              'profile[avatar]': await _prepareImageFile(imageFile),
            });
            try {
              _setLoadingState(true);
              final response = await DioClientService.dio.post('/profiles.json', data: formData);
              if (response.statusCode != 201) {

                _setErrorState("Erro ao criar perfil.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao criar perfil: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> updateProfileWithImage({
            required int profileId,
            String? name,
            String? gender,
            String? location,
            MultipartFile? imageFile,
          }) async {
            final profileData = <String, dynamic>{};
            if (name != null) profileData['profile[name]'] = name;
            if (gender != null) profileData['profile[gender]'] = gender;
            if (location != null) profileData['profile[location]'] = location;
            if (imageFile != null) profileData['profile[avatar]'] = imageFile;
            final formData = FormData.fromMap(profileData);
            try {
              _setLoadingState(true);
              final response = await DioClientService.dio.patch('/profiles/$profileId.json', data: formData);
              if (response.statusCode != 200) {

                _setErrorState("Erro ao atualizar perfil.");
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao atualizar perfil: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<void> editRelationship({
            required bool isRelationship,
            required int followingProfile,
          }) async {
            try {
              _setLoadingState(true);
              late Response response;
              if (isRelationship) {

                response = await DioClientService.dio.post(
                  '/profiles/unfollow',
                  data: {"following_profile": followingProfile},
                  options: Options(headers: {'Content-Type': 'application/json'}),
                );
              } else {
                response = await DioClientService.dio.post(
                  '/profiles/follow',
                  data: {"following_profile": followingProfile},
                  options: Options(headers: {'Content-Type': 'application/json'}),
                );
              }
              if (response.statusCode == 200 || response.statusCode == 201) {

                _newRelationship = response.data;
              } else {
                _setErrorState('Erro ao processar a√ß√£o. C√≥digo: ${response.statusCode}');
              }
            } catch (e) {
              _setErrorState("Erro inesperado ao editar relacionamento: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<Map<String, dynamic>> loadProfile() async {
            final prefs = await SharedPreferences.getInstance();
            if (prefs.getKeys().isEmpty) return {};
            final Map<String, dynamic> profileData = {};
            for (String key in prefs.getKeys()) {

              final value = prefs.get(key);
              profileData[key] = value;
            }
            return profileData;
          }
        }
      reward_provider.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';

        import 'entrance_provider.dart';

        class RewardProvider extends ChangeNotifier implements DebuggableProvider {
          final EntranceProvider _entranceProvider;
          RewardProvider({required EntranceProvider entranceProvider})
              : _entranceProvider = entranceProvider {
            _entranceProvider.addListener(() {
              notifyListeners();
            });
          }
          bool _isLoading = false;
          String? _errorMessage;
          bool get isLoading => _isLoading;
          String? get errorMessage => _errorMessage;
          String get balance => _entranceProvider.balance;
          void updateBalance(String newBalance) {

            double? plusAmount = double.tryParse(newBalance);
            _entranceProvider.updateBalance(plusAmount!);
          }
          void setLoading(bool loading) {

            _isLoading = loading;
            notifyListeners();
          }
          void _setErrorState(String message) {

            _errorMessage = message;
            notifyListeners();
          }
          @override
          Map<String, dynamic> debugValues() {

            return {
              'isLoading': isLoading,
              'errorMessage': errorMessage,
              'balance': balance,
            };
          }
        }
      settings_provider.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/data/dio_client_service.dart';

        class SetupProvider extends ChangeNotifier {
          bool _isLoading = false;
          String? _errorMessage;
          bool get isLoading => _isLoading;
          String? get errorMessage => _errorMessage;
          void _setLoading(bool value) {

            _isLoading = value;
            notifyListeners();
          }
          void _setError(String? message) {

            _errorMessage = message;
            notifyListeners();
          }
          Future<void> fetchAndUpdateProfile(Map<String, dynamic> updateData) async {
            _setLoading(true);
            try {
              final response = await DioClientService.dio.get('/profiles/profile_id');
              final profileId = response.data['profile_id'];
              if (profileId != null) {

                await _updateProfile(profileId, updateData);
              } else {
                throw Exception('ID do perfil n√£o encontrado');
              }
              _setLoading(false);
            } catch (e) {
              _setError('Erro ao atualizar perfil: $e');
              _setLoading(false);
            }
          }
          Future<void> _updateProfile(int profileId, Map<String, dynamic> data) async {
            try {
              await DioClientService.dio.patch('/profiles/$profileId', data: data);
            } catch (e) {
              throw Exception('Erro ao enviar dados do perfil: $e');
            }
          }
        }
      splash_provider.dart: |
        import 'package:dio/dio.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/data/shared_prefs_service.dart';

        class SplashProvider extends ChangeNotifier {
          bool _isLoading = false;
          bool _isReady = false;
          bool _isActive = false;
          bool _hasProfile = false;
          bool _validAuthorizationToken = false;
          bool _isSuccess = false;
          String? _errorMessage;
          List<dynamic> _codeOptions = [];
          List<dynamic> get codeOptions => _codeOptions;
          bool get isLoading => _isLoading;
          bool get isReady => _isReady;
          bool get isActive => _isActive;
          bool get hasProfile => _hasProfile;
          bool get validAuthorizationToken => _validAuthorizationToken;
          bool get isSuccess => _isSuccess;
          String? get errorMessage => _errorMessage;
          Future<String?> getUserEmail() async {
            return await SharedPrefsService.getString('email');
          }
          void _setLoadingState(bool isLoading) {

            _isLoading = isLoading;
            notifyListeners();
          }
          Future<bool> verifyAccount() async {
            _setLoadingState(true);
            String? userEmail = await getUserEmail();
            if (userEmail == null) {

              return _setErrorState("Email n√£o encontrado.");
            }
            try {
              final response = await DioClientService.dio.post(
                '/users/active_account.json',
                data: {"email": userEmail},
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                bool isActive = response.data['active'];
                _codeOptions = response.data['code_options'];
                String? token = response.headers['authorization']?.first.split('Bearer ').last;
                if (token != null) {

                  await SharedPrefsService.setString("authorization", token);
                }
                await SharedPrefsService.setBool("userAccountActive", isActive);
                return _setSuccessState(isActive);
              } else {
                return _setErrorState("Erro ao verificar c√≥digo.");
              }
            } catch (e) {
              return _setErrorState("Erro inesperado: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          Future<bool> checkUserAuthorization() async {
            _setLoadingState(true);
            try {
              final response = await DioClientService.dio.post(
                '/validate_token',
                options: Options(headers: {'Content-Type': 'application/json'}),
              );
              if (response.statusCode == 200) {

                _validAuthorizationToken = true;
                _setSuccessState(_validAuthorizationToken);
                return true;
              } else {
                return _setErrorState("Erro ao validar seu acesso, realize Login com sua conta novamente.");
              }
            } catch (e) {
              return _setErrorState("Erro inesperado ao verificar User authorization: $e");
            } finally {
              _setLoadingState(false);
            }
          }
          bool _setSuccessState(bool value) {

            _isSuccess = value;
            _errorMessage = null;
            notifyListeners();
            return value;
          }
          bool _setErrorState(String error) {

            _isSuccess = false;
            _errorMessage = error;
            notifyListeners();
            return false;
          }
        }
    sections/:
      components/:
        about_me_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter_svg/svg.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/close_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_image_widget.dart';
          import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class AboutMeComponent extends StatefulWidget {
            final Map<String, dynamic> profile;
            const AboutMeComponent({super.key, required this.profile});
            @override
            _AboutMeComponentState createState() => _AboutMeComponentState();
          }
          class _AboutMeComponentState extends State<AboutMeComponent>
              with SingleTickerProviderStateMixin {
            final verificationItems = {
              "Age": {
                "image": 'assets/images/theme/default-icon/verify.png',
                "active": true,
              }, "Address": {
                "image": 'assets/images/theme/default-icon/verify.png',
                "active": false,
              }, "Payment": {
                "image": 'assets/images/theme/default-icon/verify.png',
                "active": true,
              }, "Identity": {
                "image": 'assets/images/theme/default-icon/verify.png',
                "active": true,
              },
            };
            late TabController _tabController;
            bool _isDescriptionVisible = false;
            final TextEditingController _descriptionController = TextEditingController();
            static const double _toolbarHeight = 100;
            static const double _logoHeight = 24;
            final ScrollController _scrollController = ScrollController();
            bool _showScrollUpButton = false;
            Widget _buildHeader(BuildContext context) {

              return Padding(
                  padding: EdgeInsets.only(left: 16, right: 0),
                  child: Row(
                    mainAxisSize: MainAxisSize.max,
                    children: [
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Image.asset('assets/images/theme/default-icon/about_me_unverified.png', width: 22, height: 22),
                          const SizedBox(width: 16),
                          UIHelper.buildText(context, 'About Me',
                              style: AppTextStylesWidget.headerViewUp, color: Color(0xFF741952))
                        ],
                      ),
                      const Spacer(),
                      Padding(padding: EdgeInsets.all(16), child: CloseButtonWidget())
                    ],
                  ));
            }
            Widget buildImageLabelTile({
              required Widget image,
              required String value,
              required String label,
              VoidCallback? onTap,
            }) {
              return InkWell(
                onTap: onTap,
                borderRadius: BorderRadius.circular(8),
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          image,
                          const SizedBox(width: 8),
                          Text(
                            value,
                            style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        label,
                        style: const TextStyle(fontSize: 14, color: Colors.grey),
                      ),
                    ],
                  ),
                ),
              );
            }
            Widget _buildHistoryItem(String entry) {

              return Padding(
                padding: const EdgeInsets.only(top: 8, bottom: 8, left: 32),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    GenericImageWidget(imagePath: 'assets/images/theme/default-icon/calendar.png',
                        width: 22, height: 22),
                    SizedBox(width: 10),
                    Text(
                      entry,
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                )
              );
            }
            Widget _buildVerificationsRow(Map<String, Map<String, dynamic>> items) {

              return Wrap(
                spacing: 8, runSpacing: 4,
                children: items.entries.map((entry) {
                  final String label = entry.key;
                  final String imagePath = entry.value['image'] as String;
                  final bool isActive = entry.value['active'] as bool;
                  return _buildVerificationTag(label, imagePath, isActive);
                }).toList(),
              );
            }
            Widget _buildVerificationTag(String label, String imagePath, bool isActive) {

              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Container(
                      child: Image.asset(
                        imagePath,
                        width: 22,
                        height: 22,
                        color: isActive ? Colors.black : Colors.grey,
                      ),
                    ),
                  ],
                ),
              );
            }
            Widget buildTag(String label, {String icon = 'üîπ'}) {

              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(icon, style: const TextStyle(fontSize: 14)),
                    const SizedBox(width: 4),
                    Text(
                      label,
                      style: const TextStyle(
                        fontSize: 14,
                        color: Colors.black87,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              );
            }
            Widget buildHistoryList(List<String> historyItems) {

              return SizedBox(
                height: 200,
                child: ListView.builder(
                  itemCount: historyItems.length,
                  itemBuilder: (context, index) {
                    return _buildHistoryItem(historyItems[index]);
                  },
                ),
              );
            }
            Widget _buildTab(BuildContext context, String text, Image image) {

              return Tab(
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    image,
                    const SizedBox(width: 8),
                    UIHelper.buildText(
                      context, text,
                      style: AppTextStylesWidget.body,
                      weight: FontWeight.w300,
                      color: Colors.black,
                    ),
                  ],
                ),
              );
            }
            @override
            void dispose() {

              _tabController.dispose();
              _descriptionController.dispose();
              super.dispose();
            }
            @override
            void initState() {

              super.initState();
              _tabController = TabController(length: 3, vsync: this);
            }
            Widget buildToggleableDescriptionSection() {

              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      UIHelper.buildText(
                        context,
                        _isDescriptionVisible ? 'ocultar bio' : 'exibir bio',
                        style: AppTextStylesWidget.body,
                        color: UIHelper.blackBlueColor,
                      ),
                      SizedBox(width: 10),
                      IconButton(
                        icon: Icon(
                          _isDescriptionVisible ? Icons.visibility_off : Icons.visibility,
                          color: UIHelper.blackBlueColor,
                        ),
                        onPressed: () {
                          setState(() => _isDescriptionVisible = !_isDescriptionVisible);
                        },
                      ),
                    ],
                  ),
                  if (_isDescriptionVisible) ...[
                    UIHelper.buildTextArea(
                      minLines: 4,
                      maxLines: 7,
                      controller: _descriptionController,
                      fontSize: UIHelper.getFontSize(
                        simulatorIOSSize: 14,
                        simulatorAndroidSize: 14,
                        deviceIOSSize: 17,
                        deviceAndroidSize: 14,
                      ),
                      label: "Legenda",
                      hint: "Enter your text here ...",
                      minLength: 1,
                      maxLength: 200,
                      fontWeight: FontWeight.normal,
                      textColor: Colors.black,
                      onChanged: (_) {},
                    ),
                    SizedBox(height: 16)
                  ],
                ],
              );
            }
            String _getLocationLabel(String? location) {

              if (location == null || location.isEmpty) return 'Localiza√ß√£o n√£o definida';
              final parts = location.split(',');
              return parts.length > 1 ? parts[1].trim() : location;
            }
            AppBar _buildAppBar(BuildContext context) {

              /*[:memory] final balance = context.watch<RewardProvider>().balance;*/
              return AppBar(
                automaticallyImplyLeading: false,
                toolbarHeight: _toolbarHeight,
                backgroundColor: Colors.white,
                elevation: 0,
                leading: Padding(
                    padding: EdgeInsets.only(top: 36, left: 16),
                    child: SvgPicture.asset(
                      'assets/images/theme/default-icon/xiis.svg',
                      height: _logoHeight,
                    )),
                title: UIHelper.buildText(context, '',
                    style: AppTextStylesWidget.headerViewUp,
                    color: UIHelper.blackBlueColor),
                actions: [
                  Padding(padding: EdgeInsets.only(top: 56, right: 16), child: CloseButtonWidget())
                  /*[:memory] Padding(
                      padding: EdgeInsets.only(top: 36, right: 16),
                      child: Builder(
                        builder: (context) => IconButton(
                          icon: const Icon(Icons.menu, color: Colors.white, size: 22),
                          style: ButtonStyle(
                            backgroundColor: MaterialStateProperty.all(Colors.black),
                            shape: MaterialStateProperty.all(
                              RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12)),
                            ),
                          ),
                          tooltip: 'Abrir menu',
                          onPressed: () {
                            Scaffold.of(context).openEndDrawer();
                          },
                        ),
                      ))*/
                ],
              );
            }
            void _scrollToTop() {

              _scrollController.animateTo(
                0,
                duration: const Duration(milliseconds: 500),
                curve: Curves.easeInOut,
              );
            }
            @override
            Widget build(BuildContext context) {

              final profile = widget.profile;
              final String imagePath = profile['avatar_url'] ?? '';
              final String fullImageUrl = "${DioClientService.baseUrl}$imagePath";
              final bool hasRemoteImage = imagePath.isNotEmpty;
              final ImageProvider imageProvider = (hasRemoteImage
                  ? NetworkImage(fullImageUrl)
                  : const AssetImage('assets/images/default_profile.png'));
              return Scaffold(
                appBar: _buildAppBar(context),
                backgroundColor: Colors.white,
                body: SafeArea(
                  child: LayoutBuilder(
                    builder: (context, constraints) {
                      return SingleChildScrollView(
                        controller: _scrollController,
                        padding: const EdgeInsets.symmetric(vertical: 0),
                        child: ConstrainedBox(
                          constraints: BoxConstraints(minHeight: constraints.maxHeight),
                          child: IntrinsicHeight(
                            child: Column(
                              children: [
                                Padding(
                                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                                  child: Row(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Container(
                                        padding: const EdgeInsets.all(8),
                                        decoration: BoxDecoration(
                                          color: Colors.white,
                                          border:
                                          Border.all(color: Colors.grey, width: 1),
                                          borderRadius: const BorderRadius.only(
                                            topLeft: Radius.circular(8),
                                            topRight: Radius.circular(75),
                                            bottomLeft: Radius.circular(75),
                                            bottomRight: Radius.circular(75),
                                          ),
                                        ),
                                        child: CircleAvatar(
                                          radius: 65,
                                          backgroundColor: Colors.grey[300],
                                          backgroundImage: (imageProvider != null)
                                              ? imageProvider : null,
                                          child: (imageProvider == null)
                                              ? const Icon(Icons.person,
                                              size: 32, color: Colors.white)
                                              : null,
                                        ),
                                      ),
                                      const SizedBox(width: 16),
                                      Expanded(
                                        child: Column(
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            UIHelper.buildText(context, profile['name'],
                                                style: AppTextStylesWidget.profileName,
                                                color: Colors.black,
                                                weight: FontWeight.bold),
                                            TextButton.icon(
                                              onPressed: () {},
                                              icon: const Icon(Icons.location_on, color: Colors.blueGrey, size: 18),
                                              label: UIHelper.buildText(
                                                context,
                                                _getLocationLabel(profile['location']),
                                                style: AppTextStylesWidget.headerViewUp,
                                                color: UIHelper.blackBlueColor,
                                              ),
                                            ),
                                            UIHelper.buildText(context, profile['short_bio']??'',
                                                style: AppTextStylesWidget.profileName,
                                                color: Colors.black,
                                                weight: FontWeight.bold),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                SizedBox(height: 16),
                                Expanded(
                                  child: SizedBox(
                                    height: 500,
                                    child: PillTabBar(
                                      tabs: [
                                        {
                                          "iconPath": 'assets/images/theme/default-icon/colored_share.png',
                                          "label": 'Shared Content'
                                        },
                                        {
                                          "iconPath": 'assets/images/theme/default-icon/colored_share.png',
                                          "label": 'My Network'
                                        },
                                      ],
                                      children: const [
                                        Text(''),
                                        Text('')
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
                floatingActionButton: _showScrollUpButton
                    ? FloatingActionButton(
                        mini: true,
                        backgroundColor: UIHelper.backgroundColor,
                        onPressed: _scrollToTop,
                        child: const Icon(Icons.arrow_upward),
                      )
                    : null,
              );
            }
          }
          class _StatItem extends StatelessWidget {
            final String label;
            final String value;
            const _StatItem({required this.label, required this.value});
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  Text(value,
                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 4),
                  Text(label, style: const TextStyle(color: Colors.grey)),
                ],
              );
            }
          }
          class _ActivityItem extends StatelessWidget {
            final String title;
            final String subtitle;
            final String time;
            final bool highlight;
            const _ActivityItem({
              required this.title,
              required this.subtitle,
              required this.time,
              this.highlight = false,
            });
            @override
            Widget build(BuildContext context) {

              return Row(
                children: [
                  const Icon(Icons.fiber_manual_record, size: 12, color: Colors.orange),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(title,
                            style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: highlight ? Colors.orange : Colors.black)),
                        Text(subtitle, style: const TextStyle(color: Colors.grey)),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color:
                          highlight ? Colors.orange.withOpacity(0.2) : Colors.transparent,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(time,
                        style:
                            TextStyle(color: highlight ? Colors.orange : Colors.black)),
                  ),
                ],
              );
            }
          }
        coin_counter_action_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:provider/provider.dart';
          import 'package:vibration/vibration.dart';
          import 'package:xiis/presentation/providers/content_provider.dart';
          import 'package:xiis/presentation/providers/entrance_provider.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          import 'color.dart' as Colors;

          class CoinCounterActionComponent extends StatefulWidget {
            final Map<String, dynamic> content;
            final bool hasTipped;
            final void Function()? onSuccess;
            const CoinCounterActionComponent({
              super.key,
              required this.content,
              this.onSuccess,
              required this.hasTipped,
            });

            @override
            State<CoinCounterActionComponent> createState() => _CoinCounterActionComponentState();
          }
          class _CoinCounterActionComponentState extends State<CoinCounterActionComponent>
              with TickerProviderStateMixin {
            late double _coinCount;
            late int _contentId;
            late EntranceProvider entranceProvider;
            bool _showTooltip = false;
            bool _hasTipped = false;
            bool _isPressed = false;
            bool _isSending = false;
            late DateTime _pressStartTime;
            late final AnimationController _tooltipController;
            late final AnimationController _pressController;
            late final Animation<Offset> _slideAnimation;
            late final Animation<double> _fadeAnimation;
            late final Animation<double> _scaleAnimation;

            @override
            void initState() {

              super.initState();
              entranceProvider = Provider.of<EntranceProvider>(context, listen: false);
              _coinCount = (widget.content['settings']?['tip_owner'] ?? 0.0).toDouble();
              _contentId = widget.content['id'];
              _tooltipController = AnimationController(
                vsync: this,
                duration: const Duration(milliseconds: 300),
              );
              _pressController = AnimationController(
                vsync: this,
                duration: const Duration(milliseconds: 300),
              );
              _slideAnimation = Tween<Offset>(
                begin: const Offset(0, 0),
                end: const Offset(0, -0.8),
              ).animate(CurvedAnimation(
                parent: _tooltipController,
                curve: Curves.easeOut,
              ));
              _fadeAnimation = Tween<double>(
                begin: 1.0,
                end: 0.0,
              ).animate(CurvedAnimation(
                parent: _tooltipController,
                curve: Curves.easeOut,
              ));
              _scaleAnimation = Tween<double>(
                begin: 1.0,
                end: 1.2,
              ).animate(CurvedAnimation(
                parent: _pressController,
                curve: Curves.easeInOut,
              ));
            }
            void updateBalance(double newBalance) {

              entranceProvider.profile['my_wallet']['balance'] = newBalance;
              entranceProvider.notifyListeners();
            }
            @override
            void dispose() {

              _tooltipController.dispose();
              _pressController.dispose();
              super.dispose();
            }
            Future<void> _incrementCoin() async {
              setState(() {

                _coinCount++;
                _showTooltip = true;
              });
              final contentProvider = context.read<ContentProvider>();
              await contentProvider.postTipOwner(1.0, _contentId);
              if (contentProvider.isSuccess) {

                entranceProvider.profile['my_wallet']['balance'] = contentProvider.newBalance;
                entranceProvider.notifyListeners();
                widget.onSuccess?.call();
              }
              _tooltipController.forward(from: 0).then((_) {
                if (mounted) setState(() => _showTooltip = false);
              });
            }
            Future<void> _sendCoinRequest() async {
              try {
                Vibration.vibrate(duration: 50, amplitude: 255);
              } catch (e) {
                debugPrint('Erro ao enviar /profile/coins: $e');
              }
            }
            void _onTapDown(TapDownDetails details) {

              setState(() {

                _isPressed = true;
                _pressStartTime = DateTime.now();
              });
              _pressController.forward().whenComplete(() async {
                if (_isPressed && !_isSending) {

                  _isSending = true;
                  await _incrementCoin();
                  await _sendCoinRequest();
                  _isSending = false;
                }
              });
            }
            void _onTapUp(TapUpDetails details) {

              setState(() => _isPressed = false);
              _pressController.reset();
            }
            void _onTapCancel() {

              setState(() => _isPressed = false);
              _pressController.reset();
            }
            List<Widget> _buildSplashCoins() {

              final List<Offset> directions = [
                const Offset(-1.0, -2.0),
                const Offset(0.0, -2.5),
                const Offset(1.0, -2.0),
              ];
              return List.generate(directions.length, (index) {
                return Positioned(
                  top: -20,
                  right: 10,
                  child: SlideTransition(
                    position: Tween<Offset>(
                      begin: Offset.zero,
                      end: directions[index],
                    ).animate(CurvedAnimation(parent: _tooltipController, curve: Curves.easeOutCubic)),
                    child: FadeTransition(
                      opacity: _fadeAnimation,
                      child: Image.asset(
                        'assets/images/theme/default-icon/coin.png',
                        width: 18,
                        height: 18,
                      ),
                    ),
                  ),
                );
              });
            }
            @override
            Widget build(BuildContext context) {

              return Stack(
                clipBehavior: Clip.none,
                children: [
                  GestureDetector(
                    onTapDown: _onTapDown,
                    onTapUp: _onTapUp,
                    onTapCancel: _onTapCancel,
                    child: ScaleTransition(
                      scale: _scaleAnimation,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            TweenAnimationBuilder<double>(
                              tween: Tween<double>(begin: 0, end: _coinCount),
                              duration: const Duration(milliseconds: 300),
                              builder: (context, value, _) {
                                return Text(
                                  value.toStringAsFixed(0),
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 16,
                                    fontWeight: FontWeight.bold,
                                    shadows: [
                                      Shadow(offset: Offset(0.5, 0.5), color: UIHelper.blackBlueColor, blurRadius: 0.5),
                                      Shadow(offset: Offset(-0.5, -0.5), color: UIHelper.blackBlueColor, blurRadius: 0.5),
                                    ],
                                  ),
                                );
                              },
                            ),
                            const SizedBox(width: 8),
                            Image.asset(
                              'assets/images/theme/default-icon/coin.png',
                              width: 32,
                              height: 32,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  if (_showTooltip)
                    ..._buildSplashCoins(),
                ],
              );
            }
          }
        color.dart: |
          import 'dart:ui';

          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          const Color black = UIHelper.black37BlueColor;
          const Color white = UIHelper.accentColor;
          const Color bgColor = UIHelper.backgroundColor;
          const Color selectColor = UIHelper.blackBlueColor;
        content_album_gallery_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_image_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentAlbumGalleryComponent extends StatelessWidget {
            final Map<String, dynamic> body;
            const ContentAlbumGalleryComponent({
              super.key,
              required this.body,
            });
            @override
            Widget build(BuildContext context) {

              final String userName = body['userName'] ?? 'Unknown User - gallery';
              final String comment = body['comment'] ?? 'No Comment';
              final String dateTime = body['dateTime'] ?? 'Unknown Date';
              final List<Map<String, dynamic>> profiles = List<Map<String, dynamic>>.from(body['profiles'] ?? []);
              final List<String> albumImages = List<String>.from(body['settings']['body']['albumImages'] ?? []);
              return Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            GenericImageWidget(imagePath: 'assets/images/theme/default-icon/comment.png',
                            width: 22, height: 22),
                            const SizedBox(width: 8),
                            UIHelper.buildText(
                              context,
                              userName,
                              style: AppTextStylesWidget.body,
                              color: Colors.black,
                              weight: FontWeight.w600,
                            ),
                            UIHelper.buildText(
                              context,
                              ', - ${body['id']} - $comment',
                              style: AppTextStylesWidget.body,
                              color: Colors.black54,
                              weight: FontWeight.w500,
                            ),
                          ],
                        ),
                        UIHelper.buildText(
                          context,
                          dateTime,
                          style: AppTextStylesWidget.body,
                          color: Colors.black,
                          weight: FontWeight.w600,
                        ),
                      ],
                    ),
                  ),
                  SizedBox(
                    height: 155,
                    child: ListView.builder(
                      scrollDirection: Axis.horizontal,
                      itemCount: albumImages.length,
                      itemBuilder: (context, index) {
                        if (index >= profiles.length) {

                          return const SizedBox.shrink();
                        }
                        final profile = profiles[index];
                        final String name = profile['name'] ?? 'Unknown';
                        final bool isLive = profile['isLive'] ?? false;
                        final String imageUrl = albumImages[index].isNotEmpty
                            ? albumImages[index]
                            : 'https:';
                        return Padding(
                          padding: const EdgeInsets.only(left: 16),
                          child: Column(
                            children: [
                              Stack(
                                alignment: Alignment.topRight,
                                children: [
                                  Container(
                                    decoration: BoxDecoration(
                                      shape: BoxShape.circle,
                                      border: Border.all(
                                        color: isLive ? Colors.pink : Colors.transparent,
                                        width: isLive ? 1 : 0,
                                      ),
                                    ),
                                    child: CircleAvatar(
                                      radius: 48,
                                      backgroundImage: NetworkImage(imageUrl),
                                      onBackgroundImageError: (_, __) {
                                      },
                                    ),
                                  ),
                                  if (isLive)
                                    Positioned(
                                      top: 4,
                                      right: 4,
                                      child: Container(
                                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                                        decoration: BoxDecoration(
                                          color: Colors.pink,
                                          borderRadius: BorderRadius.circular(4),
                                        ),
                                        child: UIHelper.buildText(
                                          context,
                                          'Live',
                                          style: AppTextStylesWidget.body,
                                          color: Colors.white,
                                          weight: FontWeight.w500,
                                        ),
                                      ),
                                    ),
                                ],
                              ),
                              const SizedBox(height: 6),
                              SizedBox(
                                width: 96,
                                child: Align(
                                  alignment: Alignment.center,
                                  child: UIHelper.buildText(
                                    context,
                                    name,
                                    style: AppTextStylesWidget.body,
                                    color: const Color(0xFF741952),
                                    maxLines: 2,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              );
            }
          }
        content_album_promotion_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_image_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentAlbumPromotionComponent extends StatelessWidget {
            final Map<String, dynamic> body;
            const ContentAlbumPromotionComponent({
              Key? key,
              required this.body,
            }) : super(key: key);
            @override
            Widget build(BuildContext context) {

              final String featuredImage = body['featuredImage'] ??
                  'assets/images/theme/development-image/mocked_image_03.png';
              final String title = body['title'] ?? 'Untitled';
              final String description = body['description'] ?? '';
              final String viewers = body['viewers'] ?? '0';
              final String followers = body['followers'] ?? '0';
              final List<String> tags = List<String>.from(body['tags'] ?? []);
              final List<String> albumImages =
                  List<String>.from(body['albumImages'] ?? []);
              final String userName = body['userName'] ?? 'Unknown User - promotion';
              final String comment = body['comment'] ?? 'No Comment';
              final String dateTime = body['dateTime'] ?? 'Unknown Date';
              return Column(
                children: [
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.all(0),
                    decoration: BoxDecoration(
                      color: Color(0xCCF8F7F7),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Padding(
                            padding: EdgeInsets.only(bottom: 16, right: 16, left: 16),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Row(
                                    children: [
                                      GenericImageWidget(
                                          imagePath: 'assets/images/theme/default-icon/comment.png',
                                        width: 22, height: 22,
                                      ),
                                      SizedBox(width: 8),
                                      UIHelper.buildText(
                                        context,
                                        'Whereck Dude',
                                        style: AppTextStylesWidget.body,
                                        color: Colors.black,
                                        weight: FontWeight.w600,
                                      ),
                                      UIHelper.buildText(
                                        context,
                                        ', - ${body['id']} -  $comment',
                                        style: AppTextStylesWidget.body,
                                        color: Colors.black54,
                                        weight: FontWeight.w500,
                                      ),
                                    ],
                                  ),
                                  UIHelper.buildText(
                                    context,
                                    '20/02 √†s 23:45:23',
                                    style: AppTextStylesWidget.body,
                                    color: Colors.black,
                                    weight: FontWeight.w600,
                                  )
                                ])),
                        Padding(
                            padding: EdgeInsets.only(bottom: 16, right: 16, left: 16),
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(8),
                                  child: Image.network(
                                    featuredImage,
                                    width: 90, height: 90,
                                    fit: BoxFit.cover,
                                    loadingBuilder: (context, child, loadingProgress) {
                                      if (loadingProgress == null) return child;
                                      return SizedBox(
                                        width: 90, height: 90,
                                        child: Center(
                                          child: CircularProgressIndicator(
                                            value: loadingProgress.expectedTotalBytes !=
                                                    null
                                                ? loadingProgress.cumulativeBytesLoaded /
                                                    (loadingProgress.expectedTotalBytes ??
                                                        1)
                                                : null,
                                          ),
                                        ),
                                      );
                                    },
                                    errorBuilder: (context, error, stackTrace) {
                                      return Container(
                                        width: 90,
                                        height: 90,
                                        color: Colors.grey[300],
                                        child: const Icon(Icons.broken_image,
                                            color: Colors.grey, size: 50),
                                      );
                                    },
                                  ),
                                ),
                                const SizedBox(width: 16),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      UIHelper.buildText(context, title,
                                          style: AppTextStylesWidget.body, color: Colors.black),
                                      const SizedBox(height: 6),
                                      UIHelper.buildText(context, description,
                                          style: AppTextStylesWidget.body,
                                          maxLines: 2,
                                          color: Colors.black),
                                      const SizedBox(height: 8),
                                      Row(
                                        children: [
                                          UIHelper.buildText(context, "$viewers Viewers",
                                              style: AppTextStylesWidget.body,
                                              color: Colors.black),
                                          const SizedBox(width: 16),
                                          UIHelper.buildText(
                                              context, "$followers Followers",
                                              style: AppTextStylesWidget.body,
                                              color: Colors.black),
                                        ],
                                      ),
                                      const SizedBox(height: 16),
                                      Wrap(
                                        spacing: 8,
                                        children: tags
                                            .map(
                                              (tag) => Container(
                                                padding: const EdgeInsets.symmetric(
                                                    horizontal: 16, vertical: 8),
                                                decoration: BoxDecoration(
                                                  color: tag.contains("Esports")
                                                      ? Colors.blue.shade100
                                                      : Colors.pink.shade100,
                                                  borderRadius: BorderRadius.circular(8),
                                                ),
                                                child: UIHelper.buildText(
                                                    context,
                                                    weight: FontWeight.w500,
                                                    tag,
                                                    style: AppTextStylesWidget.small,
                                                    color: Colors.black),
                                              ),
                                            )
                                            .toList(),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            )),
                        SizedBox(
                          height: 90,
                          child: ListView.builder(
                            scrollDirection: Axis.horizontal,
                            itemCount: 10,
                            itemBuilder: (context, index) {
                              return Padding(
                                padding: const EdgeInsets.only(left: 16),
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(8),
                                  child: Image.network(
                                    featuredImage,
                                    width: 90,
                                    height: 90,
                                    fit: BoxFit.cover,
                                    loadingBuilder: (context, child, loadingProgress) {
                                      if (loadingProgress == null) return child;
                                      return SizedBox(
                                        width: 90,
                                        height: 90,
                                        child: Center(
                                          child: CircularProgressIndicator(
                                            value: loadingProgress.expectedTotalBytes != null
                                                ? loadingProgress.cumulativeBytesLoaded /
                                                (loadingProgress.expectedTotalBytes ?? 1)
                                                : null,
                                          ),
                                        ),
                                      );
                                    },
                                    errorBuilder: (context, error, stackTrace) {
                                      return Container(
                                        width: 90,
                                        height: 90,
                                        color: Colors.grey[300],
                                        child: const Icon(Icons.broken_image, color: Colors.grey, size: 50),
                                      );
                                    },
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                ],
              );
            }
          }
        content_auction_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/components/show_auction_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentAuctionComponent extends StatelessWidget {
            final Map<String, dynamic> body;
            const ContentAuctionComponent({
              Key? key,
              required this.body,
            }) : super(key: key);
            @override
            Widget build(BuildContext context) {

              final int auctionId = body['id'] ?? 0;
              final String userName = body['userName'] ?? 'Unknown User - auction';
              final String dateTime = body['created_at'] ?? 'Unknown Date';
              final String auctionImage = body['image'] ?? 'assets/images/theme/development-image/mocked_image_08.png';
              final String comment = body['comment'] ?? 'No Comment';
              return Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            Image.asset(
                              'assets/images/theme/default-icon/comment.png',
                              width: 22,
                              height: 22,
                            ),
                            const SizedBox(width: 8),
                            UIHelper.buildText(
                              context,
                              userName,
                              style: AppTextStylesWidget.body,
                              color: UIHelper.blackBlueColor,
                              weight: FontWeight.w600,
                            ),
                            UIHelper.buildText(
                              context,
                              ' #$auctionId',
                              style: AppTextStylesWidget.body,
                              color: UIHelper.blackBlueColor,
                              weight: FontWeight.w500,
                            ),
                          ],
                        ),
                        UIHelper.buildText(
                          context,
                          '',
                          style: AppTextStylesWidget.body,
                          color: UIHelper.blackBlueColor,
                          weight: FontWeight.w600,
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 0),
                    child: GestureDetector(
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ShowAuctionComponent(id: auctionId),
                        ),
                      ),
                      child: LayoutBuilder(
                        builder: (context, constraints) {
                          double size = constraints.maxWidth;
                          return Container(
                            width: size,
                            height: size,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(0),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey.withOpacity(0.2),
                                  spreadRadius: 1,
                                  blurRadius: 0,
                                ),
                              ],
                            ),
                            child: Stack(
                              children: [
                                _buildAuctionImageContent(size, auctionImage),
                              ],
                            ),
                          );
                        },
                      ),
                    ),
                  ),
                  SizedBox(height: 16),
                  /*[:memory] AuctionActionComponent(),*/
                ],
              );
            }
            Widget _buildAuctionImageContent(double size, String imagePath) {

              return Positioned.fill(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(0),
                  child: Image.network(
                    imagePath,
                    fit: BoxFit.cover,
                    loadingBuilder: (context, child, loadingProgress) {
                      if (loadingProgress == null) return child;
                      return Center(
                        child: CircularProgressIndicator(
                          value: loadingProgress.expectedTotalBytes != null
                              ? loadingProgress.cumulativeBytesLoaded /
                              (loadingProgress.expectedTotalBytes ?? 1)
                              : null,
                        ),
                      );
                    },
                    errorBuilder: (context, error, stackTrace) {
                      return const Center(
                        child: Icon(Icons.broken_image, color: Colors.grey, size: 50),
                      );
                    },
                  ),
                ),
              );
            }
            Widget _buildAuctionActions() {

              return Positioned(
                bottom: 8,
                right: 8,
                child: IconButton(
                  icon: const Icon(Icons.favorite_border, color: Colors.white),
                  onPressed: () {
                  },
                ),
              );
            }
          }
        content_component.dart: |
          class ContentComponent extends StatefulWidget {
            @override
            _ContentComponentState createState() => _ContentComponentState();
          }
          class _ContentComponentState extends State<ContentComponent> {
            final _descriptionController = TextEditingController();
            final _bidStartController = TextEditingController();
            final _durationController = TextEditingController();
            List<File> _photos = [];
            File? _coverPhoto;
            int _rating = 0;
            bool _isFreeCard = true;
            bool isLoading = false;
            bool isAuctionStarted = false;
            int countdownTime = 10;
            Timer? countdownTimer;
            Future<void> _addPhoto() async {
              if (_isFreeCard && _photos.length >= 1) {

                return;
              } else if (!_isFreeCard && _photos.length >= 10) {
                return;
              }
              final picker = ImagePicker();
              final pickedFile = await picker.pickImage(source: ImageSource.gallery);
              if (pickedFile != null) {

                setState(() {

                  _photos.add(File(pickedFile.path));
                });
              }
            }
            void _setRating(int value) {

              setState(() {

                _rating = value;
              });
            }
            void _setCoverPhoto(File photo) {

              setState(() {

                _coverPhoto = photo;
              });
            }
            void startLoading() {

              setState(() {

                isLoading = true;
              });
              Timer(Duration(seconds: 3), () {

                setState(() {

                  isLoading = false;
                  isAuctionStarted = true;
                });
              });
            }
            void startAuction() {

              setState(() {

                countdownTimer = Timer.periodic(Duration(seconds: 1), (timer) {
                  setState(() {

                    if (countdownTime > 0) {

                      countdownTime--;
                    } else {
                      timer.cancel();
                    }
                  });
                });
              });
            }
            @override
            void dispose() {

              _descriptionController.dispose();
              _bidStartController.dispose();
              _durationController.dispose();
              countdownTimer?.cancel();
              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return Padding(
                padding: const EdgeInsets.only(left: 16, top: 50, right: 16, bottom: 30),
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Row(
                            children: [
                              const Icon(Icons.new_label_outlined),
                              const SizedBox(width: 15),
                              const Text(
                                'Nova Publica√ß√£o',
                                style: TextStyle(
                                  color: Colors.black, fontSize: 20, fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              IconButton(
                                constraints: const BoxConstraints(),
                                padding: EdgeInsets.zero,
                                icon: const Icon(Icons.close),
                                onPressed: () {
                                  Navigator.of(context).pop();
                                },
                              ),
                            ],
                          )
                        ],
                      ),
                      const SizedBox(height: 16),
                      _coverPhoto != null
                          ? ClipRRect(
                        borderRadius: BorderRadius.circular(16),
                        child: Image.file(
                          _coverPhoto!,
                          height: 300,
                          width: double.infinity,
                          fit: BoxFit.cover,
                        ),
                      )
                          : ClipRRect(
                        borderRadius: BorderRadius.circular(16),
                        child: Image.asset(
                          'assets/images/no-image.png',
                          height: 300,
                          width: double.infinity,
                          fit: BoxFit.cover,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          const Text('Free Card'),
                          Switch(
                            value: _isFreeCard,
                            onChanged: (value) {
                              setState(() {

                                _isFreeCard = value;
                                _photos.clear();
                              });
                            },
                          ),
                          const Text('Pay Post'),
                        ],
                      ),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Adicionar fotos',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 16),
                      SizedBox(
                        height: 100,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: _photos.length + 1,
                          itemBuilder: (context, index) {
                            if (index < _photos.length) {

                              return GestureDetector(
                                onTap: () => _setCoverPhoto(_photos[index]),
                                child: Padding(
                                  padding: const EdgeInsets.only(right: 8.0),
                                  child: Stack(
                                    alignment: Alignment.topRight,
                                    children: [
                                      ClipRRect(
                                        borderRadius: BorderRadius.circular(8),
                                        child: Image.file(
                                          _photos[index],
                                          width: 100,
                                          height: 100,
                                          fit: BoxFit.cover,
                                        ),
                                      ),
                                      if (_photos[index] == _coverPhoto)
                                        const Icon(
                                          Icons.check_circle,
                                          color: Colors.green,
                                        ),
                                    ],
                                  ),
                                ),
                              );
                            } else {
                              return GestureDetector(
                                onTap: _addPhoto,
                                child: Container(
                                  width: 100,
                                  height: 100,
                                  decoration: BoxDecoration(
                                    color: Colors.grey[200],
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: const Icon(Icons.camera_alt, color: Colors.grey),
                                ),
                              );
                            }
                          },
                        ),
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Descri√ß√£o (m√°x 250 caracters)',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _descriptionController,
                        decoration: InputDecoration(
                          hintText: 'Add item description here',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        maxLines: 3,
                        onChanged: (value) {
                          setState(() {});
                        },
                      ),
                      const SizedBox(height: 10),
                      Align(
                        alignment: Alignment.centerRight,
                        child: Text(
                          '${_descriptionController.text.length}/200',
                          style: TextStyle(color: Colors.grey, fontSize: 12),
                        ),
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Adicione TAG\'s de busca (m√°x 15)',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Classifica√ß√£o',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: List.generate(5, (index) {
                          return IconButton(
                            icon: Icon(
                              Icons.star,
                              color: index < _rating ? Colors.orange : Colors.grey,
                            ),
                            onPressed: () => _setRating(index + 1),
                          );
                        }),
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Lances come√ßam em (valor min)',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          Expanded(
                            child: RichText(
                              textAlign: TextAlign.left,
                              text: TextSpan(
                                style: TextStyle(height: 1.5),
                                children: <TextSpan>[
                                  TextSpan(text: 'm√≠nimo 10 Xii\$', style: TextStyle(fontSize: 16, color: Colors.black, fontWeight: FontWeight.w500)),
                                  TextSpan(text: '\nrecebe R\$7,00', style: TextStyle(fontSize: 16, color: Colors.blueGrey)),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: TextField(
                              decoration: InputDecoration(
                                hintText: 'add Xii\$',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Dura√ß√£o (min. 1hr, m√°x. 24hrs)',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          Expanded(
                            child: RichText(
                              textAlign: TextAlign.left,
                              text: TextSpan(
                                style: TextStyle(height: 1.5),
                                children: <TextSpan>[
                                  TextSpan(text: 'encerra 22:45:58', style: TextStyle(fontSize: 16, color: Colors.black, fontWeight: FontWeight.w500)),
                                  TextSpan(text: '\n10/01/2025', style: TextStyle(fontSize: 16, color: Colors.blueGrey)),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: TextField(
                              decoration: InputDecoration(
                                hintText: 'add Xii\$',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 16),
                      const Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          'Encerra quando atingir',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          Expanded(
                            child: RichText(
                              textAlign: TextAlign.left,
                              text: TextSpan(
                                style: TextStyle(height: 1.5),
                                children: <TextSpan>[
                                  TextSpan(text: '10 Xii\$', style: TextStyle(fontSize: 16, color: Colors.black, fontWeight: FontWeight.w500)),
                                  TextSpan(text: '\nR\$7,00', style: TextStyle(fontSize: 16, color: Colors.blueGrey)),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: TextField(
                              decoration: InputDecoration(
                                hintText: 'add Xii\$',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Divider(),
                      const SizedBox(height: 32),
                      Consumer<AccessProvider>(
                        builder: (context, provider, child) {
                          return SubmitButton(
                            label: provider.isLoading ? "Carregando..." : "Registrar",
                            isSuccess: provider.isSuccess,
                            hasError: provider.errorMessage != null,
                            onSubmit: provider.isLoading
                                ? () async {}
                                : () async {
                              try {
                                provider.resetStatus();
                              } catch (e) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text("Erro ao registrar! ${provider.errorMessage ?? ''}"),
                                  ),
                                );
                              }
                            },
                            successWidget: provider.isSuccess
                                ? const Icon(Icons.check_circle, color: Colors.green)
                                : const SizedBox.shrink(),
                            failureWidget: provider.errorMessage != null && !provider.isSuccess
                                ? const Icon(Icons.error, color: Colors.red)
                                : const SizedBox.shrink(),
                          );
                        },
                      ),
                      const SizedBox(height: 150),
                    ],
                  ),
                ),
              );
            }
          }
        content_invoice_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:intl/intl.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/components/content_invoice_detail_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_bottom_sheet_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentInvoiceComponent extends StatefulWidget {
            final Map<String, dynamic> invoice;
            const ContentInvoiceComponent({super.key, required this.invoice});
            @override
            State<ContentInvoiceComponent> createState() => _ContentInvoiceComponentState();
          }
          class _ContentInvoiceComponentState extends State<ContentInvoiceComponent>
              with SingleTickerProviderStateMixin {
            late final TabController _tabController;
            @override
            void initState() {

              super.initState();
              _tabController = TabController(length: 1, vsync: this);
            }
            @override
            void dispose() {

              _tabController.dispose();
              super.dispose();
            }
            String formatAmount(String? amountStr) {

              if (amountStr == null) return '0.00';
              try {
                final amount = double.parse(amountStr);
                return amount.toStringAsFixed(2);
              } catch (e) {
                return '0.00';
              }
            }
            String formatDate(String? isoDate) {

              if (isoDate == null) return 'Date unavailable';
              try {
                final dateTime = DateTime.parse(isoDate);
                return DateFormat('MMM dd').format(dateTime);
              } catch (e) {
                return 'Invalid date';
              }
            }
            @override
            Widget build(BuildContext context) {

              final invoice = widget.invoice;
              final String movementType = (invoice['movement_type'] ?? 'saida').toLowerCase();
              return InkWell(
                onTap: () {
                  GenericBottomSheetWidget.show(
                    context: context,
                    title: '',
                    content: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                      child: ContentInvoiceDetailComponent(
                        invoice: invoice,
                        tabController: _tabController,
                      ),
                    ),
                  );
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: Image.network(
                          '${DioClientService.baseUrl}${invoice['content_cover_image']}',
                          width: 60,
                          height: 60,
                          fit: BoxFit.cover,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            UIHelper.buildText(
                              context,
                              color: Colors.black87,
                              'publicado em ${formatDate(invoice['content_created_at'])}',
                              style: AppTextStylesWidget.headerViewUp,
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                Row(
                                  children: [
                                    Image.asset(
                                      'assets/images/theme/default-icon/comments.png',
                                      height: 14, width: 14,
                                    ),
                                    SizedBox(width: 4),
                                    UIHelper.buildText(
                                      context,
                                      color: Colors.black87,
                                      '200',
                                      style: AppTextStylesWidget.small,
                                    ),
                                  ],
                                ),
                                SizedBox(width: 16),
                                Row(
                                  children: [
                                    Container(
                                      decoration: const BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: Color(0xFFFFD180),
                                      ),
                                      padding: const EdgeInsets.all(2),
                                      child: const Icon(
                                        Icons.attach_money,
                                        color: Colors.brown,
                                        size: 10,
                                      ),
                                    ),
                                    const SizedBox(width: 4),
                                    UIHelper.buildText(
                                      context,
                                      color: Colors.black87,
                                      '${invoice['content_rewards']}',
                                      style: AppTextStylesWidget.small,
                                    ),
                                  ],
                                ),
                              ],
                            ),
                            const SizedBox(height: 4),
                            Divider(height: 1.5)
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
        content_invoice_detail_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:intl/intl.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/components/scrollable_content_rewards_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentInvoiceDetailComponent extends StatelessWidget {
            final Map<String, dynamic> invoice;
            final TabController tabController;
            const ContentInvoiceDetailComponent({
              super.key,
              required this.invoice,
              required this.tabController,
            });
            String formatAmount(String? amountStr) {

              if (amountStr == null) return '0.00';
              try {
                final amount = double.parse(amountStr);
                return amount.toStringAsFixed(2);
              } catch (e) {
                return '0.00';
              }
            }
            String formatDate(String? isoDate) {

              if (isoDate == null) return 'Date unavailable';
              try {
                final dateTime = DateTime.parse(isoDate);
                return DateFormat('MMM dd').format(dateTime);
              } catch (e) {
                return 'Invalid date';
              }
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  Padding(padding: EdgeInsets.symmetric(
                    horizontal: 16
                  ), child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: Image.network(
                          '${DioClientService.baseUrl}${invoice['content_cover_image']}',
                          width: 60,
                          height: 60,
                          fit: BoxFit.cover,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            UIHelper.buildText(
                              context, color: UIHelper.blackBlueColor,
                              '${formatDate(invoice['content_created_at'])}',
                              style: AppTextStylesWidget.headerViewUp,
                            ),
                            const SizedBox(height: 4),
                            UIHelper.buildText(
                              context,
                              color: UIHelper.blackBlueColor,
                              '${invoice['content_description'] ?? ''}',
                              style: AppTextStylesWidget.body, maxLines: 2
                            ),
                          ],
                        ),
                      ),
                      Row(
                        children: [
                          UIHelper.buildText(
                            context,
                            color: Colors.black87,
                            '${invoice['content_rewards']}',
                            style: AppTextStylesWidget.headerViewUp,
                          ),
                          const SizedBox(width: 8),
                          Container(
                            decoration: const BoxDecoration(
                              shape: BoxShape.circle,
                              color: Color(0xFFFFD180),
                            ),
                            padding: const EdgeInsets.all(4),
                            child: const Icon(
                              Icons.attach_money,
                              color: Colors.brown,
                              size: 12,
                            ),
                          ),
                        ],
                      ),
                    ],
                  )),
                  const SizedBox(height: 16),
                  SizedBox(height: 500, child: SafeArea(
                    child: PillTabBar(
                      tabs: const [
                        {
                          "iconPath": 'assets/images/theme/default-icon/colored_suggesting_content.png',
                          "label": 'Suggesting'
                        },
                      ],
                      children: [
                        ScrollableContentRewardsComponent(invoices: invoice['content_invoices'],),
                      ],
                    ),
                  ))
                  /*[:memory] Column(
                    children: [
                      TabBar(
                        controller: tabController,
                        isScrollable: true,
                        labelColor: Colors.black,
                        unselectedLabelColor: Colors.grey,
                        indicatorColor: const Color(0xFF09A3AD),
                        tabs: [
                          _buildTab(
                            context,
                            "Recebidos",
                            Image.asset(
                              'assets/images/theme/default-icon/history.png',
                              height: 20,
                              width: 20,
                            ),
                          ),
                        ],
                      ),
                      SizedBox(
                        height: 470,
                        child: TabBarView(
                          controller: tabController,
                          children: [
                            ScrollableContentRewardsComponent(invoices: invoice['content_invoices'],),
                          ],
                        ),
                      ),
                      /*[:memory] Padding(padding: EdgeInsetsDirectional.symmetric(horizontal: 16, vertical: 16), child: ConfirmButtonWidget(
                        label: "Sacar",
                        isActive: true,
                        activeIcon: Icons.check_circle,
                        inactiveIcon: Icons.cancel,
                        onPressed: () {
                        },
                      ))*/
                    ],
                  )*/
                ],
              );
            }
            Widget _buildTab(BuildContext context, String label, Widget icon) {

              return Tab(
                child: Row(
                  children: [
                    icon,
                    const SizedBox(width: 8),
                    Text(label),
                  ],
                ),
              );
            }
          }
        content_open_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/components/manage_open_content_component.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentOpenComponent extends StatefulWidget {
            final Map<String, dynamic> body;
            const ContentOpenComponent({super.key, required this.body});
            @override
            State<ContentOpenComponent> createState() => _ContentOpenComponentState();
          }
          class _ContentOpenComponentState extends State<ContentOpenComponent> {
            double adjustedMeasure = 300.0;
            @override
            void initState() {

              super.initState();
              _initMeasure();
            }
            void _initMeasure() async {
              final result = await _getMeasure(
                model15: 188.0, model12: 185.0, model11: 198.0,
              );
              setState(() {

                adjustedMeasure = result;
              });
            }
            Future<double> _getMeasure({
              required double model15,
              required double model11,
              required double model12,
            }) async {
              final deviceModel = await UIHelper.sizeByDeviceModel();
              if (deviceModel.contains('15')) return model15;
              if (deviceModel.contains('12')) return model12;
              if (deviceModel.contains('11')) return model11;
              return 200.0;
            }
            @override
            Widget build(BuildContext context) {

              final body = widget.body;
              final String coverImageUrl = "${DioClientService.baseUrl}${body['cover_image_url']}";
              final bool hasTipped = body['has_tipped_owner'];
              return GestureDetector(
                onTap: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => ManageOpenContentComponent(content: widget.body),
                  ),
                ),
                child: SizedBox(
                  width: double.infinity,
                  height: adjustedMeasure,
                  child: _buildImageOverlay(coverImageUrl),
                ),
              );
            }
            Widget _buildImageOverlay(String coverImageUrl) {

              return Stack(
                fit: StackFit.expand,
                children: [
                  ClipRRect(
                    borderRadius: BorderRadius.circular(0),
                    child: Image.network(
                      coverImageUrl,
                      width: double.infinity,
                      height: adjustedMeasure,
                      fit: BoxFit.cover,
                    ),
                  ),
                  /*[:memory] if (true)
                    Positioned.fill(
                      child: Center(
                        child: Icon(Icons.lock, color: Colors.white, size: 20),
                      )
                    ),*/
                ],
              );
            }
          }
        content_restricted_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/components/show_auction_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentRestrictedComponent extends StatelessWidget {
            final Map<String, dynamic> body;
            const ContentRestrictedComponent({
              Key? key,
              required this.body,
            }) : super(key: key);
            @override
            Widget build(BuildContext context) {

              final String userName = body['userName'] ?? 'Unknown User - restrict';
              final String comment = body['comment'] ?? 'No Comment';
              final String dateTime = body['created_at'] ?? 'Unknown Date';
              final String auctionImage = body['images_urls'][0] ?? 'assets/images/theme/development-image/mocked_image_03.png';
              final int auctionId = body['id'] ?? 0;
              return Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            Image.asset(
                              'assets/images/theme/default-icon/comment.png',
                              width: 22,
                              height: 22,
                            ),
                            const SizedBox(width: 8),
                            UIHelper.buildText(
                              context,
                              userName,
                              style: AppTextStylesWidget.body,
                              color: Colors.black,
                              weight: FontWeight.w600,
                            ),
                            UIHelper.buildText(
                              context,
                              ' #$auctionId',
                              style: AppTextStylesWidget.body,
                              color: Colors.black54,
                              weight: FontWeight.w500,
                            ),
                          ],
                        ),
                        UIHelper.buildText(
                          context,
                          '',
                          style: AppTextStylesWidget.body,
                          color: Colors.black,
                          weight: FontWeight.w600,
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 0),
                    child: GestureDetector(
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ShowAuctionComponent(id: auctionId),
                        ),
                      ),
                      child: LayoutBuilder(
                        builder: (context, constraints) {
                          double size = constraints.maxWidth;
                          return Container(
                            width: size, height: size,
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(0),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.grey.withOpacity(0.2),
                                  spreadRadius: 1,
                                  blurRadius: 0,
                                ),
                              ],
                            ),
                            child: Stack(
                              children: [
                                _buildAuctionImageContent(size, auctionImage),
                                _buildAuctionActions(),
                              ],
                            ),
                          );
                        },
                      ),
                    ),
                  ),
                  SizedBox(height: 16),
                  // AuctionActionComponent(),
                ],
              );
            }
            Widget _buildAuctionImageContent(double size, String imagePath) {

              final String fullImageUrl = "${DioClientService.baseUrl}$imagePath";
              return Positioned.fill(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(0),
                  child: Image.network(
                    fullImageUrl,
                    fit: BoxFit.cover,
                    loadingBuilder: (context, child, loadingProgress) {
                      if (loadingProgress == null) return child;
                      return Center(
                        child: CircularProgressIndicator(
                          value: loadingProgress.expectedTotalBytes != null
                              ? loadingProgress.cumulativeBytesLoaded /
                              (loadingProgress.expectedTotalBytes ?? 1)
                              : null,
                        ),
                      );
                    },
                    errorBuilder: (context, error, stackTrace) {
                      return const Center(
                        child: Icon(Icons.broken_image, color: Colors.grey, size: 50),
                      );
                    },
                  ),
                ),
              );
            }
            Widget _buildAuctionActions() {

              return Positioned(
                bottom: 8,
                right: 8,
                child: IconButton(
                  icon: const Icon(Icons.favorite_border, color: Colors.white),
                  onPressed: () {
                  },
                ),
              );
            }
          }
        content_settings_edit_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentSettingsEditComponent extends StatefulWidget {
            final Map<String, dynamic> content;
            final VoidCallback onDelete;
            final Function(Map<String, dynamic>) onSave;
            const ContentSettingsEditComponent({
              super.key,
              required this.content,
              required this.onDelete,
              required this.onSave,
            });
            @override
            State<ContentSettingsEditComponent> createState() => _ContentSettingsEditComponentState();
          }
          class _ContentSettingsEditComponentState extends State<ContentSettingsEditComponent> {
            late Map<String, dynamic> _settings;
            final Map<String, bool> _sectionVisibility = {
              'blur': false,
              'obfuscate': false,
              'watermark': false,
              'reactions': true,
              'tip_owner': true,
              'tag_list': false,
              'classified_as': true,
            };
            @override
            void initState() {

              super.initState();
              _settings = Map<String, dynamic>.from(widget.content['settings']);
            }
            void _updateSetting(String key, dynamic value) {

              setState(() => _settings[key] = value);
            }
            void _updateNested(String parent, String key, dynamic value) {

              setState(() => _settings[parent][key] = value);
            }
            Widget _buildSectionTitle(String title, String key) {

              final isVisible = _sectionVisibility[key] ?? false;
              return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  UIHelper.buildText(context, title,
                      style: AppTextStylesWidget.headerViewUp, color: UIHelper.blackBlueColor, weight: FontWeight.bold),
                  IconButton(
                    icon: Icon(isVisible ? Icons.expand_less : Icons.expand_more),
                    onPressed: () {
                      setState(() => _sectionVisibility[key] = !isVisible);
                    },
                  ),
                ],
              );
            }
            @override
            Widget build(BuildContext context) {

              return SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    /*[:memory] _buildSectionTitle("Blur", 'blur'),
                    if (_sectionVisibility['blur'] == true)
                      Column(
                        children: [
                          SwitchListTile(
                            title: const Text("Apply Blur"),
                            value: _settings['blur']['apply'],
                            onChanged: (val) => _updateNested('blur', 'apply', val),
                          ),
                          Slider(
                            label: "Blur Level",
                            min: 0,
                            max: 10,
                            divisions: 10,
                            value: _settings['blur']['level'],
                            onChanged: _settings['blur']['apply']
                                ? (val) => _updateNested('blur', 'level', val)
                                : null,
                          ),
                        ],
                      ),
                    const Divider(),
                    _buildSectionTitle("Obfuscate", 'obfuscate'),
                    if (_sectionVisibility['obfuscate'] == true)
                      Column(
                        children: [
                          SwitchListTile(
                            title: const Text("Apply Obfuscation"),
                            value: _settings['obfuscate']['apply'],
                            onChanged: (val) => _updateNested('obfuscate', 'apply', val),
                          ),
                          Slider(
                            label: "Obfuscation Level",
                            min: 0,
                            max: 100,
                            divisions: 20,
                            value: _settings['obfuscate']['level'],
                            onChanged: _settings['obfuscate']['apply']
                                ? (val) => _updateNested('obfuscate', 'level', val)
                                : null,
                          ),
                        ],
                      ),
                    const Divider(),
                    _buildSectionTitle("Watermark", 'watermark'),
                    if (_sectionVisibility['watermark'] == true)
                      Column(
                        children: [
                          SwitchListTile(
                            title: const Text("Apply Watermark"),
                            value: _settings['watermark']['apply'],
                            onChanged: (val) => _updateNested('watermark', 'apply', val),
                          ),
                          TextField(
                            decoration: const InputDecoration(labelText: "Watermark Text"),
                            controller: TextEditingController(text: _settings['watermark']['text']),
                            onChanged: (val) => _updateNested('watermark', 'text', val),
                          ),
                          Slider(
                            label: "Opacity",
                            min: 0,
                            max: 1,
                            divisions: 10,
                            value: _settings['watermark']['opacity'],
                            onChanged: (val) => _updateNested('watermark', 'opacity', val),
                          ),
                          TextField(
                            decoration: const InputDecoration(labelText: "Font Size"),
                            keyboardType: TextInputType.number,
                            controller: TextEditingController(
                                text: _settings['watermark']['font_size'].toString()),
                            onChanged: (val) =>
                                _updateNested('watermark', 'font_size', double.tryParse(val) ?? 18.0),
                          ),
                        ],
                      ),
                    const Divider(), */
                    /*[:memory]   _buildSectionTitle("Rea√ß√µes do p√∫blico", 'reactions'),
                    if (_sectionVisibility['reactions'] == true)
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Wrap(
                            spacing: 8,
                            children: ['tip_owner'].map((reaction) {
                              return FilterChip(
                                label: UIHelper.buildText(
                                  context,
                                  reaction,
                                  style: AppTextStylesWidget.headerViewUp,
                                  color: UIHelper.blackBlueColor,
                                ),
                                backgroundColor: Colors.white,
                                selected: _settings['reactions'].contains(reaction),
                                onSelected: null,
                              );
                            }).toList(),
                          ),
                        ],
                      ),*/
                    /*[:memory] _buildSectionTitle("Tip Owner", 'tip_owner'),
                    if (_sectionVisibility['tip_owner'] == true)
                      TextField(
                        decoration: const InputDecoration(labelText: "Tip Owner (ETH)"),
                        keyboardType: TextInputType.number,
                        controller: TextEditingController(text: _settings['tip_owner'].toString()),
                        onChanged: (val) =>
                            _updateSetting('tip_owner', double.tryParse(val) ?? 0.0),
                      ),
                    const Divider(),*/
                    /*[:memory]  _buildSectionTitle("Tags", 'tag_list'),
                    if (_sectionVisibility['tag_list'] == true)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Wrap(
                            spacing: 8,
                            children: List<String>.from(_settings['tag_list']).map((tag) {
                              return Chip(
                                label: Text(tag),
                                onDeleted: () {
                                  setState(() {

                                    _settings['tag_list'].remove(tag);
                                  });
                                },
                              );
                            }).toList(),
                          ),
                          const SizedBox(height: 8),
                          TextField(
                            decoration: const InputDecoration(
                              labelText: "Add new tag",
                              suffixIcon: Icon(Icons.add),
                            ),
                            onSubmitted: (val) {
                              if (val.trim().isNotEmpty) {

                                setState(() {

                                  _settings['tag_list'].add(val.trim());
                                });
                              }
                            },
                          ),
                        ],
                      ),
                    const Divider(),*/
                    _buildSectionTitle("Recompensas", 'tip_owner'),
                    if (_sectionVisibility['tip_owner'] == true)
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 8.0),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(top: 4),
                              child: Icon(Icons.monetization_on, color: Colors.amber),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  UIHelper.buildText(
                                    context,
                                    "Recebidos",
                                    style: AppTextStylesWidget.body,
                                    color: UIHelper.blackBlueColor,
                                  ),
                                  UIHelper.buildText(
                                    context,
                                    "${_settings['tip_owner'] ?? 0.0} XII\$",
                                    style: AppTextStylesWidget.body,
                                    color: UIHelper.blackBlueColor,
                                  ),
                                ],
                              ),
                            ),
                            const Icon(Icons.lock_outline, color: Colors.grey),
                          ],
                        ),
                      ),
                    _buildSectionTitle("Classifica√ß√£o", 'classified_as'),
                    if (_sectionVisibility['classified_as'] == true)
                      DropdownButtonFormField<String>(
                        value: _settings['classified_as'],
                        items: [
                          DropdownMenuItem(value: 'open', child: UIHelper.buildText(context, "Aberto",
                              style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor)),
                          DropdownMenuItem(value: 'restricted', child: UIHelper.buildText(context, "Restricted",
                              style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor)),
                          DropdownMenuItem(value: 'private', child: UIHelper.buildText(context, "Private",
                              style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor)),
                        ],
                        onChanged: null,
                        decoration: const InputDecoration(
                          labelText: "Tipo de acesso ao conte√∫do",
                          enabled: false,
                        ),
                      ),
                    const SizedBox(height: 24),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        SizedBox(width: 1),
                        Wrap(
                          children: [
                            Container(
                              decoration: const BoxDecoration(
                                color: Colors.white,
                                shape: BoxShape.circle,
                              ),
                              child: IconButton(
                                icon: const Icon(Icons.delete, color: UIHelper.blackBlueColor),
                                tooltip: 'Delete',
                                onPressed: widget.onDelete,
                              ),
                            )
                          ],
                        )
                      ],
                    ),
                  ],
                ),
              );
            }
          }
        count_down_timer_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:google_fonts/google_fonts.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class CountDownTimerComponent extends StatefulWidget {
            const CountDownTimerComponent({super.key});
            @override
            State<CountDownTimerComponent> createState() => _CountDownTimerComponentState();
          }
          class _CountDownTimerComponentState extends State<CountDownTimerComponent> {
            late DateTime endTime;
            late Stream<DateTime> timerStream;
            @override
            void initState() {

              super.initState();
              endTime = DateTime(2025, 2, 11, 20, 0, 0);
              timerStream = Stream<DateTime>.periodic(
                const Duration(seconds: 1),
                    (_) => DateTime.now(),
              ).asBroadcastStream();
            }
            String formatDuration(Duration duration) {

              String twoDigits(int n) => n.toString().padLeft(2, '0');
              final days = twoDigits(duration.inDays);
              final hours = twoDigits(duration.inHours.remainder(24));
              final minutes = twoDigits(duration.inMinutes.remainder(60));
              final seconds = twoDigits(duration.inSeconds.remainder(60));
              return '$days days  $hours:$minutes:$seconds';
            }
            @override
            Widget build(BuildContext context) {

              return StreamBuilder<DateTime>(
                stream: timerStream,
                builder: (context, snapshot) {
                  if (!snapshot.hasData) return const Text('...');
                  final now = snapshot.data!;
                  final remaining = endTime.difference(now);
                  if (remaining.isNegative) {

                    return Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.timer_off, color: Colors.red, size: 20),
                        const SizedBox(width: 5),
                        Text(
                          'Time is up!',
                          style: GoogleFonts.poppins(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.red,
                          ),
                        ),
                      ],
                    );
                  }
                  return Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      UIHelper.buildText(
                        context,
                        formatDuration(remaining),
                        style: AppTextStylesWidget.body,
                        color: Colors.blueGrey, weight: FontWeight.w600,
                      ),
                    ],
                  );
                },
              );
            }
          }
        follower_card_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/components/profile_header_component.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class FollowerCardComponent extends StatefulWidget {
            final Map<String, dynamic> contentBody;
            final VoidCallback? onOptionSelected;
            const FollowerCardComponent({
              Key? key,
              required this.contentBody,
              this.onOptionSelected,
            }) : super(key: key);
            @override
            State<FollowerCardComponent> createState() => _FollowerCardComponentState();
          }
          class _FollowerCardComponentState extends State<FollowerCardComponent> {
            bool isAdded = false;
            void toggleContact() {

              setState(() {

                isAdded = !isAdded;
              });
              if (widget.onOptionSelected != null) {

                widget.onOptionSelected!();
              }
            }
            @override
            Widget build(BuildContext context) {

              final String avatarUrl = '${DioClientService.baseUrl}${widget.contentBody['avatar_url']}';
              final size = MediaQuery.of(context).size.width;
              final profileContent = {
                ...widget.contentBody,
                'relationship': {
                  ...?widget.contentBody['relationship'],
                  'status': true,
                  'type': 'following',
                }
              };
              return Column(
                children: [
                  Container(
                      padding: const EdgeInsets.all(0),
                      decoration: BoxDecoration(
                        color: UIHelper.backgroundColor,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: ProfileHeaderComponent(
                        profileContent: profileContent,
                      )
                  ),
                  Divider(
                    color: Colors.grey[100],
                    height: 3,
                  )
                ],
              );
            }
            Widget buildLatestContentCover(Map<String, dynamic> bodyContent, double size) {

              final String? coverImageUrl = bodyContent['last_content'] != null
                  ? bodyContent['last_content']['cover_image_url']
                  : null;
              final Offset offset = Offset.zero;
              final double zoom = 1.1;
              if (coverImageUrl != null && coverImageUrl.isNotEmpty) {

                return Transform.translate(
                  offset: offset,
                  child: Transform.scale(
                    scale: zoom,
                    child: Image.network(
                      '${DioClientService.baseUrl}${coverImageUrl}',
                      fit: BoxFit.cover,
                      width: size,
                      height: size,
                    ),
                  ),
                );
              } else {
                return Container(
                  width: size,
                  height: size,
                  color: Colors.grey[200],
                  child: const Icon(
                    Icons.image,
                    size: 48,
                    color: Colors.grey,
                  ),
                );
              }
            }
          }
        followers_scrollable_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/follower_card_component.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class FollowersScrollableComponent extends StatefulWidget {
            const FollowersScrollableComponent({Key? key}) : super(key: key);
            @override
            _FollowersScrollableComponentState createState() => _FollowersScrollableComponentState();
          }
          class _FollowersScrollableComponentState extends State<FollowersScrollableComponent> {
            late final _pagingController = PagingController<int, Map<String, dynamic>>(
              getNextPageKey: (state) {
                final loadedItems = state.items;
                if (state.hasNextPage == false) return null;
                return (loadedItems?.length ?? 0) ~/ 10 + 1;
              },
              fetchPage: (page) async {
                final ProfileProvider profileProvider = Provider.of<ProfileProvider>(context, listen: false);
                const int itemsPerPage = 10;
                try {
                  await profileProvider.loadFollowers(page: page);
                  final loadedIds = _loadedIds();
                  final allItems = profileProvider.followers;
                  final newItems = allItems.where((item) => !loadedIds.contains(item['id'])).toList();
                  final isLastPage = newItems.length < 10 || !profileProvider.hasMoreData;
                  _addAppendLastPage(page, isLastPage, newItems);
                  return newItems;
                } catch (error) {
                  throw Exception('Erro ao buscar p√°gina $page: $error');
                }
              },
            );
            _loadedIds() {

              return _pagingController.items?.map((item) => item['id']).toSet() ?? {};
            }
            void _addAppendLastPage(int pageKey, bool isLast, List<Map<String, dynamic>> newItems, ) {

              PagingState<int, Map<String, dynamic>> state = _pagingController.value;
              _pagingController.value = _pagingController.value.copyWith(
                hasNextPage: !isLast,
                isLoading: false,
              );
            }
            @override
            void initState() {

              super.initState();
              WidgetsBinding.instance.addPostFrameCallback((_) {
              });
            }
            @override
            void dispose() {

              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return Container(
                  color: UIHelper.backgroundColor,
                  child: Column(
                    children: [
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 0),
                        child: FilterInputFieldWidget(
                          label: 'filtre os resultado',
                          hint: 'nome, cidade ou conte√∫do',
                          onTagsChanged: () {
                          },
                        ),
                      ),
                      Expanded(
                        child: Stack(
                          children: [
                            PagingListener(
                                controller: _pagingController,
                                builder: (context, state, fetchNextPage) =>
                                    Stack(
                                      children: [
                                        PagedListView<int, Map<String, dynamic>>(
                                          state: state,
                                          fetchNextPage: fetchNextPage,
                                          padding: const EdgeInsets.all(0),
                                          builderDelegate: PagedChildBuilderDelegate(
                                              animateTransitions: true,
                                              transitionDuration: const Duration(milliseconds: 300),
                                              firstPageErrorIndicatorBuilder: (_) => Column(
                                                mainAxisAlignment: MainAxisAlignment.center,
                                                children: [
                                                  const Text('Erro ao carregar a primeira p√°gina.'),
                                                  ElevatedButton(
                                                    onPressed: () => _pagingController.refresh(),
                                                    child: const Text('Tentar novamente'),
                                                  ),
                                                ],
                                              ),
                                              newPageErrorIndicatorBuilder: (_) => Column(
                                                mainAxisAlignment: MainAxisAlignment.center,
                                                children: [
                                                  const Text('Erro ao carregar nova p√°gina.'),
                                                  ElevatedButton(
                                                    onPressed: () => _pagingController.refresh(),
                                                    child: const Text('Tentar novamente'),
                                                  ),
                                                ],
                                              ),
                                              firstPageProgressIndicatorBuilder: (_) => const Center(
                                                child: CircularProgressIndicator(),
                                              ),
                                              newPageProgressIndicatorBuilder: (_) => const Padding(
                                                padding: EdgeInsets.all(8.0),
                                                child: Center(
                                                  child: CircularProgressIndicator(),
                                                ),
                                              ),
                                              noItemsFoundIndicatorBuilder: (_) => const Center(
                                                child: Text('Nenhum item encontrado.'),
                                              ),
                                              noMoreItemsIndicatorBuilder: (_) => const Padding(
                                                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 32),
                                                child: Center(
                                                  child: Text('Sem mais √≠tens para carregar.'),
                                                ),
                                              ),
                                              itemBuilder: (context, item, index) => _loadItemDevelopment(context, item, index)
                                          ),
                                        ),
                                      ],
                                    )
                            ),
                          ],
                        ),
                      ),
                    ],
                  )
              );
            }
            Widget _loadItemDevelopment(ontext, item, index) {

              return FollowerCardComponent(contentBody: item);
            }
          }
        following_card_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/sections/components/profile_header_component.dart';

          class FollowingCardComponent extends StatefulWidget {
            final Map<String, dynamic> contentBody;
            final VoidCallback? onOptionSelected;
            const FollowingCardComponent({
              Key? key,
              required this.contentBody,
              this.onOptionSelected,
            }) : super(key: key);
            @override
            State<FollowingCardComponent> createState() => _FollowingCardComponentState();
          }
          class _FollowingCardComponentState extends State<FollowingCardComponent> {
            bool isAdded = false;
            void toggleContact() {

              setState(() {

                isAdded = !isAdded;
              });
              if (widget.onOptionSelected != null) {

                widget.onOptionSelected!();
              }
            }
            @override
            Widget build(BuildContext context) {

              final String avatarUrl = '${DioClientService.baseUrl}${widget.contentBody['avatar_url']}';
              final size = MediaQuery.of(context).size.width;
              return Column(
                children: [
                  Container(
                      padding: const EdgeInsets.all(0),
                      decoration: BoxDecoration(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.circular(0),
                      ),
                      child: ProfileHeaderComponent(
                        profileContent: widget.contentBody,
                      ),
                  ),
                  Divider(
                    color: Colors.grey[100],
                    height: 3,
                  )
                ],
              );
            }
            Widget buildLatestContentCover(Map<String, dynamic> bodyContent, double size) {

              final String? coverImageUrl = bodyContent['last_content'] != null
                  ? bodyContent['last_content']['cover_image_url']
                  : null;
              final Offset offset = Offset.zero;
              final double zoom = 1.1;
              if (coverImageUrl != null && coverImageUrl.isNotEmpty) {

                return Transform.translate(
                  offset: offset,
                  child: Transform.scale(
                    scale: zoom,
                    child: Image.network(
                      '${DioClientService.baseUrl}${coverImageUrl}',
                      fit: BoxFit.cover,
                      width: size,
                      height: size,
                    ),
                  ),
                );
              } else {
                return Container(
                  width: size,
                  height: size,
                  color: Colors.grey[200],
                  child: const Icon(
                    Icons.image,
                    size: 48,
                    color: Colors.grey,
                  ),
                );
              }
            }
          }
        following_profile_last_content.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/sections/components/profile_header_component.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
          import 'package:xiis/presentation/views/content_preview_component.dart';

          class FollowingProfileLastContent extends StatefulWidget {
            final Map<String, dynamic> contentBody;
            final VoidCallback? onOptionSelected;
            const FollowingProfileLastContent({
              Key? key,
              required this.contentBody,
              this.onOptionSelected,
            }) : super(key: key);
            @override
            State<FollowingProfileLastContent> createState() => _FollowingProfileLastContentState();
          }
          class _FollowingProfileLastContentState extends State<FollowingProfileLastContent> {
            bool isAdded = false;
            Future<void> toggleContact() async {
              ProfileProvider profileProvider = ProfileProvider();
              await profileProvider.editRelationship(
                  followingProfile: widget.contentBody['id'], isRelationship: widget.contentBody['relationship']['status'],
              );
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                    decoration: BoxDecoration(
                      color: UIHelper.backgroundColor,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: ProfileHeaderComponent(
                      profileContent: widget.contentBody
                    ),
                  ),
                  ContentPreviewComponent(contentData: widget.contentBody),
                ],
              );
            }
          }
        following_scrollable_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/following_profile_last_content.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class FollowingScrollableComponent extends StatefulWidget {
            const FollowingScrollableComponent({super.key});
            @override
            State<FollowingScrollableComponent> createState() => _FollowingScrollableComponentState();
          }
          class _FollowingScrollableComponentState extends State<FollowingScrollableComponent> {
            late HomeController controller;
            @override
            void initState() {

              super.initState();
              final homeProvider = context.read<HomeProvider>();
              controller = HomeController(homeProvider);
              controller.loadFollowings();
            }
            Widget _buildBalanceInfo(BuildContext context) {

              final balance = context.watch<RewardProvider>().balance;
              return Row(
                children: [
                  Semantics(
                    label: 'Reward Coin Icon',
                    child: Tooltip(
                      message: 'Your coin balance',
                      child: Padding(
                        padding: const EdgeInsets.only(top: 2),
                        child: Image.asset(
                          'assets/images/theme/default-icon/coin.png',
                          width: 18,
                          height: 18,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 10),
                  Semantics(
                    label: 'Current balance: $balance coins',
                    child: UIHelper.buildText(
                      context,
                      balance,
                      style: AppTextStylesWidget.headerViewUp,
                      weight: FontWeight.w700,
                      color: UIHelper.blackBlueColor,
                    ),
                  ),
                ],
              );
            }
            @override
            Widget build(BuildContext context) {

              final followings = context.watch<HomeProvider>().followingsLastContent;
              return AnimatedBuilder(
                animation: controller,
                builder: (context, _) {
                  return Container(
                    color: UIHelper.backgroundColor,
                    child: Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              _buildBalanceInfo(context),
                              const SizedBox(width: 10),
                              Expanded(
                                child: FilterInputFieldWidget(
                                  label: 'filtre os resultado',
                                  hint: 'nome, cidade ou conte√∫do',
                                  onTagsChanged: () {
                                  },
                                ),
                              ),
                            ],
                          ),
                        ),
                        Expanded(
                          child: controller.isLoading
                              ? const Center(child: CircularProgressIndicator())
                              : controller.hasError
                              ? Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                const Text('Erro ao carregar os conte√∫dos.'),
                                ElevatedButton(
                                  onPressed: controller.loadFollowings,
                                  child: const Text('Tentar novamente'),
                                ),
                              ],
                            ),
                          )
                              : followings.isEmpty
                              ? const Center(
                            child: Padding(
                              padding: EdgeInsets.symmetric(horizontal: 32, vertical: 32),
                              child: Text('Nenhum item encontrado.'),
                            ),
                          )
                              : ListView.builder(
                            padding: EdgeInsets.zero,
                            itemCount: followings.length,
                            itemBuilder: (context, index) {
                              final item = followings[index];
                              return FollowingProfileLastContent(contentBody: item);
                            },
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            }
          }
        followings_scrollable_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/following_card_component.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class FollowingsScrollableComponent extends StatefulWidget {
            const FollowingsScrollableComponent({Key? key}) : super(key: key);
            @override
            _FollowingsScrollableComponentState createState() => _FollowingsScrollableComponentState();
          }
          class _FollowingsScrollableComponentState extends State<FollowingsScrollableComponent> {
            final ScrollController _scrollController = ScrollController();
            bool _isButtonVisible = true;
            late final _pagingController = PagingController<int, Map<String, dynamic>>(
              getNextPageKey: (state) {
                final loadedItems = state.items;
                if (state.hasNextPage == false) return null;
                return (loadedItems?.length ?? 0) ~/ 10 + 1;
              },
              fetchPage: (page) async {
                final ProfileProvider profileProvider = Provider.of<ProfileProvider>(context, listen: false);
                const int itemsPerPage = 10;
                try {
                  await profileProvider.loadFollowings(page: page);
                  final loadedIds = _loadedIds();
                  final allItems = profileProvider.followings;
                  final newItems = allItems.where((item) => !loadedIds.contains(item['id'])).toList();
                  final isLastPage = newItems.length < 10 || !profileProvider.hasMoreData;
                  _addAppendLastPage(page, isLastPage, newItems);
                  return newItems;
                } catch (error) {
                  throw Exception('Erro ao buscar p√°gina $page: $error');
                }
              },
            );
            _loadedIds() {

              return _pagingController.items?.map((item) => item['id']).toSet() ?? {};
            }
            void _addAppendLastPage(int pageKey, bool isLast, List<Map<String, dynamic>> newItems, ) {

              PagingState<int, Map<String, dynamic>> state = _pagingController.value;
              _pagingController.value = _pagingController.value.copyWith(
                hasNextPage: !isLast,
                isLoading: false,
              );
            }
            Widget _loadItemDevelopment(context, item, index) {

              final Map<String, dynamic> profileContent = {
                'id': item['id'],
                'name': item['name'],
                'avatar_url': item['avatar_url'],
                'location': item['location'],
                'is_added': true,
                'relationship': {
                  'status': true,
                  'type': 'following',
                }
              };
              return FollowingCardComponent(contentBody: profileContent);
            }
            @override
            void initState() {

              super.initState();
              WidgetsBinding.instance.addPostFrameCallback((_) {});
            }
            @override
            void dispose() {

              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return Container(
                  color: UIHelper.backgroundColor,
                  child: Column(
                    children: [
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 0),
                        child: FilterInputFieldWidget(
                          label: 'filtre os resultado',
                          hint: 'nome, cidade ou conte√∫do',
                          onTagsChanged: () {
                          },
                        ),
                      ),
                      Expanded(
                        child: Stack(
                          children: [
                            PagingListener(
                                controller: _pagingController,
                                builder: (context, state, fetchNextPage) =>
                                    Stack(
                                      children: [
                                        PagedListView<int, Map<String, dynamic>>(
                                          state: state,
                                          fetchNextPage: fetchNextPage,
                                          padding: const EdgeInsets.all(0),
                                          builderDelegate: PagedChildBuilderDelegate(
                                              animateTransitions: true,
                                              transitionDuration: const Duration(milliseconds: 300),
                                              firstPageErrorIndicatorBuilder: (_) => Column(
                                                mainAxisAlignment: MainAxisAlignment.center,
                                                children: [
                                                  const Text('Erro ao carregar a primeira p√°gina.'),
                                                  ElevatedButton(
                                                    onPressed: () => _pagingController.refresh(),
                                                    child: const Text('Tentar novamente'),
                                                  ),
                                                ],
                                              ),
                                              newPageErrorIndicatorBuilder: (_) => Column(
                                                mainAxisAlignment: MainAxisAlignment.center,
                                                children: [
                                                  const Text('Erro ao carregar nova p√°gina.'),
                                                  ElevatedButton(
                                                    onPressed: () => _pagingController.refresh(),
                                                    child: const Text('Tentar novamente'),
                                                  ),
                                                ],
                                              ),
                                              firstPageProgressIndicatorBuilder: (_) => const Center(
                                                child: CircularProgressIndicator(),
                                              ),
                                              newPageProgressIndicatorBuilder: (_) => const Padding(
                                                padding: EdgeInsets.all(8.0),
                                                child: Center(
                                                  child: CircularProgressIndicator(),
                                                ),
                                              ),
                                              noItemsFoundIndicatorBuilder: (_) => const Center(
                                                child: Text('Nenhum item encontrado.'),
                                              ),
                                              noMoreItemsIndicatorBuilder: (_) => const Padding(
                                                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 32),
                                                child: Center(
                                                  child: Text('Sem mais √≠tens para carregar.'),
                                                ),
                                              ),
                                              itemBuilder: (context, item, index) => _loadItemDevelopment(context, item, index)
                                          ),
                                        ),
                                      ],
                                    )
                            ),
                          ],
                        ),
                      ),
                    ],
                  )
              );
            }
          }
        history_scrollable_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/controllers/profile_controller.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
          import 'package:xiis/presentation/views/engine_view.dart';

          class HistoryScrollableComponent extends StatefulWidget {
            const HistoryScrollableComponent({super.key});
            @override
            State<HistoryScrollableComponent> createState() => _HistoryScrollableComponentState();
          }
          class _HistoryScrollableComponentState extends State<HistoryScrollableComponent> {
            final ScrollController _scrollController = ScrollController();
            late ProfileController controller;

            @override
            void initState() {

              super.initState();
              final profileProvider = context.read<ProfileProvider>();
              controller = ProfileController(profileProvider);
              controller.loadProfileHistory();
              _scrollController.addListener(_onScroll);
            }
            void _onScroll() {

              if (_scrollController.position.pixels >=
                  _scrollController.position.maxScrollExtent - 300 &&
                  !controller.isLoading &&
                  !controller.hasError) {
                controller.loadProfileHistory();
              }
            }
            Widget buildHistoryGrid({
              required ScrollController scrollController,
              required List<Map<String, dynamic>> contents,
            }) {
              return GridView.builder(
                controller: scrollController,
                padding: EdgeInsets.zero,
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2, crossAxisSpacing: 1,
                  mainAxisSpacing: 1, childAspectRatio: 0.9,
                ),
                itemCount: contents.length,
                itemBuilder: (context, index) {
                  final item = contents[index];
                  return EngineView(context, content: item);
                },
              );
            }
            @override
            void dispose() {

              _scrollController.dispose();
              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return ChangeNotifierProvider.value(
                value: controller,
                child: Consumer<ProfileController>(
                  builder: (context, controller, _) {
                    final contents = context.watch<ProfileProvider>().contents;
                    return Container(
                      color: UIHelper.backgroundColor,
                      child: Column(
                        children: [
                          if (controller.hasError)
                            const Padding(
                              padding: EdgeInsets.all(12),
                              child: Text('Erro ao carregar dados'),
                            ),
                          Expanded(
                            child: buildHistoryGrid(
                              scrollController: _scrollController,
                              contents: contents,
                            ),
                          ),
                          if (false)
                            const Padding(
                              padding: EdgeInsets.all(12),
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                        ],
                      ),
                    );
                  },
                ),
              );
            }
          }
        manage_open_content_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/content_provider.dart';
          import 'package:xiis/presentation/sections/components/content_settings_edit_component.dart';
          import 'package:xiis/presentation/sections/components/count_down_timer_component.dart';
          import 'package:xiis/presentation/sections/widgets/comment_card_widget.dart';
          import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
          import 'package:xiis/presentation/views/manage_content_view_component.dart';

          class ManageOpenContentComponent extends StatefulWidget {
            final Map<String, dynamic> content;
            const ManageOpenContentComponent({super.key, required this.content});
            @override
            _ManageOpenContentComponent createState() => _ManageOpenContentComponent();
          }
          class _ManageOpenContentComponent extends State<ManageOpenContentComponent>
              with TickerProviderStateMixin {
            List<dynamic> comments = [];
            bool isLoadingComments = true;
            @override
            void initState() {

              super.initState();
              _loadComments();
            }
            Future<void> _loadComments() async {
              final loadedComments = await context
                  .read<ContentProvider>()
                  .loadComments(widget.content['id']);
              setState(() {

                comments = loadedComments;
                isLoadingComments = false;
              });
            }
            @override
            Widget build(BuildContext context) {

              final int contentId = widget.content['id'];
              return Scaffold(
                backgroundColor: Colors.white,
                appBar: _buildAppBar(context),
                body: SafeArea(
                  child: PillTabBar(
                    tabs: const [
                      {
                        "iconPath": 'assets/images/theme/default-icon/colored_manage_content.png',
                        "label": 'Content'
                      },
                      {
                        "iconPath": 'assets/images/theme/default-icon/colored_following_content.png',
                        "label": 'Details'
                      }
                    ],
                    children: [
                      ListView(
                        padding: EdgeInsets.zero,
                        children: [
                          /*[:memory] Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 16),
                            child: Row(
                              children: [
                                Expanded(
                                  child: _ActionButton(
                                    assetPath: 'assets/images/theme/default-icon/coin.png',
                                    label: 'total tip',
                                    onPressed: () {},
                                  ),
                                ),
                                const SizedBox(width: 16),
                                Expanded(
                                  child: _ActionButton(
                                    assetPath: 'assets/images/theme/default-icon/colored_manage_status.png',
                                    label: 'running',
                                    onPressed: () {},
                                  ),
                                ),
                              ],
                            ),
                          ),*/
                          ManageContentViewComponent(contentData: widget.content),
                          const SizedBox(height: 16),
                          _buildCommentsSection(),
                          const SizedBox(height: 35),
                        ],
                      ),
                      ContentSettingsEditComponent(
                        content: widget.content,
                        onDelete: () {
                        },
                        onSave: (updatedSettings) {
                        },
                      )
                    ],
                  ),
                ),
              );
            }
            AppBar _buildAppBar(BuildContext context) {

              return AppBar(
                backgroundColor: Colors.white,
                title: Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: const [
                    Icon(Icons.timelapse, size: 22),
                    SizedBox(width: 8),
                    CountDownTimerComponent(),
                  ],
                ),
                centerTitle: true,
                leading: IconButton(
                  icon: const Icon(Icons.arrow_back),
                  onPressed: () => Navigator.pop(context),
                ),
              );
            }
            Widget _buildCommentsSection() {

              if (isLoadingComments) {

                return const Padding(
                  padding: EdgeInsets.symmetric(vertical: 32),
                  child: Center(child: CircularProgressIndicator()),
                );
              }
              if (comments.isEmpty) {

                return const Padding(
                  padding: EdgeInsets.symmetric(vertical: 32),
                  child: Center(child: Text('Nenhum coment√°rio dispon√≠vel.')),
                );
              }
              return AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                child: ListView.separated(
                  key: ValueKey(comments.length),
                  physics: const NeverScrollableScrollPhysics(),
                  shrinkWrap: true,
                  padding: const EdgeInsets.symmetric(horizontal: 0),
                  itemCount: comments.length,
                  separatorBuilder: (_, __) => const Divider(height: 0),
                  itemBuilder: (context, index) {
                    final comment = comments[index];
                    return CommentCardWidget(
                      id: comment.id,
                      profileImage: comment.imageProfile,
                      userName: comment.userName,
                      createdAt: comment.createdAt,
                      commentBody: comment.commentBody,
                    );
                  },
                ),
              );
            }
          }
          class _ActionButton extends StatelessWidget {
            final String assetPath;
            final String label;
            final VoidCallback onPressed;
            const _ActionButton({
              required this.assetPath,
              required this.label,
              required this.onPressed,
            });
            @override
            Widget build(BuildContext context) {

              return Padding(padding: EdgeInsets.symmetric(vertical: 16, horizontal: 16), child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Image.asset(
                    assetPath,
                    width: 28,
                    height: 28,
                    fit: BoxFit.contain,
                  ),
                  const SizedBox(height: 8),
                  Text(label, textAlign: TextAlign.center),
                ],
              ));
            }
          }
        model.dart: |
          class Model {
            final int id;
            final String imagePath;
            final String name;
            final String? label;
            Model({
              required this.id,
              required this.imagePath,
              required this.name,
              required this.label,
            });
          }
          List<Model> navBtn = [
            Model(id: 0, imagePath: 'assets/images/theme/default-icon/user_home.png', name: '', label: 'Home'),
            Model(id: 2, imagePath: 'assets/images/theme/default-icon/add_media.png', name: '', label: 'Create Content'),
            Model(id: 3, imagePath: 'assets/images/theme/default-icon/coin.png', name: '', label: 'Rewards'),
            Model(id: 4, imagePath: 'assets/images/theme/default-icon/notification.png', name: '', label: 'Notifications'),
            Model(id: 4, imagePath: 'assets/images/theme/default-icon/profile.png', name: '', label: 'Profile'),
          ];
        network_scrollable_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/sections/components/followers_scrollable_component.dart';
          import 'package:xiis/presentation/sections/components/followings_scrollable_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class NetworkScrollableComponent extends StatefulWidget {
            const NetworkScrollableComponent({Key? key}) : super(key: key);
            @override
            _NetworkScrollableComponentState createState() =>
                _NetworkScrollableComponentState();
          }
          class _NetworkScrollableComponentState
              extends State<NetworkScrollableComponent>
              with TickerProviderStateMixin {
            late final TabController _tabController;
            late final ScrollController _scrollController;
            List<Map<String, dynamic>> _following = [];
            List<Map<String, dynamic>> _followers = [];
            @override
            void initState() {

              super.initState();
              _tabController = TabController(length: 2, vsync: this);
              _scrollController = ScrollController();
              loadFollowings();
              loadFollowers();
            }
            @override
            void dispose() {

              _tabController.dispose();
              _scrollController.dispose();
              super.dispose();
            }
            void loadFollowings() {

              final provider = context.read<ProfileProvider>();
              provider.loadFollowings(page: 1, isRefresh: false);
              provider.loadFollowers(page: 1, isRefresh: false);
            }
            void loadFollowers() {

              final provider = context.read<ProfileProvider>();
              _followers = provider.followers;
            }
            @override
            Widget build(BuildContext context) {

              return SafeArea(
                child: PillTabBar(
                  tabs: [
                    {
                      "iconPath": 'assets/images/theme/default-icon/colored_follower.png',
                      "label": 'Following'
                    },
                    {
                      "iconPath": 'assets/images/theme/default-icon/colored_followings.png',
                      "label": 'Followers'
                    }
                  ],
                  children: const [
                    FollowingsScrollableComponent(),
                    FollowersScrollableComponent()
                  ],
                ),
              );
              return Column(
                children: [
                  TabBar(
                    controller: _tabController,
                    isScrollable: true,
                    labelColor: Colors.black,
                    unselectedLabelColor: Colors.grey,
                    indicatorColor: UIHelper.successColor,
                    tabs: [
                      Tab(
                        child: Row(
                          children: [
                            Icon(Icons.group, size: 18, color: Colors.black),
                            const SizedBox(width: 8),
                            UIHelper.buildText(
                              context,
                              'Followings',
                              style: AppTextStylesWidget.headerViewUp,
                              weight: FontWeight.w700,
                              color: Colors.black,
                            ),
                          ],
                        ),
                      ),
                      Tab(
                        child: Row(
                          children: [
                            Icon(Icons.group, size: 18, color: Colors.black),
                            const SizedBox(width: 8),
                            UIHelper.buildText(
                              context,
                              'Followers',
                              style: AppTextStylesWidget.headerViewUp,
                              weight: FontWeight.w700,
                              color: Colors.black,
                            ),
                          ],
                        ),
                      )
                    ],
                  ),
                  Expanded(
                    child: TabBarView(
                      controller: _tabController,
                      children: [
                        FollowingsScrollableComponent(),
                        FollowersScrollableComponent()
                      ],
                    ),
                  ),
                ],
              );
            }
          }
        paint.dart: |
          import 'package:flutter/cupertino.dart';

          import 'color.dart';

          class ButtonNotch extends CustomPainter {
            @override
            void paint(Canvas canvas, Size size) {

              var dotPoint = Offset(size.width / 2, 2);
              var paint_1 = Paint()
                ..color = bgColor
                ..style = PaintingStyle.fill;
              var paint_2 = Paint()
                ..color = white
                ..style = PaintingStyle.fill;
              var path = Path();
              path.moveTo(0, 0);
              path.quadraticBezierTo(7.5, 0, 12, 5);
              path.quadraticBezierTo(size.width / 2, size.height / 2, size.width - 12, 5);
              path.quadraticBezierTo(size.width - 7.5, 0, size.width, 0);
              path.close();
              canvas.drawPath(path, paint_1);
              canvas.drawCircle(dotPoint, 6, paint_2);
            }
            @override
            bool shouldRepaint(covariant CustomPainter oldDelegate) {

              return false;
            }
          }
        password_confirmation_field_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter/services.dart';

          class PasswordConfirmationField extends StatefulWidget {
            final Function(String) onPasswordChanged;
            final Function(String) onConfirmPasswordChanged;
            final double fontSize;
            final FontWeight fontWeight;
            final int? minLength;
            const PasswordConfirmationField({
              super.key,
              required this.onPasswordChanged,
              required this.onConfirmPasswordChanged,
              this.fontWeight = FontWeight.normal,
              this.fontSize = 16,
              this.minLength = 12,
            });
            @override
            _PasswordConfirmationFieldState createState() => _PasswordConfirmationFieldState();
          }
          class _PasswordConfirmationFieldState extends State<PasswordConfirmationField> {
            String _password = '';
            String _confirmPassword = '';
            bool _isPasswordVisible = false;
            bool _isConfirmPasswordVisible = false;
            void _onPasswordChanged(String value) {

              setState(() {

                _password = value;
              });
              widget.onPasswordChanged(value);
            }
            void _onConfirmPasswordChanged(String value) {

              setState(() {

                _confirmPassword = value;
              });
              widget.onConfirmPasswordChanged(value);
            }
            Widget _buildPasswordField() {

              return TextField(
                obscureText: !_isPasswordVisible,
                onChanged: _onPasswordChanged,
                style: TextStyle(
                  fontWeight: widget.fontWeight,
                  fontSize: widget.fontSize,
                  color: Colors.pink,
                ),
                inputFormatters: [
                  if (widget.minLength != null)
                    LengthLimitingTextInputFormatter(widget.minLength),
                ],
                decoration: _buildInputDecoration(
                  label: "Senha",
                  hint: "M√≠nimo ${widget.minLength} d√≠gitos",
                  icon: Icons.lock,
                  isPasswordField: true,
                  isVisible: _isPasswordVisible,
                  toggleVisibility: () => setState(() => _isPasswordVisible = !_isPasswordVisible),
                  textValue: _password,
                ),
              );
            }
            Widget _buildConfirmPasswordField(bool passwordsMatch) {

              return TextField(
                obscureText: !_isConfirmPasswordVisible,
                onChanged: _onConfirmPasswordChanged,
                style: TextStyle(
                  fontWeight: widget.fontWeight,
                  fontSize: widget.fontSize,
                  color: Colors.pink,
                ),
                inputFormatters: [
                  if (widget.minLength != null)
                    LengthLimitingTextInputFormatter(widget.minLength),
                ],
                decoration: _buildInputDecoration(
                  label: "Confirme a Senha",
                  hint: "Digite a senha novamente",
                  icon: Icons.lock_clock_rounded,
                  isPasswordField: true,
                  isVisible: _isConfirmPasswordVisible,
                  toggleVisibility: () => setState(() => _isConfirmPasswordVisible = !_isConfirmPasswordVisible),
                  isValid: passwordsMatch,
                  textValue: _confirmPassword,
                ),
              );
            }
            InputDecoration _buildInputDecoration({
              required String label,
              required String hint,
              required IconData icon,
              bool isPasswordField = false,
              bool? isValid,
              bool isVisible = false,
              VoidCallback? toggleVisibility,
              String? textValue,
            }) {
              return InputDecoration(
                labelText: label,
                hintText: hint,
                labelStyle: TextStyle(
                  fontSize: widget.fontSize,
                  fontWeight: widget.fontWeight,
                  color: Colors.black,
                ),
                prefixIcon: Padding(
                  padding: const EdgeInsets.only(left: 12, right: 8),
                  child: Icon(icon, size: 24, color: Colors.black54),
                ),
                filled: true,
                fillColor: Colors.white,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: const BorderSide(color: Colors.grey),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: const BorderSide(color: Colors.black, width: 1),
                ),
                suffixIcon: textValue == null || textValue.isEmpty
                    ? null
                    : Padding(
                        padding: const EdgeInsets.only(right: 12),
                        child: IconButton(
                          icon: Icon(
                            isVisible ? Icons.visibility : Icons.visibility_off,
                            color: Colors.black54,
                          ),
                          onPressed: toggleVisibility,
                        )),
              );
            }
            @override
            Widget build(BuildContext context) {

              bool passwordsMatch = _password.isNotEmpty && _password == _confirmPassword;
              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildPasswordField(),
                  const SizedBox(height: 16),
                  _buildConfirmPasswordField(passwordsMatch),
                  SizedBox(height: 8),
                  SizedBox(
                      height: 30,
                      child: Center(
                        child: Text(
                          (!passwordsMatch && _confirmPassword.isNotEmpty)
                              ? "     As senhas n√£o coincidem"
                              : "",
                          style: const TextStyle(
                              color: Colors.red, fontWeight: FontWeight.w500),
                        ),
                      ))
                ],
              );
            }
          }
        payment_form_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter_stripe/flutter_stripe.dart';
          import 'package:flutter_svg/svg.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/financial_provider.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class PaymentFormComponent extends StatefulWidget {
            final double selectedAmount;
            final Function(String) onAcceptingPurchase;
            const PaymentFormComponent({
              super.key,
              required this.selectedAmount,
              required this.onAcceptingPurchase,
            });
            @override
            _PaymentFormComponentState createState() => _PaymentFormComponentState();
          }
          class _PaymentFormComponentState extends State<PaymentFormComponent> {
            final PageController _pageController = PageController(viewportFraction: 0.9);
            final controller = CardFormEditController();
            bool postalCodeEnabled = false;
            bool _isChecked = false;
            int _currentPage = 0;
            double get totalPrice => widget.selectedAmount * 1.0;
            Widget _buildPageItem(Widget child) {

              return Container(
                width: MediaQuery.of(context).size.width * 0.8,
                padding: EdgeInsets.zero,
                margin: const EdgeInsets.symmetric(horizontal: 0),
                child: child,
              );
            }
            Widget _buildPaymentItem04(BuildContext context) {

              final financialProvider = Provider.of<FinancialProvider>(context, listen: false);
              return _buildItemContainer(
                imageAsset: 'assets/images/theme/default-icon/stripe.svg',
                title: "Check Out",
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      _buildSummaryRow('assets/images/theme/default-icon/clean_image.png',
                          "Quantidade:  ", "${widget.selectedAmount.toInt()} Xii\$"),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      _buildSummaryRow('assets/images/theme/default-icon/clean_image.png',
                          "Total Pago:  ", "\$${(totalPrice * 0.25).toStringAsFixed(2)}",
                          color: Colors.black),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Checkbox(
                        value: financialProvider.isFormDisabled ? true : _isChecked,
                        onChanged: (value) {
                          financialProvider.setSelectedAgree(value!);
                          financialProvider.validateForm();
                          setState(() {

                            _isChecked = value ?? false;
                          });
                        },
                      ),
                      Expanded(
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Expanded(child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                UIHelper.buildText(
                                  context,
                                  "Confirmar",
                                  style: AppTextStylesWidget.title,
                                  color: Colors.black,
                                ),
                                SizedBox(height: 4),
                                UIHelper.buildText(
                                  context,
                                  "Compra de ${widget.selectedAmount.toInt()} un.",
                                  style: AppTextStylesWidget.body,
                                  color: Colors.black,
                                ),
                                SizedBox(height: 4),
                                UIHelper.buildText(
                                  context,
                                  "\$ ${(totalPrice * 0.25).toStringAsFixed(2)}",
                                  style: AppTextStylesWidget.body,
                                  color: Colors.black,
                                )
                              ],
                            ),
                          ),
                          Expanded(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.end,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: [
                                UIHelper.buildText(
                                  context,
                                  "",
                                  style: AppTextStylesWidget.title,
                                  color: Colors.black,
                                ),
                                SizedBox(height: 4),
                                UIHelper.buildText(
                                  context,
                                  "Xii\$ √† \$0.25*",
                                  style: AppTextStylesWidget.body,
                                  color: Colors.black,
                                ),
                                SizedBox(height: 4),
                                UIHelper.buildText(
                                  context,
                                  "",
                                  style: AppTextStylesWidget.body,
                                  color: Colors.black,
                                )
                              ],
                            ),
                          )
                        ],
                      ))
                    ],
                  ),
                  const SizedBox(height: 16),
                ],
              );
            }
            Widget _buildPaymentItem05() {

              return _buildItemContainer(
                imageAsset: 'assets/images/theme/default-icon/coins.png',
                title: "Status",
                children: [
                  CardFormField(
                    controller: controller,
                    countryCode: 'US',
                    style: CardFormStyle(
                      borderColor: Colors.blueGrey,
                      textColor: Colors.black,
                      placeholderColor: Colors.blue,
                      fontSize: 22
                    ),
                  ),
                ],
              );
            }
            Widget _buildSummaryRow(String imageAsset, String label, String value,
                {Color color = Colors.black}) {
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 4),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Image.asset(imageAsset, width: 22, height: 22),
                    SizedBox(width: 10),
                    UIHelper.buildText(context, label,
                        style: AppTextStylesWidget.title, color: Colors.black),
                    UIHelper.buildText(context, value,
                        style: AppTextStylesWidget.title, color: color),
                  ],
                ),
              );
            }
            Widget _buildItemContainer(
                {required String imageAsset,
                required String title,
                required List<Widget> children}) {
              return Container(
                width: MediaQuery.of(context).size.width * 0.6,
                padding: const EdgeInsets.symmetric(horizontal: 0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        SvgPicture.asset(
                          imageAsset,
                          height: 48, width: 48,
                        ),
                        SizedBox(width: 10),
                        UIHelper.buildText(context, title,
                            style: AppTextStylesWidget.title, color: Colors.black),
                      ],
                    ),
                    const SizedBox(height: 12),
                    ...children,
                  ],
                ),
              );
            }
            void update() => setState(() {

            });
            @override
            void dispose() {

              controller.removeListener(update);
              controller.dispose();
              super.dispose();
            }
            @override
            void initState() {

              controller.addListener(update);
              super.initState();
              _pageController.addListener(() {
                int newPage = _pageController.page?.round() ?? 0;
                if (_currentPage != newPage) {

                  setState(() {

                    _currentPage = newPage;
                  });
                }
              });
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  _buildPageItem(_buildPaymentItem04(context)),
                ],
              );
            }
          }
        profile_header_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/foundation.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/data/dio_client_service.dart';
          import 'package:xiis/presentation/providers/entrance_provider.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/sections/components/about_me_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_modal_widget.dart';
          import 'package:xiis/presentation/sections/widgets/invite_badge_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ProfileHeaderComponent extends StatefulWidget {
            final Map<String, dynamic> profileContent;
            const ProfileHeaderComponent({
              super.key,
              required this.profileContent,
            });
            @override
            State<ProfileHeaderComponent> createState() => _ProfileHeaderComponentState();
          }
          class _ProfileHeaderComponentState extends State<ProfileHeaderComponent> with TickerProviderStateMixin {
            late bool isProfileRelationship;
            bool showInviteBadge = true;
            late final AnimationController _badgeAnimationController;
            late final Animation<double> _fadeAnimation;
            @override
            void initState() {

              super.initState();
              isProfileRelationship = true;
              _badgeAnimationController = AnimationController(
                duration: const Duration(milliseconds: 150),
                vsync: this,
              );
              _fadeAnimation = CurvedAnimation(
                parent: _badgeAnimationController,
                curve: Curves.easeIn,
              );
              if (showInviteBadge) {

                _badgeAnimationController.forward();
              }
            }
            @override
            void didUpdateWidget(covariant ProfileHeaderComponent oldWidget) {

              super.didUpdateWidget(oldWidget);
              if (oldWidget.profileContent['is_added'] != widget.profileContent['is_added']) {

                setState(() {

                  isProfileRelationship = widget.profileContent['is_added'] ?? false;
                });
              }
            }
            @override
            void dispose() {

              _badgeAnimationController.dispose();
              super.dispose();
            }
            bool get isCurrentUser {
              final EntranceProvider entranceProvider = Provider.of<EntranceProvider>(context, listen: false);
              final myId = entranceProvider.profile['id'];
              final profileId = widget.profileContent['id'];
              return myId == profileId;
            }
            void _handleFollowButtonPress() async {
              final relationshipStatus = widget.profileContent['relationship']?['status'];
              final relationshipType = widget.profileContent['relationship']?['type'];
              final ProfileProvider profileProvider = Provider.of<ProfileProvider>(context, listen: false);
              if (isCurrentUser) return;
              final wasFollowing = isProfileRelationship;
              var editRelationship = profileProvider.editRelationship(
                  isRelationship: relationshipStatus,
                  followingProfile: widget.profileContent['id']
              );
              setState(() {

                isProfileRelationship = !isProfileRelationship;
                showInviteBadge = false;
              });
              _badgeAnimationController.reset();
              await Future.delayed(const Duration(milliseconds: 300));
              if (isProfileRelationship) {

                setState(() => showInviteBadge = true);
                _badgeAnimationController.forward();
              }
              final message = wasFollowing ? 'Conex√£o removida' : 'Convite enviado';
              final icon = wasFollowing ? Icons.cancel_outlined : Icons.check_circle;
              final color = wasFollowing ? Colors.red : Colors.green;
              GenericModalWidget.show(
                context: context,
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 32),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(icon, color: color, size: 48),
                      const SizedBox(height: 16),
                      UIHelper.buildText(
                        context,
                        message,
                        style: AppTextStylesWidget.headerViewUp,
                        color: Colors.black,
                      ),
                    ],
                  ),
                ),
              );
            }
            @override
            Widget build(BuildContext context) {

              if (kDebugMode) {

                debugPrint(widget.profileContent['relationship']?['type']);
                debugPrint('${widget.profileContent}');
              }
              return InkWell(
                onTap: () {
                  showModalBottomSheet(
                    context: context,
                    isScrollControlled: true,
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                    ),
                    builder: (context) => AboutMeComponent(profile: widget.profileContent),
                  );
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 16),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      _buildAvatar(),
                      const SizedBox(width: 16),
                      Expanded(child: _buildNameRow(context)),
                    ],
                  ),
                ),
              );
            }
            Widget _buildAvatar() {

              final avatarUrl = widget.profileContent['avatar_url'] as String?;
              final fullAvatar = avatarUrl != null ? '${DioClientService.baseUrl}$avatarUrl' : null;
              return Container(
                padding: const EdgeInsets.all(4),
                decoration: BoxDecoration(
                  color: Colors.white,
                  border: Border.all(color: Colors.grey, width: 1),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(8),
                    topRight: Radius.circular(50),
                    bottomLeft: Radius.circular(50),
                    bottomRight: Radius.circular(50),
                  ),
                ),
                child: CircleAvatar(
                  radius: 20,
                  backgroundColor: Colors.grey[300],
                  backgroundImage: (fullAvatar != null && fullAvatar.isNotEmpty) ? NetworkImage(fullAvatar) : null,
                  child: (fullAvatar == null || fullAvatar.isEmpty)
                      ? const Icon(Icons.person, size: 32, color: Colors.white)
                      : null,
                ),
              );
            }
            Widget _buildNameRow(BuildContext context) {

              final name = widget.profileContent['name'] ?? '';
              final location = widget.profileContent['location']?.toString().trim() ?? '';
              return Stack(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Flexible(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Image.asset('assets/images/theme/default-icon/registered_user.png', width: 16, height: 16),
                                const SizedBox(width: 8),
                                Flexible(
                                  child: UIHelper.buildText(
                                    context,
                                    name,
                                    style: AppTextStylesWidget.headerViewUp,
                                    color: UIHelper.blackBlueColor,
                                    weight: FontWeight.w700,
                                  ),
                                ),
                                const SizedBox(width: 10),
                                if (showInviteBadge && _getBadgeText() != 'none')
                                  InviteBadgeWidget(
                                    animation: _fadeAnimation,
                                    status: _getBadgeText(),
                                  )
                              ],
                            ),
                            Row(
                              children: [
                                Image.asset(
                                  'assets/images/theme/default-icon/pin_location.png',
                                  width: 14,
                                  height: 14,
                                ),
                                const SizedBox(width: 8),
                                Flexible(
                                  child: UIHelper.buildText(
                                    context,
                                    location,
                                    style: AppTextStylesWidget.body,
                                    color: UIHelper.black37BlueColor,
                                    weight: FontWeight.w700,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(width: 8),
                      _buildFollowButton(),
                    ],
                  ),
                ],
              );
            }
            Widget _buildFollowButton() {

              final relationshipType = widget.profileContent['relationship']?['type'];
              final relationshipStatus = widget.profileContent['relationship']?['status'];
              return Align(
                alignment: Alignment.centerLeft,
                child: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 300),
                  transitionBuilder: (child, animation) =>
                      ScaleTransition(scale: animation, child: child),
                  child: ElevatedButton(
                    key: ValueKey('follow-button-$isProfileRelationship'),
                    onPressed: _handleFollowButtonPress,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: UIHelper.backgroundColor,
                      shape: const CircleBorder(),
                      padding: const EdgeInsets.all(12),
                      elevation: 0,
                    ),
                    child: Icon(
                      isProfileRelationship
                          ? Icons.person_remove
                          : Icons.person_add,
                      color: isProfileRelationship
                          ? UIHelper.secondaryColor
                          : UIHelper.infoColor,
                      size: 18,
                    ),
                  ),
                  /*[:memory] child: (true)
                      ? ElevatedButton(
                          key: ValueKey('follow-button-$isProfileRelationship'),
                          onPressed: _handleFollowButtonPress,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: UIHelper.backgroundColor,
                            shape: const CircleBorder(),
                            padding: const EdgeInsets.all(12),
                            elevation: 0,
                          ),
                          child: Icon(
                            isProfileRelationship
                                ? Icons.person_remove
                                : Icons.person_add,
                            color: isProfileRelationship
                                ? UIHelper.secondaryColor
                                : UIHelper.infoColor,
                            size: 18,
                          ),
                        )
                      : const SizedBox.shrink(),*/
                ),
              );
            }
            String _getBadgeText() {

              final relationshipType = widget.profileContent['relationship']?['type'];
              switch (relationshipType) {

                case 'pending':
                  return 'solicita√ß√£o enviada';
                case 'following':
                  return 'seguindo';
                case 'requested_back':
                  return 'aguardando retorno';
                default:
                  return relationshipType ?? 'none';
              }
            }
          }
        savings_card_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/credit_coin_purchase_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_bottom_sheet_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class SavingsCardComponent extends StatelessWidget {
            final String profileImageUrl;
            final double totalSavings;
            final double withdrawalAmount;
            const SavingsCardComponent({
              super.key,
              required this.profileImageUrl,
              required this.totalSavings,
              required this.withdrawalAmount,
            });
            @override
            Widget build(BuildContext context) {

              return Padding(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                  child: Card(
                    color: Color(0xCCF8F7F7),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16.0),
                    ),
                    elevation: 0.9,
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              /*[:memory] CircleAvatar(
                                backgroundImage: NetworkImage(profileImageUrl),
                                radius: 24,
                              ),*/
                              Image.asset('assets/images/theme/default-icon/colored_wallet.png',
                                  height: 30, width: 30)
                            ],
                          ),
                          const SizedBox(height: 16),
                          UIHelper.buildText(context, 'Saldo: Xii\$',
                              style: AppTextStylesWidget.body, color: Colors.black),
                          const SizedBox(height: 8),
                          Row(
                            children: [
                              Image.asset('assets/images/theme/default-icon/coins.png',
                                  height: 30, width: 30),
                              const SizedBox(height: 10),
                              Text(
                                '${context.watch<RewardProvider>().balance}',
                                style: const TextStyle(
                                  fontSize: 32,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              ElevatedButton.icon(
                                onPressed: () {
                                  GenericBottomSheetWidget.show(
                                      content: CreditCoinPurchaseComponent(
                                        key: UniqueKey(),
                                      ),
                                      context: context,
                                      title: ''
                                  );
                                },
                                icon: const Icon(Icons.arrow_upward),
                                label: UIHelper.buildText(context, 'Comprar', style: AppTextStylesWidget.body, color: Colors.black),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.white,
                                  foregroundColor: Colors.black,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(8.0),
                                  ),
                                ),
                              ),
                              UIHelper.buildText(
                                  context, '+ ${withdrawalAmount.toStringAsFixed(2)}%',
                                  style: AppTextStylesWidget.body, color: Colors.black),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ));
            }
          }
        scrollable_content_rewards_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:intl/intl.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ScrollableContentRewardsComponent extends StatelessWidget {
            final List<dynamic> invoices;
            const ScrollableContentRewardsComponent({super.key, required this.invoices});
            String formatDate(String? isoDate) {

              if (isoDate == null) return 'Date unavailable';
              try {
                final dateTime = DateTime.parse(isoDate);
                return DateFormat('MMM dd').format(dateTime);
              } catch (e) {
                return 'Invalid date';
              }
            }
            @override
            Widget build(BuildContext context) {

              if (invoices.isEmpty) {

                return const Center(
                  child: Padding(
                    padding: EdgeInsets.all(32),
                    child: Text('Nenhum item encontrado.'),
                  ),
                );
              }
              return Container(
                color: UIHelper.backgroundColor,
                child: ListView.separated(
                  padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 0),
                  itemCount: invoices.length,
                  separatorBuilder: (_, __) => Divider(height: 2),
                  itemBuilder: (context, index) {
                    final invoice = invoices[index];
                    return Card(
                      color: Colors.transparent,
                      shadowColor: Colors.transparent,
                      margin: const EdgeInsets.all(0),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(0)),
                      elevation: 3,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Row(
                                  children: [
                                    UIHelper.buildText(
                                      context,
                                      color: UIHelper.blackBlueColor,
                                      '${invoice['amount']}',
                                      style: AppTextStylesWidget.body,
                                      weight: FontWeight.bold
                                    ),
                                    const SizedBox(width: 8),
                                    Container(
                                      decoration: const BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: Color(0xFFFFD180),
                                      ),
                                      padding: const EdgeInsets.all(2),
                                      child: const Icon(
                                        Icons.attach_money,
                                        color: Colors.brown,
                                        size: 10,
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(width: 10),
                                UIHelper.buildText(
                                  context,
                                  color: UIHelper.blackBlueColor,
                                  '${invoice['description']}, on ',
                                  style: AppTextStylesWidget.body,
                                ),
                                const SizedBox(height: 4),
                                UIHelper.buildText(
                                  context,
                                  color: UIHelper.blackBlueColor,
                                  invoice['created_at'] != null ? formatDate(invoice['created_at']) : '',
                                  style: AppTextStylesWidget.body,
                                ),
                              ],
                            ),
                            Row(
                              children: [
                                UIHelper.buildText(context, '${invoice['uik']}',
                                    style: AppTextStylesWidget.smallKey,
                                    color: UIHelper.blackBlueColor,
                                    weight: FontWeight.normal),
                              ],
                            )
                          ],
                        ),
                      ),
                    );
                  },
                ),
              );
            }
          }
        scrollable_contents_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/providers/financial_provider.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/content_invoice_component.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ScrollableContentsComponent extends StatefulWidget {
            const ScrollableContentsComponent({super.key});
            @override
            _ScrollableContentsComponentState createState() => _ScrollableContentsComponentState();
          }
          class _ScrollableContentsComponentState extends State<ScrollableContentsComponent> {
            final ScrollController _scrollController = ScrollController();
            late final _pagingController = PagingController<int, Map<String, dynamic>>(
              getNextPageKey: (state) {
                final loadedItems = state.items;
                if (state.hasNextPage == false) return null;
                return (loadedItems?.length ?? 0) ~/ 10 + 1;
              },
              fetchPage: (page) async {
                final FinancialProvider financialProvider = Provider.of<FinancialProvider>(context, listen: false);
                await financialProvider.loadProfileInvoices(page: page);
                const int itemsPerPage = 10;
                try {
                  final loadedIds = _loadedIds();
                  final allItems = financialProvider.profileInvoices;
                  final newItems = allItems.where(
                          (item) => !loadedIds.contains(item['id'])
                  ).toList();
                  final isLastPage = newItems.length < itemsPerPage || !financialProvider.hasMoreData;
                  _addAppendLastPage(page, isLastPage, newItems);
                  return newItems;
                } catch (error) {
                  throw Exception('Erro ao buscar p√°gina $page: $error');
                }
              },
            );
            Set<dynamic> _loadedIds() {

              return _pagingController.items?.map((item) => item['id']).toSet() ?? {};
            }
            void _addAppendLastPage(int pageKey, bool isLast, List<Map<String, dynamic>> newItems, ) {

              PagingState<int, Map<String, dynamic>> state = _pagingController.value;
              _pagingController.value = _pagingController.value.copyWith(
                hasNextPage: !isLast,
                isLoading: false,
              );
            }
            @override
            void initState() {

              super.initState();
            }
            @override
            void dispose() {

              _scrollController.dispose();
              _pagingController.dispose();
              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  SizedBox(height: 8),
                  Expanded(
                    child: Stack(
                      children: [
                        PagingListener(
                          controller: _pagingController,
                          builder: (context, state, fetchNextPage) => Stack(
                            children: [
                              PagedListView<int, Map<String, dynamic>>(
                                state: state,
                                fetchNextPage: fetchNextPage,
                                padding: const EdgeInsets.all(0),
                                builderDelegate: PagedChildBuilderDelegate<Map<String, dynamic>>(
                                    animateTransitions: true,
                                    transitionDuration: const Duration(milliseconds: 300),
                                    firstPageProgressIndicatorBuilder: (_) => const Center(
                                      child: CircularProgressIndicator(),
                                    ),
                                    newPageProgressIndicatorBuilder: (_) => const Padding(
                                      padding: EdgeInsets.all(8.0),
                                      child: Center(
                                        child: CircularProgressIndicator(),
                                      ),
                                    ),
                                    firstPageErrorIndicatorBuilder: (_) => Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        const Text('Erro ao carregar a primeira p√°gina.'),
                                        ElevatedButton(
                                          onPressed: () => _pagingController.refresh(),
                                          child: const Text('Tentar novamente'),
                                        ),
                                      ],
                                    ),
                                    newPageErrorIndicatorBuilder: (_) => Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        const Text('Erro ao carregar nova p√°gina.'),
                                        ElevatedButton(
                                          onPressed: () => _pagingController.refresh(),
                                          child: const Text('Tentar novamente'),
                                        ),
                                      ],
                                    ),
                                    noItemsFoundIndicatorBuilder: (_) => const Center(
                                      child: Text('Nenhum item encontrado.'),
                                    ),
                                    noMoreItemsIndicatorBuilder: (_) => const Padding(
                                      padding: EdgeInsets.symmetric(horizontal: 32, vertical: 32),
                                      child: Center(
                                        child: Text('Sem mais √≠tens para carregar.'),
                                      ),
                                    ),
                                    itemBuilder: (context, item, index) => ContentInvoiceComponent(invoice: item)
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              );
            }
          }
        show_auction_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/components/count_down_timer_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/comment_card_widget.dart';
          import 'package:xiis/presentation/sections/widgets/content_bid_form_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_bottom_sheet_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_image_widget.dart';
          import 'package:xiis/presentation/sections/widgets/image_list_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ShowAuctionComponent extends StatelessWidget {
            final int id;
            const ShowAuctionComponent({required this.id, super.key});
            AppBar _buildAppBar(BuildContext context) {

              return AppBar(
                backgroundColor: Colors.white,
                title: Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Icon(Icons.timelapse, size: 22),
                    SizedBox(width: 8),
                    CountDownTimerComponent()
                  ],
                ),
                centerTitle: true,
                leading: IconButton(
                  icon: const Icon(Icons.arrow_back),
                  onPressed: () => Navigator.pop(context),
                ),
              );
            }
            Widget _buildAuctionDetails(BuildContext context) {

              return Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildAuctionUserInfo(context),
                    SizedBox(height: 16),
                    _buildAuctionDescription(context),
                    SizedBox(height: 16),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                          decoration: BoxDecoration(
                            color: Colors.white70,
                            borderRadius: BorderRadius.circular(10),
                            border: Border.all(color: Colors.grey, width: 1),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.2),
                                spreadRadius: 1,
                                blurRadius: 5,
                                offset: Offset(0, 2),
                              ),
                            ],
                          ),
                          child: Row(
                            children: [
                              CircleAvatar(
                                backgroundImage: GenericImageWidget(imagePath: 'assets/images/theme/development-image/mocked_image_04.png').getImageProvider(),
                                radius: 20,
                              ),
                              SizedBox(width: 10),
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  UIHelper.buildText(context, '200 Xii\$',
                                      style: AppTextStylesWidget.small,
                                      color: Colors.black,
                                      weight: FontWeight.normal),
                                  UIHelper.buildText(context, '2 hr 30 min',
                                      style: AppTextStylesWidget.small,
                                      color: Colors.black54,
                                      weight: FontWeight.normal),
                                ],
                              ),
                            ],
                          ),
                        ),
                        SizedBox(width: 24),
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white70,
                            borderRadius: BorderRadius.circular(10),
                            border: Border.all(color: Colors.grey, width: 0.9),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.2),
                                spreadRadius: 1, blurRadius: 5,
                                offset: Offset(0, 2),
                              ),
                            ],
                          ),
                          child: ElevatedButton(
                            onPressed: () {
                              GenericBottomSheetWidget.show(
                                context: context, title: "",
                                content: ContentBidFormWidget(onBidSubmit: (double bid) {
                                }),
                              );
                            },
                            style: ElevatedButton.styleFrom(
                              elevation: 0,
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 32, vertical: 12
                              ),
                              shape: RoundedRectangleBorder(
                                borderRadius: const BorderRadius.only(
                                  topLeft: Radius.circular(8),
                                  topRight: Radius.circular(8),
                                  bottomLeft: Radius.circular(8),
                                  bottomRight: Radius.circular(8),
                                ),
                                side: const BorderSide(color: Colors.grey, width: 0.3),
                              ),
                              backgroundColor: Colors.white,
                              foregroundColor: Colors.grey,
                            ),
                            child: Row(
                              children: [
                                Image.asset('assets/images/theme/default-icon/bid.png', width: 32, height: 32),
                                SizedBox(width: 16),
                                UIHelper.buildText(
                                  context,
                                  "Bid",
                                  style: AppTextStylesWidget.body,
                                  color: Colors.blueGrey,
                                  weight: FontWeight.w600,
                                ),
                              ],
                            )
                          ),
                        )
                      ],
                    )
                  ],
                ),
              );
            }
            Widget _buildAuctionUserInfo(BuildContext context) {

              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  UIHelper.buildText(
                    context,
                    "Jenny Wilson",
                    style: AppTextStylesWidget.body,
                    color: Colors.blueGrey,
                    weight: FontWeight.w600,
                  ),
                  UIHelper.buildText(context, "#fashion #yellow #photoshop",
                      style: AppTextStylesWidget.body,
                      color: Colors.blue,
                      weight: FontWeight.w600),
                ],
              );
            }
            Widget _buildAuctionDescription(BuildContext context) {

              return UIHelper.buildText(
                context,
                '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking.',
                style: AppTextStylesWidget.body,
                color: Colors.black,
              );
            }
            Widget _buildCommentList(BuildContext context, List<Map<String, String?>> comments) {

              if (comments.isEmpty) {

                return UIHelper.buildText(
                  context,
                  'No comments available',
                  style: AppTextStylesWidget.body,
                  color: Colors.black,
                  weight: FontWeight.w600,
                );
              }
              return Padding(
                  padding: EdgeInsets.only(top: 16, bottom: 16),
                  child: ListView.separated(
                    padding: EdgeInsets.all(0),
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: comments.length,
                    separatorBuilder: (context, index) =>
                        Padding(padding: EdgeInsets.only(top: 0, bottom: 0)),
                    itemBuilder: (context, index) {
                      final comment = comments[index];
                      final profileImage = comment['imageProfile'] ?? 'assets/images/default-profile-one.png';
                      final userName = comment['userName'] ?? 'Unknown User';
                      final createdAt = comment['createdAt'] ?? 'Unknown date';
                      final commentBody = comment['commentBody'] ?? 'No comment provided.';
                      return CommentCardWidget(
                          id: id,
                          profileImage: profileImage,
                          userName: userName,
                          createdAt: createdAt,
                          commentBody: commentBody
                      );
                    },
                  ));
            }
            @override
            Widget build(BuildContext context) {

              return Scaffold(
                backgroundColor: Colors.white,
                appBar: _buildAppBar(context),
                body: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                  child: SingleChildScrollView(
                    padding: EdgeInsets.zero,
                    child: Column(
                      children: [
                        LayoutBuilder(
                          builder: (context, constraints) {
                            return ImageListWidget(
                              images: [
                                {
                                  'path': 'assets/images/theme/development-image/mocked_image_01.png',
                                  'cover': true
                                }
                              ], applyBlur: true, applyObfuscate: false,
                            );
                          },
                        ),
                        _buildAuctionDetails(context),
                        _buildCommentList(context, [
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                          {
                            'imageProfile': 'assets/images/user1.png',
                            'userName': 'Alice Johnson',
                            'createdAt': 'Jan 15, 2025',
                            'commentBody':
                            '    This artwork is absolutely stunning! The colors, textures, and details are breathtaking. I can‚Äôt stop admiring it. Truly a masterpiece that evokes deep emotions and thoughts.'
                          },
                        ]),
                      ],
                    )
                  ),
                ),
              );
            }
          }
        show_edit_date_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:intl/intl.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ShowEditDateComponent extends StatefulWidget {
            final DateTime? initialDate;
            final ValueChanged<DateTime>? onDateChanged;
            const ShowEditDateComponent({
              super.key,
              this.initialDate,
              this.onDateChanged,
            });
            @override
            State<ShowEditDateComponent> createState() => _ShowEditDateComponentState();
          }
          class _ShowEditDateComponentState extends State<ShowEditDateComponent> {
            bool _isEditing = false;
            late DateTime _selectedDate;
            @override
            void initState() {

              super.initState();
              _selectedDate = widget.initialDate ?? DateTime.now();
            }
            Future<void> _handleDateEdit() async {
              if (_isEditing) {

                widget.onDateChanged?.call(_selectedDate);
              } else {
                final DateTime? picked = await showDatePicker(
                  context: context,
                  initialDate: _selectedDate,
                  firstDate: DateTime(1900),
                  lastDate: DateTime(2100),
                );
                if (picked != null) {

                  setState(() => _selectedDate = picked);
                }
              }
              setState(() => _isEditing = !_isEditing);
            }
            @override
            Widget build(BuildContext context) {

              final formatted = DateFormat('dd/MM/yyyy').format(_selectedDate);
              return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      const Icon(Icons.calendar_month),
                      const SizedBox(width: 10),
                      UIHelper.buildText(
                        context,
                        formatted,
                        style: AppTextStylesWidget.headerViewUp,
                        color: Colors.black,
                        weight: FontWeight.normal,
                      ),
                    ],
                  ),
                  IconButton(
                    icon: Icon(
                      _isEditing ? Icons.check : Icons.edit,
                      size: 20,
                      color: _isEditing ? Colors.green : Colors.grey,
                    ),
                    onPressed: _handleDateEdit,
                    tooltip: _isEditing ? 'Salvar' : 'Editar data',
                  ),
                ],
              );
            }
          }
        show_open_comment_component.dart: |
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/add_comment_widget.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ShowOpenCommentComponent extends StatefulWidget {
            final Map<String, dynamic> commentBody;
            const ShowOpenCommentComponent({super.key, required this.commentBody});
            @override
            _ShowOpenCommentComponentState createState() =>
                _ShowOpenCommentComponentState();
          }
          class _ShowOpenCommentComponentState extends State<ShowOpenCommentComponent> {
            bool _hideComment = false;
            bool _blockUser = false;
            String selectedValue = 'Option 1';
            String? avatarUrl;
            String? commentBody;
            String? commentAuthor;
            bool isLoading = true;
            @override
            void initState() {

              super.initState();
              _fetchCommentDetails();
              avatarUrl = widget.commentBody['avatarUrl'];
              /*[:memory] final ImageProvider imageProvider = (true
                  ? NetworkImage(widget.commentBody['imageUrl'])
                  : const AssetImage('assets/images/default_profile.png'));
                  */
            }
            Future<void> _fetchCommentDetails() async {
              await Future.delayed(const Duration(seconds: 1));
              setState(() {

                commentBody = widget.commentBody['body'];
                commentAuthor = widget.commentBody['author'];
                isLoading = false;
              });
            }
            Widget _buildHeader(BuildContext context) {

              return Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  const Icon(Icons.comment_outlined),
                  const SizedBox(width: 16),
                  UIHelper.buildText(
                    context,
                    'Coment√°rio #${widget.commentBody['id']}',
                    style: AppTextStylesWidget.body,
                    color: Colors.black,
                  ),
                  const Spacer(),
                  IconButton(
                    padding: EdgeInsets.zero,
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              );
            }
            Widget _buildDropdown() {

              return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('Select an Option', style: Theme.of(context).textTheme.bodyLarge),
                  DropdownButton<String>(
                    value: selectedValue,
                    onChanged: (String? newValue) {
                      if (newValue != null) {

                        setState(() => selectedValue = newValue);
                      }
                    },
                    icon: const Icon(Icons.arrow_drop_down, color: Colors.blue, size: 24),
                    items: ['Option 1', 'Option 2', 'Option 3']
                        .map((value) => DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    ))
                        .toList(),
                  ),
                ],
              );
            }
            Widget _buildSwitchRow(
                String label, String image, bool value, ValueChanged<bool> onChanged) {
              return Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  UIHelper.buildText(
                      context, label, style: AppTextStylesWidget.headerViewUp,
                      color: UIHelper.blackBlueColor
                  ),
                  SizedBox(width: 8),
                  Switch(
                    padding: EdgeInsets.zero,
                    value: value,
                    onChanged: null,
                  ),
                  SizedBox(width: 8),
                  Image.asset(image, width: 18, height: 18, color: Colors.grey[600]),
                ],
              );
            }
            @override
            Widget build(BuildContext context) {

              return isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : _buildLoaded();
            }
            Widget _buildLoaded() {

              return Padding(
                padding: EdgeInsets.symmetric(horizontal: 0),
                child: Wrap(
                  children: [
                    Padding(padding: EdgeInsets.symmetric(horizontal: 16), child: _buildToggleSection()),
                    const SizedBox(height: 32),
                    Padding(padding: EdgeInsets.symmetric(horizontal: 16), child: _buildCommentInfoSection()),
                    const SizedBox(height: 20),
                    Padding(padding: EdgeInsets.symmetric(horizontal: 0), child: AddCommentWidget(
                      contentId: widget.commentBody['id'],
                      onCommentSubmitted: () {
                      },
                    ))
                  ],
                ),
              );
            }
            Widget _buildToggleSection() {

              final ImageProvider imageProvider = NetworkImage(avatarUrl!);
              return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    children: [
                      const SizedBox(height: 4),
                      Center(
                        child: Container(
                          padding: const EdgeInsets.all(4),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            border:
                            Border.all(color: Colors.grey, width: 1),
                            borderRadius: const BorderRadius.only(
                              topLeft: Radius.circular(8),
                              topRight: Radius.circular(75),
                              bottomLeft: Radius.circular(75),
                              bottomRight: Radius.circular(75),
                            ),
                          ),
                          child: CircleAvatar(
                            radius: 40,
                            backgroundColor: Colors.grey[300],
                            backgroundImage: (imageProvider != null)
                                ? imageProvider : null,
                            child: (avatarUrl == null)
                                ? const Icon(Icons.person,
                                size: 32, color: Colors.white)
                                : null,
                          ),
                        ),
                      ),
                    ],
                  ),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      Row(
                        children: [
                          _buildSwitchRow(
                            'Ocultar coment√°rio', 'assets/images/theme/default-icon/blacklist.png',
                            _hideComment, (value) => setState(() => _hideComment = value),
                          ),
                        ],
                      ),
                      Row(
                        children: [
                          _buildSwitchRow(
                            'Bloquear Perfil', 'assets/images/theme/default-icon/skull.png',
                            _blockUser, (value) => setState(() => _blockUser = value),
                          ),
                        ],
                      )
                    ],
                  )
                ],
              );
              return Column(
                children: [
                  _buildSwitchRow(
                    'Ocultar coment√°rio', 'assets/images/theme/default-icon/blacklist.png',
                    _hideComment, (value) => setState(() => _hideComment = value),
                  ),
                  _buildSwitchRow(
                    'Bloquear remetente', 'assets/images/theme/default-icon/skull.png',
                    _blockUser, (value) => setState(() => _blockUser = value),
                  ),
                ],
              );
            }
            Widget _buildCommentInfoSection() {

              return ExpansionTile(
                showTrailingIcon: true,
                tilePadding: EdgeInsets.zero,
                initiallyExpanded: true,
                shape: const Border(
                  top: BorderSide(color: Colors.transparent),
                  bottom: BorderSide(color: Colors.transparent),
                ),
                collapsedShape: const Border(
                  top: BorderSide(color: Colors.transparent),
                  bottom: BorderSide(color: Colors.transparent),
                ),
                onExpansionChanged: (bool expanded) {},
                title: _buildCommentAuthorTitle(),
                children: _buildCommentBodyChildren(),
              );
            }
            Widget _buildCommentAuthorTitle() {

              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
                child: UIHelper.buildText(
                  context,
                  commentAuthor ?? 'Autor desconhecido',
                  style: AppTextStylesWidget.body,
                  color: UIHelper.blackBlueColor,
                  weight: FontWeight.w700
                ),
              );
            }
            List<Widget> _buildCommentBodyChildren() {

              return [
                Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Flexible(
                      child: UIHelper.buildText(
                        context,
                        "   ${commentBody ?? ''}",
                        style: AppTextStylesWidget.body,
                        color: UIHelper.blackBlueColor,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 10),
              ];
            }
          }
        show_open_content_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/data/comment_model.dart';
          import 'package:xiis/presentation/providers/content_provider.dart';
          import 'package:xiis/presentation/sections/components/count_down_timer_component.dart';
          import 'package:xiis/presentation/sections/components/profile_header_component.dart';
          import 'package:xiis/presentation/sections/widgets/add_comment_widget.dart';
          import 'package:xiis/presentation/sections/widgets/comment_card_widget.dart';
          import 'package:xiis/presentation/views/content_view_component.dart';

          class ShowOpenContentComponent extends StatefulWidget {
            final Map<String, dynamic> bodyContent;
            final Map<String, dynamic> profile;
            const ShowOpenContentComponent({
              super.key,
              required this.bodyContent,
              required this.profile,
            });
            @override
            _ShowOpenContentComponent createState() => _ShowOpenContentComponent();
          }
          class _ShowOpenContentComponent extends State<ShowOpenContentComponent> with TickerProviderStateMixin {
            List<CommentModel> comments = [];
            bool isLoadingComments = true;
            @override
            void initState() {

              super.initState();
              _loadComments();
            }
            @override
            Widget build(BuildContext context) {

              final Map<String, dynamic> bodyContent = widget.bodyContent;
              final Map<String, dynamic> profileContent = widget.profile;
              return Scaffold(
                backgroundColor: Colors.white,
                appBar: _buildAppBar(context),
                body: SingleChildScrollView(
                  padding: const EdgeInsets.only(bottom: 32),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      ProfileHeaderComponent(profileContent: profileContent),
                      ContentViewComponent(contentData: bodyContent),
                      const SizedBox(height: 16),
                      AddCommentWidget(
                        contentId: bodyContent['id'],
                        onCommentSubmitted: _loadComments,
                      ),
                      const SizedBox(height: 16),
                      _buildCommentList(),
                    ],
                  ),
                ),
              );
            }
            AppBar _buildAppBar(BuildContext context) {

              return AppBar(
                backgroundColor: Colors.white,
                title: Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: const [
                    Icon(Icons.timelapse, size: 22),
                    SizedBox(width: 8),
                    CountDownTimerComponent(),
                  ],
                ),
                centerTitle: true,
                leading: IconButton(
                  icon: const Icon(Icons.arrow_back),
                  onPressed: () => Navigator.pop(context),
                ),
              );
            }
            Widget _buildCommentList() {

              if (isLoadingComments) {

                return const Center(child: CircularProgressIndicator());
              }
              if (comments.isEmpty) {

                return const Padding(
                  padding: EdgeInsets.all(16),
                  child: Center(child: Text('Nenhum coment√°rio dispon√≠vel.')),
                );
              }
              return ListView.separated(
                key: ValueKey(comments.length),
                physics: const NeverScrollableScrollPhysics(),
                shrinkWrap: true,
                padding: const EdgeInsets.symmetric(horizontal: 0),
                itemCount: comments.length,
                separatorBuilder: (_, __) => const Divider(height: 0),
                itemBuilder: (context, index) {
                  final comment = comments[index];
                  return CommentCardWidget(
                    id: comment.id,
                    profileImage: comment.imageProfile,
                    userName: comment.userName,
                    createdAt: comment.createdAt,
                    commentBody: comment.commentBody,
                  );
                },
              );
            }
            Future<void> _loadComments() async {
              final loadedComments = await context.read<ContentProvider>()
                  .loadComments(widget.bodyContent['id']);
              setState(() {

                comments = loadedComments;
                isLoadingComments = false;
              });
            }
          }
        submit_button.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/shared_prefs_service.dart';

          class SubmitButton extends StatefulWidget {
            final Future<void> Function() onSubmit;
            final String label;
            final bool isSuccess;
            final bool hasError;
            final Widget? successWidget;
            final Widget? failureWidget;
            final Color? backgroundColor;
            final Color? foregroundColor;
            final Color? successIconColor;
            final Color? errorIconColor;
            final Color? defaultIconColor;
            final VoidCallback? onEnabled;
            final VoidCallback? onSuccess;
            final VoidCallback? onError;
            const SubmitButton({
              super.key,
              required this.onSubmit,
              required this.label,
              required this.isSuccess,
              required this.hasError,
              this.successWidget,
              this.failureWidget,
              this.backgroundColor,
              this.foregroundColor,
              this.successIconColor,
              this.errorIconColor,
              this.defaultIconColor,
              this.onEnabled,
              this.onSuccess,
              this.onError,
            });
            @override
            State<SubmitButton> createState() => _SubmitButtonState();
          }
          class _SubmitButtonState extends State<SubmitButton> {
            bool isLoading = false;
            bool isDisabled = false;
            void handleButtonPress() async {
              setState(() {

                isLoading = true;
                isDisabled = true;
              });
              try {
                await widget.onSubmit();
              } finally {
                setState(() {

                  isLoading = false;
                });
                await Future.delayed(const Duration(seconds: 1));
                setState(() {

                  isDisabled = false;
                });
                if (widget.onEnabled != null) {

                  widget.onEnabled!();
                }
                if (widget.isSuccess && widget.onSuccess != null) {

                  widget.onSuccess!();
                }
                if (widget.hasError && widget.onError != null) {

                  widget.onError!();
                }
              }
            }
            @override
            Widget build(BuildContext context) {

              SharedPrefsService.printSharedPrefs();
              return Align(
                alignment: Alignment.centerRight,
                child: ElevatedButton(
                  onPressed: (isLoading || isDisabled) ? null : handleButtonPress,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: widget.backgroundColor ?? const Color(0xFF741952),
                    foregroundColor: widget.foregroundColor ?? Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      if (isLoading)
                        const SizedBox(
                          width: 16, height: 16,
                          child: CircularProgressIndicator(strokeWidth: 2.0, color: Colors.white),
                        ),
                      if (isLoading) const SizedBox(width: 10),
                      if (!isLoading)
                        Icon(
                          widget.isSuccess ? Icons.check_circle :
                          widget.hasError ? Icons.error : Icons.help_outline,
                          color: widget.isSuccess ? (widget.successIconColor ?? const Color(0xFF94BB68)) :
                          widget.hasError ? (widget.errorIconColor ?? const Color(0xFFF1C15D)) :
                          (widget.defaultIconColor ?? Colors.white),
                          size: 20,
                        ),
                      if (!isLoading) const SizedBox(width: 10),
                      if (!isLoading) widget.isSuccess
                          ? (widget.successWidget ?? const SizedBox.shrink())
                          : (widget.hasError ? (widget.failureWidget ?? const SizedBox.shrink()) : const SizedBox.shrink()),
                      if (!isLoading) const SizedBox(width: 10),
                      Text(
                        isLoading ? "Wait" : widget.label,
                        style: const TextStyle(color: Colors.white, fontSize: 18),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
        suggesting_profile_last_content.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/sections/components/profile_header_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_modal_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
          import 'package:xiis/presentation/views/content_preview_component.dart';

          class SuggestingProfileLastContent extends StatefulWidget {
            final Map<String, dynamic> contentBody;
            final VoidCallback? onOptionSelected;
            const SuggestingProfileLastContent({
              Key? key,
              required this.contentBody,
              this.onOptionSelected,
            }) : super(key: key);
            @override
            State<SuggestingProfileLastContent> createState() => _SuggestingProfileLastContentState();
          }
          class _SuggestingProfileLastContentState extends State<SuggestingProfileLastContent> {
            bool isAdded = false;
            Future<void> toggleContact() async {
              ProfileProvider profileProvider = ProfileProvider();
              await profileProvider.editRelationship(
                  followingProfile: widget.contentBody['id'], isRelationship: widget.contentBody['relationship']['status']
              );
              if (!mounted) return;
              if (profileProvider.newRelationship['status'] == 201) {

                GenericModalWidget.show(
                  context: context,
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 32),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.check_circle, color: Colors.green, size: 48),
                        SizedBox(height: 16),
                        UIHelper.buildText(
                          context,
                          'Convite enviado',
                          style: AppTextStylesWidget.headerViewUp,
                          color: Colors.black,
                        ),
                      ],
                    ),
                  ),
                );
              }
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                    decoration: BoxDecoration(
                      color: Colors.transparent,
                      borderRadius: BorderRadius.circular(0),
                    ),
                    child: ProfileHeaderComponent(
                      profileContent: widget.contentBody
                    ),
                  ),
                  ContentPreviewComponent(contentData: widget.contentBody),
                ],
              );
            }
          }
        suggestion_scrollable_component.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/controllers/home_controller.dart';
          import 'package:xiis/presentation/providers/home_provider.dart';
          import 'package:xiis/presentation/providers/reward_provider.dart';
          import 'package:xiis/presentation/sections/components/suggesting_profile_last_content.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/filter_input_field_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class SuggestionScrollableComponent extends StatefulWidget {
            const SuggestionScrollableComponent({super.key});
            @override
            State<SuggestionScrollableComponent> createState() => _SuggestionScrollableComponentState();
          }
          class _SuggestionScrollableComponentState extends State<SuggestionScrollableComponent> {
            late HomeController controller;
            @override
            void initState() {

              super.initState();
              final homeProvider = context.read<HomeProvider>();
              controller = HomeController(homeProvider);
              controller.loadSuggestions();
            }
            Widget _buildBalanceInfo(BuildContext context) {

              final balance = context.watch<RewardProvider>().balance;
              return Row(
                children: [
                  Semantics(
                    label: 'Reward Coin Icon',
                    child: Tooltip(
                      message: 'Your coin balance',
                      child: Padding(
                        padding: const EdgeInsets.only(top: 2),
                        child: Image.asset(
                          'assets/images/theme/default-icon/coin.png',
                          width: 18,
                          height: 18,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 10),
                  Semantics(
                    label: 'Current balance: $balance coins',
                    child: UIHelper.buildText(
                      context,
                      balance,
                      style: AppTextStylesWidget.headerViewUp,
                      weight: FontWeight.w700,
                      color: UIHelper.blackBlueColor,
                    ),
                  ),
                ],
              );
            }
            @override
            Widget build(BuildContext context) {

              final suggestions = context.watch<HomeProvider>().suggestionsLastContent;
              return AnimatedBuilder(
                animation: controller,
                builder: (context, _) {
                  return Container(
                    color: UIHelper.backgroundColor,
                    child: Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              _buildBalanceInfo(context),
                              const SizedBox(width: 10),
                              Expanded(
                                child: FilterInputFieldWidget(
                                  label: 'filtre os resultado',
                                  hint: 'nome, cidade ou conte√∫do',
                                  onTagsChanged: () {
                                  },
                                ),
                              ),
                            ],
                          ),
                        ),
                        Expanded(
                          child: controller.isLoading
                              ? const Center(child: CircularProgressIndicator())
                              : controller.hasError
                              ? Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                const Text('Erro ao carregar sugest√µes.'),
                                ElevatedButton(
                                  onPressed: controller.loadSuggestions,
                                  child: const Text('Tentar novamente'),
                                ),
                              ],
                            ),
                          )
                              : suggestions.isEmpty
                              ? const Center(
                            child: Padding(
                              padding: EdgeInsets.symmetric(horizontal: 32, vertical: 32),
                              child: Text('Nenhum item encontrado.'),
                            ),
                          )
                              : ListView.builder(
                            padding: EdgeInsets.zero,
                            itemCount: suggestions.length,
                            itemBuilder: (context, index) {
                              final item = suggestions[index];
                              return SuggestingProfileLastContent(contentBody: item);
                            },
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            }
          }
      widgets/:
        add_comment_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/content_provider.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class AddCommentWidget extends StatefulWidget {
            final int contentId;
            final VoidCallback? onCommentSubmitted;
            const AddCommentWidget({
              Key? key,
              required this.contentId,
              this.onCommentSubmitted,
            }) : super(key: key);
            @override
            State<AddCommentWidget> createState() => _AddCommentWidgetState();
          }
          class _AddCommentWidgetState extends State<AddCommentWidget> {
            final TextEditingController _controller = TextEditingController();
            bool _isSubmitting = false;
            bool _isVisible = false;
            Future<void> _submitComment() async {
              if (_isSubmitting) return;
              final contentProvider = context.read<ContentProvider>();
              final text = _controller.text.trim();
              if (text.isEmpty) return;
              setState(() => _isSubmitting = true);
              try {
                await contentProvider.submitComment({
                  'content_id': widget.contentId,
                  'body': text,
                });
                _controller.clear();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Coment√°rio enviado com sucesso!')),
                );
                widget.onCommentSubmitted?.call();
                setState(() => _isVisible = false);
              } catch (_) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Erro ao enviar coment√°rio. Tente novamente.')),
                );
              } finally {
                setState(() => _isSubmitting = false);
              }
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      UIHelper.buildText(
                        context,
                        'adicionar coment√°rio',
                        style: AppTextStylesWidget.body,
                        color: UIHelper.blackBlueColor,
                        weight: FontWeight.w700,
                      ),
                      const SizedBox(width: 10),
                      IconButton(
                        icon: Icon(_isVisible ? Icons.close : Icons.add_comment_outlined, color: UIHelper.blackBlueColor),
                        tooltip: _isVisible ? 'Fechar coment√°rio' : 'Adicionar coment√°rio',
                        onPressed: () => setState(() => _isVisible = !_isVisible),
                      ),
                      if (_isVisible)
                        IconButton(
                          tooltip: 'Enviar coment√°rio',
                          icon: const Icon(Icons.send_rounded),
                          color: UIHelper.blackBlueColor,
                          onPressed: _isSubmitting ? null : _submitComment,
                        ),
                    ],
                  ),
                  AnimatedCrossFade(
                    duration: const Duration(milliseconds: 300),
                    crossFadeState: _isVisible ? CrossFadeState.showFirst : CrossFadeState.showSecond,
                    firstChild: _buildForm(),
                    secondChild: const SizedBox.shrink(),
                  ),
                ],
              );
            }
            Widget _buildForm() {

              return GestureDetector(
                onTap: () => FocusScope.of(context).unfocus(),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: UIHelper.buildTextArea(
                    minLines: 4,
                    maxLines: 7,
                    controller: _controller,
                    fontSize: UIHelper.getFontSize(
                      simulatorIOSSize: 14,
                      simulatorAndroidSize: 14,
                      deviceIOSSize: 17,
                      deviceAndroidSize: 14,
                    ),
                    label: "Adicionar coment√°rio",
                    hint: "Digite seu coment√°rio aqui...",
                    minLength: 1,
                    maxLength: 200,
                    fontWeight: FontWeight.normal,
                    textColor: Colors.black,
                    onChanged: (_) {},
                  ),
                ),
              );
            }
          }
        app_text_styles_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:google_fonts/google_fonts.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class AppTextStylesWidget {
            static TextStyle title(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 12.3,
              simulatorAndroidSize: 14,
              deviceIOSSize: 14.3,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.bold,
            );
            static TextStyle subtitle(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 14,
              simulatorAndroidSize: 12,
              deviceIOSSize: 14.3,
              deviceAndroidSize: 12,
              fontWeight: FontWeight.normal,
            );
            static TextStyle body(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 13,
              simulatorAndroidSize: 14,
              deviceIOSSize: 15,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.w500,
              height: 1.7,
            );
            static TextStyle menuProfileItems(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 13.3,
              simulatorAndroidSize: 14,
              deviceIOSSize: 15.3,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.w500,
              height: 1.7,
            );
            static TextStyle headerViewUp(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 14.3,
              simulatorAndroidSize: 14,
              deviceIOSSize: 16.3,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.w500,
              height: 1.7,
            );
            static TextStyle profileName(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 22,
              simulatorAndroidSize: 14,
              deviceIOSSize: 20,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.w500,
              height: 1.7,
            );
            static TextStyle flagCountry(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 30,
              simulatorAndroidSize: 24,
              deviceIOSSize: 32,
              deviceAndroidSize: 30,
              fontWeight: FontWeight.normal,
              height: 1.5,
            );
            static TextStyle creditCoinTitle(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 18,
              simulatorAndroidSize: 26,
              deviceIOSSize: 20,
              deviceAndroidSize: 18,
              fontWeight: FontWeight.w600,
              height: 1.5,
            );
            static TextStyle creditCoinSubtitle(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 15,
              simulatorAndroidSize: 14,
              deviceIOSSize: 18,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.normal,
              height: 1.5,
            );
            static TextStyle buyCoin(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 15,
              simulatorAndroidSize: 14,
              deviceIOSSize: 18,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.normal,
              height: 1.5,
            );
            static TextStyle placeBid(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 24,
              simulatorAndroidSize: 30,
              deviceIOSSize: 28,
              deviceAndroidSize: 30,
              fontWeight: FontWeight.normal,
              height: 1.5,
            );
            static TextStyle small(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 11.4,
              simulatorAndroidSize: 11,
              deviceIOSSize: 14.3,
              deviceAndroidSize: 11,
              fontWeight: FontWeight.normal,
              height: 1.6,
            );
            static TextStyle smallKey(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 7.5,
              simulatorAndroidSize: 11,
              deviceIOSSize: 9.3,
              deviceAndroidSize: 11,
              fontWeight: FontWeight.normal,
              height: 1.6,
            );
            static TextStyle inputText(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 15,
              simulatorAndroidSize: 14,
              deviceIOSSize: 20,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.normal,
              height: 1.6,
            );
            static TextStyle viewTitle(BuildContext context) => _baseTextStyle(
              context,
              simulatorIOSSize: 15,
              simulatorAndroidSize: 14,
              deviceIOSSize: 24,
              deviceAndroidSize: 14,
              fontWeight: FontWeight.w600,
              height: 1.6,
            );
            static TextStyle _baseTextStyle(
                BuildContext context, {
                  required double simulatorIOSSize,
                  required double simulatorAndroidSize,
                  required double deviceIOSSize,
                  required double deviceAndroidSize,
                  required FontWeight fontWeight,
                  double height = 1.0,
                }) {
              final fontSize = UIHelper.getFontSize(
                simulatorIOSSize: simulatorIOSSize,
                simulatorAndroidSize: simulatorAndroidSize,
                deviceIOSSize: deviceIOSSize,
                deviceAndroidSize: deviceAndroidSize,
              );
              return GoogleFonts.openSans(
                fontSize: fontSize,
                fontWeight: fontWeight,
                color: Colors.black54,
                height: height,
              );
            }
          }
        badge_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class BadgeWidget extends StatelessWidget {
            final String label;
            final Color backgroundColor;
            final Color textColor;
            final EdgeInsetsGeometry padding;
            final double fontSize;
            final BorderRadiusGeometry borderRadius;
            const BadgeWidget({
              super.key,
              required this.label,
              this.backgroundColor = Colors.white,
              this.textColor = Colors.white,
              this.padding = const EdgeInsets.symmetric(horizontal: 16, vertical: 3),
              this.fontSize = 12,
              this.borderRadius = const BorderRadius.all(Radius.circular(8)),
            });
            @override
            Widget build(BuildContext context) {

              return Container(
                padding: padding,
                decoration: BoxDecoration(
                  color: backgroundColor,
                  borderRadius: borderRadius,
                ),
                child: UIHelper.buildText(context, label,
                    style: AppTextStylesWidget.headerViewUp,
                    color: Colors.white,
                    weight: FontWeight.normal),
              );
            }
          }
        close_button_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';

          class CloseButtonWidget extends StatefulWidget {
            const CloseButtonWidget({Key? key}) : super(key: key);
            @override
            _CloseButtonWidgetState createState() => _CloseButtonWidgetState();
          }
          class _CloseButtonWidgetState extends State<CloseButtonWidget> {
            bool isFinished = false;
            void _animateAndClose() async {
              setState(() => isFinished = true);
              await Future.delayed(const Duration(milliseconds: 1000));
              if (mounted) Navigator.pop(context);
            }
            @override
            Widget build(BuildContext context) {

              return Align(
                alignment: Alignment.topRight,
                child: GestureDetector(
                  onTap: _animateAndClose,
                  child: AnimatedSwitcher(
                    duration: const Duration(milliseconds: 150),
                    transitionBuilder: (child, animation) => ScaleTransition(scale: animation, child: child),
                    child: isFinished
                        ? Icon(Icons.check_circle, key: ValueKey<bool>(isFinished), color: Colors.green, size: 28)
                        : Icon(Icons.close, key: ValueKey<bool>(isFinished), color: Colors.black, size: 28),
                  ),
                ),
              );
            }
          }
        comment_card_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/components/show_open_comment_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_bottom_sheet_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class CommentCardWidget extends StatelessWidget {
            final String profileImage;
            final String userName;
            final String createdAt;
            final String commentBody;
            final int id;
            const CommentCardWidget({
              super.key,
              required this.profileImage,
              required this.userName,
              required this.createdAt,
              required this.commentBody,
              required this.id,
            });
            @override
            Widget build(BuildContext context) {

              return InkWell(
                onTap: () {
                  GenericBottomSheetWidget.show(
                      context: context, title: '',
                      content: ShowOpenCommentComponent(
                          commentBody: {
                            "id": id, "avatarUrl": profileImage,
                            "author": userName, "body": commentBody,
                            "createdAt": createdAt
                          }
                      )
                  );
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 16),
                  decoration: BoxDecoration(
                    color: Colors.transparent,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        padding: const EdgeInsets.all(4),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          border: Border.all(
                            color: Colors.grey,
                            width: 1,
                          ),
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(8),
                            topRight: Radius.circular(50),
                            bottomLeft: Radius.circular(50),
                            bottomRight: Radius.circular(50),
                          ),
                        ),
                        child: CircleAvatar(
                          radius: 20,
                          backgroundColor: Colors.grey[300],
                          backgroundImage: (profileImage != null && profileImage.isNotEmpty)
                              ? NetworkImage(profileImage)
                              : null,
                          child: (profileImage == null || profileImage.isEmpty)
                              ? const Icon(Icons.person, size: 32, color: Colors.white)
                              : null,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Expanded(
                                  child: RichText(
                                    text: TextSpan(
                                      children: [
                                        TextSpan(
                                          text: '   $userName',
                                          style: AppTextStylesWidget.body(context).copyWith(
                                            color: UIHelper.blackBlueColor,
                                            fontWeight: FontWeight.bold,
                                            fontSize: 12
                                          ),
                                        ),
                                        TextSpan(
                                          text: ', $commentBody',
                                          style: AppTextStylesWidget.body(context).copyWith(
                                            color: UIHelper.blackBlueColor,
                                            fontWeight: FontWeight.normal,
                                            fontSize: 12),
                                        ),
                                      ],
                                    ),
                                  )
                                ),
                              ],
                            ),
                            const SizedBox(height: 8),
                            Align(
                              alignment: Alignment.centerRight,
                              child: Row(
                                children: [
                                  Icon(Icons.schedule, size: 14, color: UIHelper.blackBlueColor),
                                  SizedBox(width: 8),
                                  UIHelper.buildText(
                                    context,
                                    createdAt,
                                    style: AppTextStylesWidget.body,
                                    color: UIHelper.black37BlueColor,
                                  ),
                                ],
                              )
                            )
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
        confirm_button_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';

          class ConfirmButtonWidget extends StatefulWidget {
            final String label;
            final VoidCallback onPressed;
            final bool isActive;
            final IconData activeIcon;
            final IconData inactiveIcon;
            const ConfirmButtonWidget({
              Key? key,
              required this.label,
              required this.onPressed,
              this.isActive = true,
              this.activeIcon = Icons.check_circle,
              this.inactiveIcon = Icons.cancel,
            }) : super(key: key);
            @override
            State<ConfirmButtonWidget> createState() => _ConfirmButtonWidgetState();
          }
          class _ConfirmButtonWidgetState extends State<ConfirmButtonWidget> with SingleTickerProviderStateMixin {
            late AnimationController _animationController;
            late Animation<double> _scaleAnimation;
            bool _isPressed = false;
            @override
            void initState() {

              super.initState();
              _animationController = AnimationController(
                vsync: this,
                duration: const Duration(milliseconds: 150),
                lowerBound: 0.95,
                upperBound: 1.0,
              );
              _scaleAnimation = Tween<double>(begin: 1.0, end: 0.95).animate(_animationController);
            }
            void _onTapDown(TapDownDetails details) {

              if (widget.isActive) {

                setState(() => _isPressed = true);
                _animationController.forward();
              }
            }
            void _onTapUp(TapUpDetails details) {

              if (widget.isActive) {

                _animationController.reverse().then((_) {
                  setState(() => _isPressed = false);
                  widget.onPressed();
                });
              }
            }
            void _onTapCancel() {

              if (widget.isActive) {

                _animationController.reverse();
                setState(() => _isPressed = false);
              }
            }
            @override
            void dispose() {

              _animationController.dispose();
              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              final bool isPressedAndActive = _isPressed && widget.isActive;
              final Color backgroundColor = isPressedAndActive
                  ? Colors.black
                  : (widget.isActive ? Colors.white : Colors.grey[600]!);
              final Color contentColor = isPressedAndActive
                  ? Colors.white
                  : (widget.isActive ? Colors.black : Colors.white);
              return AnimatedBuilder(
                animation: _scaleAnimation,
                builder: (context, child) {
                  return GestureDetector(
                    onTapDown: _onTapDown,
                    onTapUp: _onTapUp,
                    onTapCancel: _onTapCancel,
                    child: Transform.scale(
                      scale: _scaleAnimation.value,
                      child: SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: widget.isActive ? widget.onPressed : null,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: backgroundColor,
                            foregroundColor: contentColor,
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 24),
                            elevation: widget.isActive && !_isPressed ? 5 : 0,
                            shadowColor: Colors.black.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(25),
                              side: const BorderSide(color: Colors.black, width: 0.5),
                            ),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              AnimatedSwitcher(
                                duration: const Duration(milliseconds: 300),
                                transitionBuilder: (child, animation) =>
                                    ScaleTransition(scale: animation, child: child),
                                child: Icon(
                                  widget.isActive ? widget.activeIcon : widget.inactiveIcon,
                                  key: ValueKey<bool>(widget.isActive),
                                  size: 24,
                                  color: contentColor,
                                ),
                              ),
                              const SizedBox(width: 10),
                              Text(
                                widget.label,
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                  color: contentColor,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  );
                },
              );
            }
          }
        content_bid_form_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/components/color.dart' as Colors;
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/submit_button_hold_place_bid_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentBidFormWidget extends StatefulWidget {
            final double initialBid;
            final double minBid;
            final double maxBid;
            final double bidStep;
            final Function(double) onBidSubmit;
            const ContentBidFormWidget({
              super.key, this.initialBid = 150.0, this.minBid = 0.0,
              this.maxBid = 500.0, this.bidStep = 10.0,
              required this.onBidSubmit,
            });
            @override
            _ContentBidFormWidgetState createState() => _ContentBidFormWidgetState();
          }
          class _ContentBidFormWidgetState extends State<ContentBidFormWidget> {
            late double _currentBid;
            @override
            void initState() {

              super.initState();
              _currentBid = widget.initialBid;
            }
            void _increaseBid() {

              setState(() {

                _currentBid = (_currentBid + widget.bidStep).clamp(widget.minBid, widget.maxBid);
              });
            }
            void _decreaseBid() {

              setState(() {

                _currentBid = (_currentBid - widget.bidStep).clamp(widget.minBid, widget.maxBid);
              });
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  SizedBox(
                    height: 400,
                    child: SingleChildScrollView(
                      padding: const EdgeInsets.symmetric(vertical: 8),
                      child: Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(0),
                        margin: const EdgeInsets.symmetric(horizontal: 0, vertical: 8),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: Colors.white,
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              'Current Bid: \$${_currentBid.toStringAsFixed(2)}',
                              style: const TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 32),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                _buildBidButton(Icons.remove, _decreaseBid),
                                Padding(
                                  padding: const EdgeInsets.symmetric(horizontal: 20),
                                  child: SizedBox(
                                    width: 90,
                                    child: UIHelper.buildText(context, '\$${_currentBid.toStringAsFixed(2)}', style: AppTextStylesWidget.placeBid, color: Colors.black),
                                  ),
                                ),
                                _buildBidButton(Icons.add, _increaseBid),
                              ],
                            ),
                            const SizedBox(height: 16),
                            Slider(
                              value: _currentBid,
                              min: widget.minBid,
                              max: widget.maxBid,
                              divisions: ((widget.maxBid - widget.minBid) ~/ widget.bidStep).toInt(),
                              activeColor: CupertinoColors.activeBlue,
                              onChanged: (value) {
                                setState(() {

                                  _currentBid = value;
                                });
                              },
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(0),
                    child: SubmitButtonHoldPlaceBidWidget(
                      initialLabel: "Posicionar Lance",
                      finalLabel: "Lance Enviado",
                      initialImage: 'assets/images/theme/default-icon/finger_print.png',
                      finalImage: 'assets/images/theme/default-icon/bid.png',
                    ),
                  ),
                ],
              );
            }
            Widget _buildBidButton(IconData icon, VoidCallback onPressed) {

              return ElevatedButton(
                onPressed: onPressed,
                style: ElevatedButton.styleFrom(
                  shape: const CircleBorder(),
                  padding: const EdgeInsets.all(12),
                  backgroundColor: CupertinoColors.activeBlue,
                  elevation: 1, shadowColor: CupertinoColors.systemGrey2,
                ),
                child: Icon(
                  icon, color: Colors.white, size: 28,
                ),
              );
            }
          }
        content_profile_start_form_widget.dart: |
          import 'dart:io';

          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/data/geolocation_service.dart';
          import 'package:xiis/presentation/providers/profile_provider.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/confirm_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/editable_profile_image_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
          import 'package:xiis/presentation/views/entrance_view.dart';

          class ContentProfileStartFormWidget extends StatefulWidget {
            const ContentProfileStartFormWidget({
              Key? key,
            }) : super(key: key);
            @override
            _ContentProfileStartFormWidgetState createState() => _ContentProfileStartFormWidgetState();
          }
          class _ContentProfileStartFormWidgetState extends State<ContentProfileStartFormWidget> {
            final PageController _pageController = PageController();
            final TextEditingController _nameController = TextEditingController();
            String selectedValue = 'all_available';
            int _currentPage = 0;
            final locationService = GeolocationService();
            String? location;
            File? selectedProfileImage;
            bool isFormValid = false;
            bool isSubmitting = false;
            void getLocation() async {
              final result = await locationService.fetchLocation();
              setState(() {

                location = result.address?.isNotEmpty == true ? result.address : "Localiza√ß√£o indispon√≠vel";
              });
            }
            void _validateForm() {

              final isValid = _nameController.text.trim().isNotEmpty && selectedProfileImage != null;
              setState(() {

                isFormValid = isValid;
              });
            }
            @override
            void initState() {

              super.initState();
              _pageController.addListener(() {
                int newPage = _pageController.page?.round() ?? 0;
                if (_currentPage != newPage) {

                  setState(() {

                    _currentPage = newPage;
                  });
                }
              });
              _nameController.addListener(_validateForm);
              getLocation();
            }
            Future<void> _submitProfileData() async {
              if (!isFormValid) return;
              setState(() => isSubmitting = true);
              final profileProvider = Provider.of<ProfileProvider>(context, listen: false);
              await profileProvider.createProfileWithImage(
                name: _nameController.text.trim(),
                gender: selectedValue,
                location: location ?? 'Desconhecido',
                imageFile: selectedProfileImage!,
              );
              setState(() => isSubmitting = false);
              Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (_) => const EntranceView()),
                    (route) => false,
              );
              if (mounted) {

                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (_) => const EntranceView()),
                );
              }
            }
            Widget _buildValidationList() {

              final bool nameFilled = _nameController.text.trim().isNotEmpty;
              final bool imageSelected = selectedProfileImage != null;
              return Wrap(
                spacing: 8,
                children: [
                  _buildTagItem("Nome", nameFilled),
                  _buildTagItem("Imagem", imageSelected),
                ],
              );
            }
            Widget _buildTagItem(String label, bool isValid) {

              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: isValid ? Colors.green : Colors.grey[300],
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      label,
                      style: TextStyle(
                        color: isValid ? Colors.white : Colors.black,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    if (isValid)
                      Padding(
                        padding: const EdgeInsets.only(left: 4.0),
                        child: Image.asset(
                          'assets/images/theme/default-icon/check_mark.png',
                          width: 16,
                          height: 16,
                        ),
                      )
                  ],
                ),
              );
            }
            Widget _buildPageView() {

              return Container(
                color: Colors.white,
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 32),
                  child: Column(
                    children: [
                      EditableProfileImageWidget(
                        radius: 60,
                        defaultImageAsset: 'assets/images/default_profile.png',
                        onImageSelected: (file) {
                          setState(() {

                            selectedProfileImage = file;
                            _validateForm();
                          });
                        },
                      ),
                      UIHelper.buildTextField(
                        label: "Perfil",
                        hint: "nome apresentado",
                        icon: Icons.person,
                        fontWeight: FontWeight.w600,
                        controller: _nameController,
                        keyboardType: TextInputType.text,
                        onChanged: (value) {},
                        obscureText: false,
                        minLength: null,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          UIHelper.buildText(context, "Orienta√ß√£o sexual", style: AppTextStylesWidget.title, color: Colors.black),
                          DropdownButton<String>(
                            value: selectedValue,
                            onChanged: (String? newValue) {
                              if (newValue != null) {

                                setState(() {

                                  selectedValue = newValue;
                                });
                              }
                            },
                            icon: const Icon(Icons.arrow_drop_down, color: Colors.blue, size: 24),
                            items: ['all_available', 'male', 'female', 'not_defined']
                                .map<DropdownMenuItem<String>>((String value) => DropdownMenuItem<String>(
                              value: value,
                              child: UIHelper.buildText(context, value, style: AppTextStylesWidget.title, color: Colors.black),
                            ))
                                .toList(),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      UIHelper.buildText(
                        context,
                        "   Ative a localiza√ß√£o para personalizar sua experi√™ncia.",
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          Image.asset('assets/images/theme/default-icon/pin_location.png',
                            width: 22,
                            height: 22),
                          const SizedBox(width: 10),
                          Expanded(
                            child: UIHelper.buildText(
                              context,
                              location ?? "Obtendo localiza√ß√£o ...",
                              style: AppTextStylesWidget.body,
                              color: Colors.black,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      _buildValidationList(),
                      const SizedBox(height: 16),
                    ],
                  ),
                ),
              );
            }
            @override
            Widget build(BuildContext context) {

              return Expanded(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  mainAxisSize: MainAxisSize.max,
                  children: [
                    Wrap(children: [_buildPageView()]),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                      child: ConfirmButtonWidget(
                        label: isSubmitting ? "Enviando..." : "Confirmar",
                        isActive: isFormValid && !isSubmitting,
                        onPressed: isSubmitting ? () {} : _submitProfileData,
                      ),
                    ),
                  ],
                ),
              );
            }
          }
        content_recovery_account_form_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/data/shared_prefs_service.dart';
          import 'package:xiis/presentation/providers/access_provider.dart';
          import 'package:xiis/presentation/sections/components/submit_button.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/confirm_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class ContentRecoveryAccountFormWidget extends StatefulWidget {
            const ContentRecoveryAccountFormWidget({Key? key}) : super(key: key);
            @override
            _ContentRecoveryAccountFormWidgetState createState() => _ContentRecoveryAccountFormWidgetState();
          }
          class _ContentRecoveryAccountFormWidgetState extends State<ContentRecoveryAccountFormWidget> {
            final TextEditingController _accountEmailController = TextEditingController();
            bool _isValid = false;
            bool _isEmailFound = false;
            bool _isRequested = false;
            String? _email;
            Widget _buildSubmitSection(AccessProvider provider, BuildContext context) {

              bool showSuccessMessage = provider.isSuccess;
              bool showErrorMessage = provider.errorMessage != null;
              return Row(
                children: [
                  Expanded(
                    child: showSuccessMessage
                        ? Center(
                            child: Text(
                              "e-mail com instru√ß√µes enviado",
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Color(0xFF94BB68),
                              ),
                            ),
                          )
                        : showErrorMessage
                            ? Center(
                                child: Text(
                                  "n√£o foi poss√≠vel encontrar este email",
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.pink,
                                  ),
                                ),
                              )
                            : SubmitButton(
                                label: provider.isLoading ? "Aguarde" : "Recuperar",
                                isSuccess: provider.isSuccess,
                                hasError: provider.errorMessage != null,
                                onSubmit: provider.isLoading
                                    ? () async {}
                                    : () async {
                                        await _handleSubmit(provider, context);
                                        if (provider.errorMessage != null) {

                                          Future.delayed(
                                              const Duration(milliseconds: 5000), () {

                                            if (context.mounted) {

                                              provider.resetStatus();
                                            }
                                          });
                                        }
                                      },
                                successWidget: null,
                                failureWidget: null,
                              ),
                  ),
                ],
              );
            }
            Future<void> _handleSubmit(AccessProvider provider, BuildContext context) async {
              try {
                String toSend = provider.accountEmail.isNotEmpty ? provider.accountEmail : "";
                await provider.recoveryAccount(toSend);
                if (provider.isSuccess) {

                  setState(() {

                    _isRequested = true;
                    _isEmailFound = true;
                  });
                  await Future.delayed(const Duration(seconds: 2));
                  Navigator.pop(context);
                  await Future.delayed(const Duration(milliseconds: 200));
                }
              } catch (e) {
              }
            }
            void _validateInput() {

              setState(() {

                _isValid = _isValidEmail(_accountEmailController.text);
              });
            }
            bool _isValidEmail(String email) {

              final emailRegex = RegExp(
                  r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
              );
              return emailRegex.hasMatch(email);
            }
            Future<void> _loadEmail() async {
              String? email = await SharedPrefsService.getString("email");
              setState(() {

                _email = email;
              });
            }
            @override
            void initState() {

              super.initState();
              _accountEmailController.addListener(_validateInput);
              _loadEmail();
            }
            @override
            void dispose() {

              _accountEmailController.dispose();
              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return Consumer<AccessProvider>(
                builder: (context, provider, child) {
                  return Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.max,
                    children: [
                      Padding(padding: EdgeInsetsDirectional.symmetric(horizontal: 32), child: Row(
                        children: [
                          UIHelper.buildText(
                            context, "   e-mail cadastrado",
                            style: AppTextStylesWidget.title,
                            color: Colors.black,
                          )
                        ],
                      )),
                      const SizedBox(height: 16),
                      Padding(padding: EdgeInsetsDirectional.symmetric(horizontal: 32), child: Row(
                        children: [
                          SizedBox(width: 100, child: Image.asset('assets/images/theme/default-icon/active.png', width: 50, height: 50)),
                          Expanded(child: UIHelper.buildText(
                            context, "   O link de recupera√ß√£o da conta ser√° enviado ao email informado.",
                            style: AppTextStylesWidget.body,
                            color: Colors.black,
                          ))
                        ],
                      )),
                      const SizedBox(height: 16),
                      Padding(padding: EdgeInsetsDirectional.symmetric(horizontal: 24),
                          child: UIHelper.buildTextField(
                          label: "E-mail",
                          hint: "seu melhor e-mail",
                          icon: Icons.mail_outline,
                          fontWeight: FontWeight.w600,
                          keyboardType: TextInputType.emailAddress,
                          controller: _accountEmailController,
                          onChanged: (value) {
                            _accountEmailController.value = _accountEmailController.value.copyWith(
                              text: value.toLowerCase(),
                              selection: TextSelection.collapsed(offset: value.length),
                            );
                            provider.setAccountEmail(value.toLowerCase());
                          },
                          obscureText: false, minLength: null)),
                      const SizedBox(height: 32),
                      Padding(
                          padding: EdgeInsetsDirectional.symmetric(horizontal: 16),
                          child: ConfirmButtonWidget(
                            label: "Recuperar Conta",
                            isActive: provider.validateRecoveryAccountLogin(),
                            activeIcon: Icons.check_circle,
                            inactiveIcon: Icons.cancel,
                            onPressed: () async {
                              await _handleSubmit(provider, context);
                              if (provider.errorMessage != null) {

                                Future.delayed(
                                    const Duration(milliseconds: 5000), () {

                                  if (context.mounted) {

                                    provider.resetStatus();
                                  }
                                });
                              }
                            },
                          ))
                    ],
                  );
                },
              );
            }
          }
        content_validation_form_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/shared_prefs_service.dart';
          import 'package:xiis/presentation/providers/access_provider.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/confirm_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
          import 'package:xiis/presentation/views/entrance_view.dart';

          class ContentValidationFormWidget extends StatefulWidget {
            final List<dynamic> codeOptions;
            const ContentValidationFormWidget({
              Key? key,
              required this.codeOptions,
            }) : super(key: key);
            @override
            _ContentValidationFormWidgetState createState() => _ContentValidationFormWidgetState();
          }
          class _ContentValidationFormWidgetState extends State<ContentValidationFormWidget> {
            List<dynamic> _numbers = [];
            String? _selectedNumber;
            Color _buttonColor = Colors.white;
            bool _buttonEnabled = false;
            bool _isActivated = false;
            String _email = '';
            Future<void> _handleSubmit(BuildContext context) async {
              AccessProvider provider = AccessProvider();
              try {
                Map<String, dynamic> toSend = {
                  "email": provider.registerEmail.isNotEmpty ? provider.registerEmail : (_email ?? ""),
                  "code": _selectedNumber,
                };
                await provider.verifyCode(toSend);
                if (provider.isSuccess) {

                  setState(() {

                    _isActivated = true;
                  });
                  await SharedPrefsService.setBool("userAccountActive", true);
                  await Future.delayed(const Duration(seconds: 2));
                  Navigator.pop(context);
                  await Future.delayed(const Duration(milliseconds: 200));
                  Navigator.of(context).pushReplacement(
                    PageRouteBuilder(
                      transitionDuration: const Duration(milliseconds: 500),
                      pageBuilder: (context, animation, secondaryAnimation) => EntranceView(),
                      transitionsBuilder: (context, animation, secondaryAnimation, child) {
                        return FadeTransition(
                          opacity: animation,
                          child: child,
                        );
                      },
                    ),
                  );
                }
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text("Erro ao registrar! ${provider.errorMessage ?? ''}"),
                  ),
                );
              }
            }
            Widget _buildCheckboxItem(String number) {

              return Padding(padding: EdgeInsetsDirectional.symmetric(horizontal: 48), child: CheckboxListTile(
                title: Text(number, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500)),
                value: _selectedNumber == number,
                onChanged: (bool? selected) {
                  setState(() {

                    _selectedNumber = selected == true ? number : null;
                    _buttonEnabled = selected == true;
                    _buttonColor = Colors.white;
                  });
                },
                activeColor: Colors.black,
                controlAffinity: ListTileControlAffinity.leading,
              ));
            }
            @override
            void initState() {

              super.initState();
              _loadEmail();
              _numbers = widget.codeOptions;
            }
            Future<void> _loadEmail() async {
              String? email = await SharedPrefsService.getString("email");
              setState(() {

                _email = email!;
              });
            }
            @override
            Widget build(BuildContext context) {

              AccessProvider provider = AccessProvider();
              return Column(
                children: [
                  Padding(
                      padding: EdgeInsetsDirectional.symmetric(horizontal: 32),
                      child: UIHelper.buildText(context,
                          '   Existe uma Ativa√ß√£o pendente. Verique o email ${_email} e procure pelo t√≠tulo: Ativa√ß√£o do XiiS',
                          style: AppTextStylesWidget.body, color: Colors.black)),
                  const SizedBox(height: 16),
                  ..._numbers.map((number) => _buildCheckboxItem(number)),
                  const SizedBox(height: 16),
                  const SizedBox(height: 16),
                  Divider(),
                  const SizedBox(height: 16),
                  Padding(
                      padding: EdgeInsetsDirectional.symmetric(horizontal: 16),
                      child: ConfirmButtonWidget(
                        label: "Confirmar C√≥digo",
                        isActive: _buttonEnabled,
                        activeIcon: Icons.check_circle,
                        inactiveIcon: Icons.cancel,
                        onPressed: () {
                          _handleSubmit(context);
                        }
                      ))
                ],
              );
            }
          }
        credit_coin_purchase_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/financial_provider.dart';
          import 'package:xiis/presentation/sections/components/payment_form_component.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/confirm_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class CreditCoinPurchaseComponent extends StatefulWidget {
            const CreditCoinPurchaseComponent({Key? key}) : super(key: key);
            @override
            _CreditCoinPurchaseComponentState createState() =>
                _CreditCoinPurchaseComponentState();
          }
          class _CreditCoinPurchaseComponentState
              extends State<CreditCoinPurchaseComponent> {
            String _selectedPaymentMethod = 'card';
            Widget _buildPaymentMethodSelector(
                BuildContext context, FinancialProvider financialProvider) {
              return Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8.0),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.5),
                      spreadRadius: 0,
                      blurRadius: 1,
                      offset: const Offset(0, 0),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    RadioListTile<String>(
                      title: UIHelper.buildText(context, 'PIX',
                          style: AppTextStylesWidget.title, color: Colors.grey),
                      value: 'pix',
                      groupValue: _selectedPaymentMethod,
                      onChanged: (value) {
                        setState(() {

                          _selectedPaymentMethod = value!;
                        });
                      },
                      secondary: Image.asset('assets/images/theme/default-icon/colored_qr_code.png',
                          width: 22,
                          height: 22),
                    ),
                    const Divider(),
                    RadioListTile<String>(
                      title: UIHelper.buildText(context, 'Cart√£o de Cr√©dito',
                          style: AppTextStylesWidget.title, color: Colors.black),
                      value: 'card',
                      groupValue: _selectedPaymentMethod,
                      onChanged: (value) {
                        setState(() {

                          _selectedPaymentMethod = value!;
                        });
                      },
                      secondary: Image.asset('assets/images/theme/default-icon/colored_card.png',
                          width: 22,
                          height: 22),
                    ),
                    if (_selectedPaymentMethod == 'card')
                      PaymentFormComponent(
                        selectedAmount: financialProvider.selectedAmount,
                        onAcceptingPurchase: (value) =>
                            financialProvider.setSelectedAgree(value as bool),
                      ),
                  ],
                ),
              );
            }
            Widget _buildAmountSlider(FinancialProvider financialProvider) {

              double totalPrice = financialProvider.selectedAmount * financialProvider.unitPriceInDollars;
              return Column(
                children: [
                  _buildInfoRow("Moedas Cr√©dito Xii\$",
                      financialProvider.selectedAmount.toStringAsFixed(2), Colors.black),
                  _buildInfoRow(
                      "Valor Total:", "\$${totalPrice.toStringAsFixed(2)}", Colors.black),
                  Slider(
                    value: financialProvider.selectedAmount,
                    min: 5,
                    max: 1000,
                    divisions: 199,
                    label: financialProvider.selectedAmount.toInt().toString(),
                    onChanged: (double value) {
                      setState(() {

                        financialProvider.setSelectedAmount(value);
                      });
                    },
                    onChangeEnd: (double value) {
                      financialProvider.setSelectedAmount(value);
                    },
                  ),
                ],
              );
            }
            Widget _buildInfoRow(String label, String value, Color color) {

              return Align(
                alignment: Alignment.center,
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    UIHelper.buildText(context, label,
                        style: AppTextStylesWidget.creditCoinSubtitle, color: Colors.black),
                    const SizedBox(width: 8),
                    UIHelper.buildText(context, value,
                        style: AppTextStylesWidget.creditCoinSubtitle, color: color),
                  ],
                ),
              );
            }
            @override
            Widget build(BuildContext context) {

              return Consumer<FinancialProvider>(
                builder: (context, financialProvider, child) {
                  return Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8),
                          child: _buildAmountSlider(financialProvider)),
                      _buildPaymentMethodSelector(context, financialProvider),
                      const SizedBox(height: 16),
                      Padding(padding: EdgeInsetsDirectional.symmetric(horizontal: 16), child: ConfirmButtonWidget(
                        label: "Confirmar",
                        isActive: financialProvider.isPurchaseAgreed,
                        activeIcon: Icons.check_circle,
                        inactiveIcon: Icons.cancel,
                        onPressed: () {
                          if (financialProvider.isPurchaseAgreed) {

                            final double quantity = financialProvider.selectedAmount;
                            final double unitPrice = financialProvider.unitPriceInDollars;
                            final double totalPrice = quantity * unitPrice;
                            Map<String, dynamic> payload = {
                              "quantity": quantity,
                              "accepting": financialProvider.isPurchaseAgreed,
                              "unitPrice": unitPrice,
                              "totalPrice": totalPrice,
                              "paymentMethod": financialProvider.selectedPaymentMethod,
                            };
                            financialProvider.disableForm();
                            financialProvider.processPayment(payload);
                            Future.delayed(const Duration(milliseconds: 1000));
                            if (mounted) Navigator.pop(context);
                          } else {
                          }
                        },
                      ))
                    ],
                  );
                },
              );
            }
          }
        custom_drawer_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/shared_prefs_service.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/confirm_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/generic_modal_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
          import 'package:xiis/presentation/views/communication_view.dart';
          import 'package:xiis/presentation/views/invite_view.dart';
          import 'package:xiis/presentation/views/splash_view.dart';
          import 'package:xiis/presentation/views/view_settings_shared_data_widget.dart';
          import 'package:xiis/presentation/views/view_shared_preferences_data_widget.dart';

          class CustomDrawerWidget extends StatefulWidget {
            const CustomDrawerWidget({super.key});
            @override
            State<CustomDrawerWidget> createState() => _CustomDrawerWidgetState();
          }
          class _CustomDrawerWidgetState extends State<CustomDrawerWidget> {
            bool _showSubMenuProfile = false;
            bool _showSubMenuApp = false;
            @override
            Widget build(BuildContext context) {

              return Drawer(
                backgroundColor: Colors.white,
                child: ListView(
                  padding: const EdgeInsets.only(top: 26, bottom: 74),
                  children: [
                    _buildHeader(context),
                    Divider(height: 0.5),
                    _menuTile(context, Icons.settings, 'Enviar Convites', () {

                      Navigator.push(
                          context, MaterialPageRoute(
                          builder: (context) => InviteView()
                      ));
                    }),
                    _menuTile(context, Icons.settings, 'Caixa de Mensagens', () {

                      Navigator.push(
                          context, MaterialPageRoute(
                          builder: (context) => CommunicationView()
                      ));
                    }),
                    _buildProfileDefinition(context),
                    _buildAppDefinition(context),
                    _menuTile(context, Icons.info_outline, 'Sair', () {

                      GenericModalWidget.show(
                        context: context,
                        child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 32),
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const Icon(Icons.exit_to_app, color: Colors.black87, size: 48),
                                  const SizedBox(width: 12),
                                  Expanded(
                                    child: UIHelper.buildText(
                                      context,
                                      'Deseja fazer logoff da sua conta ? Quando voltar, ser√° perguntado por login e senha novamente',
                                      style: AppTextStylesWidget.body,
                                      color: Colors.black,
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 32),
                              ConfirmButtonWidget(
                                label: "Sair",
                                isActive: true,
                                activeIcon: Icons.check_circle,
                                inactiveIcon: Icons.cancel,
                                onPressed: () async {
                                  await SharedPrefsService.cleanPresence();
                                  Navigator.of(context).pushReplacement(
                                    PageRouteBuilder(
                                      transitionDuration: const Duration(milliseconds: 250),
                                      pageBuilder: (context, animation, secondaryAnimation) => SplashView(),
                                      transitionsBuilder: (context, animation, secondaryAnimation, child) {
                                        const begin = Offset(1.0, 0.0);
                                        const end = Offset.zero;
                                        const curve = Curves.easeInOut;
                                        var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
                                        return SlideTransition(
                                          position: animation.drive(tween),
                                          child: child,
                                        );
                                      },
                                    ),
                                  );
                                },
                              ),
                            ],
                          )
                        ),
                      );
                    }),
                  ],
                ),
              );
            }
            Widget _buildHeader(BuildContext context) {

              return Container(
                padding: const EdgeInsets.fromLTRB(16, 26, 16, 12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    UIHelper.buildText(
                      context,
                      'Menu R√°pido',
                      style: AppTextStylesWidget.headerViewUp,
                      color: const Color(0xFF0C0A2B),
                    ),
                    const SizedBox(height: 8),
                    UIHelper.buildText(
                      context,
                      'Op√ß√µes de navega√ß√£o',
                      style: AppTextStylesWidget.title,
                      weight: FontWeight.normal,
                      color: const Color(0xFF817E8F),
                    ),
                    const SizedBox(height: 40),
                  ],
                ),
              );
            }
            Widget _menuTile(BuildContext context, IconData icon, String title, VoidCallback onTap) {

              return ListTile(
                leading: Icon(icon, color: Colors.black87),
                title: UIHelper.buildText(
                  context,
                  title,
                  style: AppTextStylesWidget.body,
                  color: const Color(0xFF0C0A2B),
                ),
                onTap: onTap,
              );
            }
            Widget _buildAppDefinition(BuildContext context) {

              return Column(
                children: [
                  ListTile(
                    leading: Icon(Icons.settings, color: Colors.black87),
                    title: UIHelper.buildText(
                      context,
                      'Defini√ß√µes do App',
                      style: AppTextStylesWidget.body,
                      color: UIHelper.primaryColor,
                    ),
                    trailing: Icon(_showSubMenuApp ? Icons.expand_less : Icons.expand_more),
                    onTap: () {
                      setState(() => _showSubMenuApp = !_showSubMenuApp);
                    },
                  ),
                  if (_showSubMenuApp) ...[
                    Padding(
                        padding: const EdgeInsets.only(left: 18),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _subMenuTile(context, 'Providers Debug', Icons.share_location, () {

                            Navigator.push(
                              context, MaterialPageRoute(
                                builder: (context) => ViewSettingsSharedDataWidget()
                            ));
                          }),
                          _subMenuTile(context, 'Shared Setup', Icons.share_location, () {

                            Navigator.push(
                              context, MaterialPageRoute(
                                builder: (context) => ViewSharedPreferencesDataWidget()
                            ));
                          }),
                          _subMenuTile(context, 'Documents', Icons.share_location, () {

                          }),
                          /*[:memory]
                          _subMenuTile(context, 'Publicados', Icons.publish_outlined, () {

                            Navigator.pop(context);
                          }),*/
                        ],
                      ),
                    ),
                  ],
                ],
              );
            }
            Widget _buildProfileDefinition(BuildContext context) {

              return Column(
                children: [
                  ListTile(
                    leading: Icon(Icons.settings, color: Colors.black87),
                    title: UIHelper.buildText(
                      context,
                      'Defini√ß√µes do Perfil',
                      style: AppTextStylesWidget.body,
                      color: UIHelper.primaryColor,
                    ),
                    trailing: Icon(_showSubMenuProfile ? Icons.expand_less : Icons.expand_more),
                    onTap: () {
                      setState(() => _showSubMenuProfile = !_showSubMenuProfile);
                    },
                  ),
                  if (_showSubMenuProfile) ...[
                    Padding(
                        padding: const EdgeInsets.only(left: 18),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _subMenuTile(context, 'Providers Debug', Icons.share_location, () {

                            Navigator.push(
                              context, MaterialPageRoute(
                                builder: (context) => ViewSettingsSharedDataWidget()
                            ));
                          }),
                          _subMenuTile(context, 'Shared Setup', Icons.share_location, () {

                            Navigator.push(
                              context, MaterialPageRoute(
                                builder: (context) => ViewSharedPreferencesDataWidget()
                            ));
                          }),
                          _subMenuTile(context, 'Documents', Icons.share_location, () {

                          }),
                          /*[:memory]
                          _subMenuTile(context, 'Publicados', Icons.publish_outlined, () {

                            Navigator.pop(context);
                          }),*/
                        ],
                      ),
                    ),
                  ],
                ],
              );
            }
            Widget _subMenuTile(BuildContext context, String title, IconData icon, VoidCallback onTap) {

              return ListTile(
                dense: true,
                leading: Icon(icon, size: 20, color: UIHelper.blackBlueColor),
                title: UIHelper.buildText(
                  context,
                  title,
                  style: AppTextStylesWidget.body,
                  color: UIHelper.blackBlueColor,
                ),
                onTap: onTap,
              );
            }
          }
        editable_profile_image_widget.dart: |
          import 'dart:io';

          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:image_cropper/image_cropper.dart';
          import 'package:image_picker/image_picker.dart';

          class EditableProfileImageWidget extends StatefulWidget {
            final double radius;
            final String defaultImageAsset;
            final void Function(File? image)? onImageSelected;
            const EditableProfileImageWidget({
              Key? key,
              this.radius = 26,
              this.defaultImageAsset = 'assets/images/profile.jpg',
              this.onImageSelected,
            }) : super(key: key);
            @override
            State<EditableProfileImageWidget> createState() => _EditableProfileImageWidgetState();
          }
          class _EditableProfileImageWidgetState extends State<EditableProfileImageWidget> {
            File? _selectedImage;
            bool _isLoadingImage = false;
            Future<void> _pickImage() async {
              try {
                final picker = ImagePicker();
                final XFile? pickedFile = await picker.pickImage(source: ImageSource.gallery);
                if (pickedFile != null) {

                  setState(() => _isLoadingImage = true);
                  File? croppedImage = await _cropImage(File(pickedFile.path));
                  if (croppedImage != null) {

                    setState(() {

                      _selectedImage = croppedImage;
                    });
                    widget.onImageSelected?.call(croppedImage);
                  }
                  setState(() => _isLoadingImage = false);
                }
              } catch (e) {
              }
            }
            Future<File?> _cropImage(File imageFile) async {
              final croppedFile = await ImageCropper().cropImage(
                sourcePath: imageFile.path,
                aspectRatio: const CropAspectRatio(ratioX: 1, ratioY: 1),
                compressQuality: 90,
                uiSettings: [
                  AndroidUiSettings(
                    toolbarTitle: 'Ajustar imagem',
                    toolbarColor: Colors.blue,
                    toolbarWidgetColor: Colors.white,
                    initAspectRatio: CropAspectRatioPreset.square,
                    lockAspectRatio: true,
                  ),
                  IOSUiSettings(
                    title: 'Ajustar imagem',
                    aspectRatioLockEnabled: true,
                  ),
                ],
              );
              return croppedFile != null ? File(croppedFile.path) : null;
            }
            Widget _buildEditButton() {

              return GestureDetector(
                onTap: _pickImage,
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.7),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(Icons.edit, color: Colors.white, size: 16),
                ),
              );
            }
            @override
            Widget build(BuildContext context) {

              ImageProvider profileImageProvider = _selectedImage != null
                  ? FileImage(_selectedImage!)
                  : AssetImage(widget.defaultImageAsset);
              return Stack(
                children: [
                  GestureDetector(
                    onTap: _pickImage,
                    child: CircleAvatar(
                      radius: widget.radius,
                      backgroundColor: Colors.white,
                      child: _isLoadingImage
                          ? const CircularProgressIndicator()
                          : CircleAvatar(
                        radius: widget.radius,
                        backgroundImage: profileImageProvider,
                      ),
                    ),
                  ),
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: _buildEditButton(),
                  ),
                ],
              );
            }
          }
        filter_input_field_widget.dart: |
          import 'dart:ui';

          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:provider/provider.dart';
          import 'package:xiis/presentation/providers/content_provider.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class FilterInputFieldWidget extends StatefulWidget {
            final String? label;
            final String? hint;
            final VoidCallback onTagsChanged;
            const FilterInputFieldWidget({
              super.key,
              required this.onTagsChanged,
              this.label,
              this.hint,
            });
            @override
            State<FilterInputFieldWidget> createState() => _FilterInputFieldWidgetState();
          }
          class _FilterInputFieldWidgetState extends State<FilterInputFieldWidget> {
            final TextEditingController _controller = TextEditingController();
            final FocusNode _focusNode = FocusNode();
            final List<String> _filterTags = [];
            bool _isVisible = false;
            void _addFilterTags(String input) {

              final newTags = input
                  .split(' ')
                  .map((tag) => tag.trim())
                  .where((tag) => tag.isNotEmpty && !_filterTags.contains(tag))
                  .toList();
              if (newTags.isNotEmpty) {

                setState(() {

                  _filterTags.addAll(newTags);
                });
                _controller.clear();
                _focusNode.requestFocus();
              }
            }
            void _removeFilterTag(String tag) {

              setState(() {

                _filterTags.remove(tag);
              });
            }
            void _applyFilter() {

              final provider = context.read<ContentProvider>();
              provider.setTags(_filterTags);
              widget.onTagsChanged();
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      UIHelper.buildText(context, widget.label ?? '',
                          style: AppTextStylesWidget.small, color: UIHelper.blackBlueColor),
                      IconButton(
                        icon: Icon(_isVisible ? Icons.expand_less : Icons.expand_more, color: UIHelper.blackBlueColor,),
                        onPressed: () {
                          setState(() {

                            _isVisible = !_isVisible;
                          });
                        },
                      ),
                    ],
                  ),
                  if (_isVisible)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        TextField(
                          controller: _controller,
                          focusNode: _focusNode,
                          keyboardType: TextInputType.text,
                          textInputAction: TextInputAction.done,
                          style: const TextStyle(
                            fontSize: 14,
                          ),
                          decoration: InputDecoration(
                            hintText: widget.hint ?? "Digite e pressione Enter",
                            suffixIcon: InkWell(
                              onTap: () {
                                _addFilterTags(_controller.text);
                                _applyFilter();
                              },
                              borderRadius: BorderRadius.circular(4),
                              child: Padding(
                                padding: const EdgeInsets.all(4),
                                child: Icon(Icons.search, size: 20),
                              ),
                            ),
                            contentPadding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                            border: const UnderlineInputBorder(),
                          ),
                          onSubmitted: (value) {
                            _addFilterTags(value);
                            _applyFilter();
                          },
                        ),
                        if (_filterTags.isEmpty)
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 16),
                            child: UIHelper.buildText(
                              context,
                              'Digite termos de filtro e pressione Enter',
                              style: AppTextStylesWidget.small,
                              color: UIHelper.blackBlueColor,
                            ),
                          ),
                        if (_filterTags.isNotEmpty)
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 8),
                            child: Wrap(
                              spacing: 4,
                              runSpacing: 4,
                              children: _filterTags.map((tag) {
                                return GestureDetector(
                                  onTap: () => _removeFilterTag(tag),
                                  child: Container(
                                    margin: const EdgeInsets.only(right: 4, bottom: 4),
                                    padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                                    decoration: BoxDecoration(
                                      color: Colors.grey.shade200,
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: Row(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        UIHelper.buildText(context, tag,
                                            style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor),
                                        const SizedBox(width: 4),
                                        Icon(Icons.close, size: 18, color: Colors.redAccent)
                                      ],
                                    ),
                                  )
                                );
                              }).toList(),
                            ),
                          ),
                        SizedBox(height: 8)
                      ],
                    ),
                ],
              );
            }
          }
        floating_validation_or_actions_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class FloatingValidationOrActionWidget extends StatelessWidget {
            final List<String> options;
            final VoidCallback? onSavePressed;
            final VoidCallback? onSendPressed;
            final Color backgroundColor;
            final Color iconColor;
            const FloatingValidationOrActionWidget({
              Key? key, required this.options, this.onSavePressed,
              this.onSendPressed, this.backgroundColor = UIHelper.backgroundColor,
              this.iconColor = UIHelper.secondaryColor,
            }) : super(key: key);
            @override
            Widget build(BuildContext context) {

              if (options.isEmpty) {

                return Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    /*[:memory] IconButton(
                      style: IconButton.styleFrom(
                        backgroundColor: Colors.black54,
                        padding: const EdgeInsets.all(8),
                        shape: const CircleBorder(),
                      ),
                      onPressed: onSavePressed,
                      icon: const Icon(Icons.save, size: 18),
                      color: iconColor,
                      tooltip: 'Salvar',
                    ),*/
                    IconButton(
                      style: IconButton.styleFrom(
                        backgroundColor: UIHelper.backgroundColor,
                        padding: const EdgeInsets.all(8),
                        shape: const CircleBorder(),
                      ),
                      onPressed: onSendPressed,
                      icon: const Icon(Icons.send, size: 18),
                      color: iconColor,
                      tooltip: 'Enviar',
                    ),
                  ],
                );
              }
              return Column(
                children: options.map((option) {
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 28),
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            decoration: BoxDecoration(
                              color: UIHelper.secondaryColor,
                              shape: BoxShape.circle,
                            ),
                            padding: const EdgeInsets.all(6),
                            child: const Icon(
                              Icons.add_a_photo,
                              size: 20,
                              color: Colors.white,
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                }).toList(),
              );
            }
          }
        footer_section_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';

          class FooterSectionWidget extends StatelessWidget {
            @override
            Widget build(BuildContext context) {

              return Padding(
                padding: const EdgeInsets.only(top: 16.0, bottom: 32, left: 16, right: 16),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          "¬© 2025 Xii\$",
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          "Todos os direitos reservados.",
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.email, size: 16, color: Colors.grey),
                        SizedBox(width: 5),
                        Text(
                          "contato@xiis.app",
                          style: TextStyle(fontSize: 14, color: Colors.grey),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            }
          }
        generic_bottom_sheet_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/close_button_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class GenericBottomSheetWidget {
            static void show({
              required BuildContext context,
              required String title,
              required Widget content,
              VoidCallback? onConfirm,
              VoidCallback? onCancel,
            }) {
              showModalBottomSheet(
                context: context,
                backgroundColor: Colors.transparent,
                isScrollControlled: true,
                builder: (BuildContext context) {
                  return Padding(
                    padding: const EdgeInsets.only(top: 128, left: 16, right: 16, bottom: 16),
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: const BorderRadius.vertical(
                          top: Radius.circular(16), bottom: Radius.circular(38),
                        ),
                      ),
                      child: Container(
                        child: Column(
                          mainAxisSize: MainAxisSize.max,
                          children: [
                            Padding(
                              padding: const EdgeInsets.all(16),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  UIHelper.buildText(context, '', style: AppTextStylesWidget.title, color: Colors.black),
                                  CloseButtonWidget(),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Container(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  mainAxisSize: MainAxisSize.max,
                                  children: [
                                    content,
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              );
            }
          }
        generic_image_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/data/dio_client_service.dart';

          class GenericImageWidget extends StatelessWidget {
            final String imagePath;
            final double? width;
            final double? height;
            final BoxFit fit;
            const GenericImageWidget({
              Key? key,
              required this.imagePath,
              this.width,
              this.height,
              this.fit = BoxFit.cover,
            }) : super(key: key);
            @override
            Widget build(BuildContext context) {

              final String openImage = "${DioClientService.baseUrl}$imagePath";
              return imagePath.startsWith('http')
                  ? Image.network(
                      imagePath,
                      width: width,
                      height: height,
                      fit: fit,
                      errorBuilder: (context, error, stackTrace) =>
                          const Icon(Icons.broken_image, size: 50),
                    )
                  : Image.asset(
                      openImage,
                      width: width,
                      height: height,
                      fit: fit,
                      errorBuilder: (context, error, stackTrace) =>
                          const Icon(Icons.broken_image, size: 50),
                    );
            }
            ImageProvider<Object> getImageProvider() {

              return imagePath.startsWith('http')
                  ? NetworkImage(imagePath)
                  : AssetImage(imagePath) as ImageProvider;
            }
          }
        generic_modal_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';

          class GenericModalWidget extends StatelessWidget {
            final Widget child;
            final Color backgroundColor;
            final EdgeInsetsGeometry padding;
            final EdgeInsetsGeometry margin;
            final double borderRadius;
            const GenericModalWidget({
              super.key,
              required this.child,
              this.backgroundColor = Colors.white,
              this.padding = const EdgeInsets.all(24),
              this.margin = const EdgeInsets.symmetric(horizontal: 24),
              this.borderRadius = 24.0,
            });
            static void show({
              required BuildContext context,
              required Widget child,
              bool dismissible = true,
              Color barrierColor = Colors.black54,
              Duration transitionDuration = const Duration(milliseconds: 300),
              Color backgroundColor = Colors.white,
              EdgeInsetsGeometry padding = const EdgeInsets.only(left: 24, top: 20, right: 24, bottom: 24),
              EdgeInsetsGeometry margin = const EdgeInsets.symmetric(horizontal: 24),
              double borderRadius = 24.0,
            }) {
              showGeneralDialog(
                context: context,
                barrierDismissible: dismissible,
                barrierLabel: dismissible ? MaterialLocalizations.of(context).modalBarrierDismissLabel : null,
                barrierColor: barrierColor,
                transitionDuration: transitionDuration,
                pageBuilder: (context, animation, secondaryAnimation) {
                  return Center(
                    child: Material(
                      color: Colors.transparent,
                      child: Container(
                        padding: EdgeInsets.all(16),
                        margin: margin,
                        decoration: BoxDecoration(
                          color: backgroundColor,
                          borderRadius: BorderRadius.circular(borderRadius),
                        ),
                        child: child,
                      ),
                    ),
                  );
                },
                transitionBuilder: (context, animation, secondaryAnimation, child) {
                  return FadeTransition(
                    opacity: animation,
                    child: ScaleTransition(
                      scale: animation,
                      child: child,
                    ),
                  );
                },
              );
            }
            @override
            Widget build(BuildContext context) {

              return const SizedBox.shrink();
            }
          }
        image_list_widget.dart: |
          import 'dart:ui';

          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/components/color.dart' as Colors;
          import 'package:xiis/presentation/sections/widgets/generic_image_widget.dart';

          class ImageListWidget extends StatefulWidget {
            final List<dynamic> images;
            final bool applyBlur;
            final bool applyObfuscate;
            const ImageListWidget({
              super.key,
              required this.images,
              this.applyBlur = false,
              this.applyObfuscate = false,
            });
            @override
            _ImageListWidgetState createState() => _ImageListWidgetState();
          }
          class _ImageListWidgetState extends State<ImageListWidget> {
            String? selectedImage;
            bool isNetworkImage = true;
            @override
            void initState() {

              super.initState();
              final coverImage = widget.images.firstWhere(
                  (image) => image['cover'] == true,
                  orElse: () => widget.images.first);
              selectedImage = coverImage['path'];
              isNetworkImage = selectedImage != null && selectedImage!.startsWith('http');
            }
            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  if (selectedImage != null)
                    ClipRRect(
                      borderRadius: BorderRadius.circular(0),
                      child: Stack(
                        children: [
                          SizedBox(
                            width: double.infinity,
                            height: MediaQuery.of(context).size.width,
                            child: GenericImageWidget(imagePath: selectedImage!),
                          ),
                          if (widget.applyBlur)
                            Positioned.fill(
                              child: BackdropFilter(
                                filter: ImageFilter.blur(sigmaX: 50.0, sigmaY: 50.0),
                                child: Container(
                                  color: Colors.black.withOpacity(0.1),
                                ),
                              ),
                            ),
                          if (widget.applyObfuscate)
                            Positioned.fill(
                              child: Container(
                                color: CupertinoColors.systemGrey4,
                                child: const Center(
                                  child: Icon(
                                    Icons.lock,
                                    color: Colors.white,
                                    size: 40,
                                  ),
                                ),
                              ),
                            ),
                        ],
                      ),
                    ),
                  const SizedBox(height: 16),
                  SizedBox(
                    height: 100,
                    child: ListView.separated(
                      scrollDirection: Axis.horizontal,
                      physics: const BouncingScrollPhysics(),
                      itemCount: widget.images.length,
                      separatorBuilder: (context, index) => const SizedBox(width: 0),
                      itemBuilder: (context, index) {
                        final image = widget.images[index];
                        final String imagePath = image['path'] ?? '';
                        final bool isNetwork = imagePath.startsWith('http');
                        return GestureDetector(
                          onTap: () {
                            setState(() {

                              selectedImage = imagePath;
                              isNetworkImage = isNetwork;
                            });
                          },
                          child: Padding(padding: EdgeInsets.only(left: 16), child: Container(
                                width: 100.0,
                                height: 100.0,
                                constraints: const BoxConstraints(
                                  minWidth: 100.0,
                                  minHeight: 100.0,
                                ),
                                decoration: BoxDecoration(
                                  border: Border.all(color: CupertinoColors.systemGrey3, width: 1),
                                  borderRadius: BorderRadius.circular(4),
                                ),
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(4),
                                  child: imagePath.isNotEmpty
                                      ? Image(
                                          image: isNetwork
                                              ? NetworkImage(imagePath)
                                              : AssetImage(imagePath) as ImageProvider,
                                          fit: BoxFit.cover,
                                          errorBuilder: (context, error, stackTrace) =>
                                              const Icon(Icons.broken_image, size: 50),
                                        )
                                      : Container(
                                          color: CupertinoColors.systemGrey2,
                                          child: const Center(
                                            child: Icon(
                                              Icons.image_not_supported,
                                              size: 40,
                                              color: CupertinoColors.systemGrey2,
                                            ),
                                          ),
                                        ),
                                ),
                              )),
                        );
                      },
                    ),
                  )
                ],
              );
            }
          }
        invite_badge_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class InviteBadgeWidget extends StatelessWidget {
            final Animation<double> animation;
            final String status;
            const InviteBadgeWidget({
              super.key,
              required this.animation,
              required this.status,
            });
            String _getBadgeText() {

              return status;
            }
            @override
            Widget build(BuildContext context) {

              return FadeTransition(
                opacity: animation,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 1),
                  decoration: BoxDecoration(
                    color: (_getBadgeText() == 'seguindo' || _getBadgeText() == 'mutual') ? CupertinoColors.systemGrey3 : UIHelper.infoColor,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  constraints: const BoxConstraints(minWidth: 16, minHeight: 16),
                  child: UIHelper.buildText(
                    context,
                    (_getBadgeText() == 'seguindo' || _getBadgeText() == 'mutual') ? 'seguindo' : _getBadgeText(),
                    style: AppTextStylesWidget.body,
                    weight: FontWeight.normal,
                    color: (_getBadgeText() == 'seguindo' || _getBadgeText() == 'mutual') ? UIHelper.blackBlueColor : UIHelper.backgroundColor,
                  ),
                ),
              );
            }
          }
        pill_tab_bar_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:vibration/vibration.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class PillTabBar extends StatefulWidget {
            final List<Map<String, dynamic>> tabs;
            final List<Widget> children;
            const PillTabBar({
              super.key,
              required this.tabs,
              required this.children,
            }) : assert(tabs.length == children.length, 'tabs and children must match');

            @override
            State<PillTabBar> createState() => _PillTabBarState();
          }

          class _PillTabBarState extends State<PillTabBar> with SingleTickerProviderStateMixin {
            late TabController _tabController;

            @override
            void initState() {
              super.initState();
              _tabController = TabController(length: widget.tabs.length, vsync: this);
              _tabController.addListener(() async {
                if (_tabController.indexIsChanging) return;
                final hasVibrator = await Vibration.hasVibrator() ?? false;
                if (hasVibrator) {

                  try {
                    await Vibration.vibrate(duration: 10, amplitude: 255);
                  } catch (_) {
                  }
                }
                setState(() {});
              });
            }

            @override
            void dispose() {
              _tabController.dispose();
              super.dispose();
            }

            Widget _buildTab(BuildContext context, Map<String, dynamic> tab, bool isSelected) {

              final String label = tab['label'];
              return Tooltip(
                message: label,
                child: AnimatedContainer(
                  duration: const Duration(milliseconds: 200),
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(8),
                    /*[:memory] gradient: isSelected
                        ? const LinearGradient(
                      colors: [UIHelper.blackBlueColor, Colors.white],
                    )
                        : null, */
                    color: isSelected ? UIHelper.backgroundColor : UIHelper.backgroundColor,
                    border: Border.all(
                      color: isSelected ? UIHelper.backgroundColor : UIHelper.backgroundColor,
                      width: 1.2,
                    ),
                    /*[:memory] boxShadow: isSelected
                        ? [
                      BoxShadow(
                        color: Colors.blue.withOpacity(0.25),
                        blurRadius: 8,
                        offset: const Offset(0, 4),
                      )
                    ] : [],*/
                  ),
                  child: UIHelper.buildText(context, label,
                      style: AppTextStylesWidget.body, color: isSelected ? UIHelper.blackBlueColor : Colors.grey,
                  weight: isSelected ? FontWeight.w900 : FontWeight.w400),
                ),
              );
            }
            /*[:memory] Widget _buildTab(BuildContext context, Map<String, dynamic> tab, bool isSelected) {
              final String iconPath = tab['iconPath'];
              final String label = tab['label'];
              final Widget imageWidget = isSelected
                  ? Image.asset(iconPath, height: 32, width: 32)
                  : ColorFiltered(
                      colorFilter: const ColorFilter.matrix([
                        0.2126,
                        0.7152,
                        0.0722,
                        0,
                        0,
                        0.2126,
                        0.7152,
                        0.0722,
                        0,
                        0,
                        0.2126,
                        0.7152,
                        0.0722,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                      ]),
                      child: Image.asset(iconPath, height: 24, width: 24),
                    );
              return Tooltip(
                message: label,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 3),
                  decoration: BoxDecoration(
                    color: isSelected ? Colors.transparent : Colors.transparent,
                    border: Border.all(
                      color: UIHelper.backgroundColor,
                      width: 0.5,
                    ),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      imageWidget,
                      const SizedBox(width: 4),
                      UIHelper.buildText(
                        context,
                        label,
                        style: AppTextStylesWidget.headerViewUp,
                        weight: isSelected ? FontWeight.w700 : FontWeight.w500,
                        color: Colors.black,
                      ),
                    ],
                  ),
                ),
              );
            }*/

            @override
            Widget build(BuildContext context) {

              return Column(
                children: [
                  Theme(
                    data: Theme.of(context).copyWith(
                      splashColor: Colors.transparent,
                      highlightColor: Colors.transparent,
                      hoverColor: Colors.transparent,
                      tabBarTheme: TabBarTheme(
                        dividerColor: Colors.transparent,
                        dividerHeight: 1,
                        overlayColor: const MaterialStatePropertyAll(Colors.transparent),
                        indicator: UnderlineTabIndicator(
                          borderSide: BorderSide(width: 1, color: Colors.transparent),
                          insets: EdgeInsets.symmetric(horizontal: 16),
                        ),
                      ),
                    ),
                    child: TabBar(
                      controller: _tabController,
                      isScrollable: true,
                      indicatorColor: Colors.transparent,
                      labelPadding: const EdgeInsets.symmetric(horizontal: 4),
                      tabs: List.generate(widget.tabs.length, (index) {
                        final isSelected = _tabController.index == index;
                        return Tab(
                          child: _buildTab(context, widget.tabs[index], isSelected),
                        );
                      }),
                    ),
                  ),
                  SizedBox(height: 4),
                  Expanded(
                    child: TabBarView(
                      controller: _tabController,
                      children: widget.children,
                    ),
                  ),
                ],
              );
            }
          }
        submit_button_hold_place_bid_widget.dart: |
          import 'dart:async';

          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';

          class SubmitButtonHoldPlaceBidWidget extends StatefulWidget {
            final String initialLabel;
            final String finalLabel;
            final String initialImage;
            final String finalImage;
            final Duration holdDuration;
            const SubmitButtonHoldPlaceBidWidget({
              Key? key,
              this.initialLabel = "Enviar Lance",
              this.finalLabel = "Lance Aceito",
              this.initialImage = 'assets/images/theme/default-icon/coin.png',
              this.finalImage = 'assets/images/theme/default-icon/active.png',
              this.holdDuration = const Duration(seconds: 3),
            }) : super(key: key);
            @override
            _SubmitButtonHoldPlaceBidWidgetState createState() => _SubmitButtonHoldPlaceBidWidgetState();
          }
          class _SubmitButtonHoldPlaceBidWidgetState extends State<SubmitButtonHoldPlaceBidWidget> {
            bool isHolding = false;
            bool isActivated = false;
            double holdProgress = 0.0;
            Timer? _holdTimer;
            void _startHolding() {

              setState(() {

                isHolding = true;
                holdProgress = 0.0;
              });
              const tickRate = Duration(milliseconds: 50);
              final totalTicks = widget.holdDuration.inMilliseconds ~/ tickRate.inMilliseconds;
              _holdTimer = Timer.periodic(tickRate, (timer) {
                setState(() {

                  holdProgress += 1 / totalTicks;
                });
                if (holdProgress >= 1.0) {

                  _activateButton();
                  timer.cancel();
                }
              });
            }
            void _cancelHolding() {

              if (_holdTimer != null) {

                _holdTimer!.cancel();
              }
              setState(() {

                isHolding = false;
                holdProgress = 0.0;
              });
            }
            void _activateButton() {

              setState(() {

                isActivated = true;
                isHolding = false;
                holdProgress = 0.0;
              });
            }
            @override
            void dispose() {

              _holdTimer?.cancel();
              super.dispose();
            }
            @override
            Widget build(BuildContext context) {

              return GestureDetector(
                onLongPressStart: (_) => _startHolding(),
                onLongPressEnd: (_) => _cancelHolding(),
                child: AnimatedContainer(
                  duration: const Duration(milliseconds: 500),
                  curve: Curves.easeInOut,
                  width: double.infinity,
                  padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
                  decoration: BoxDecoration(
                    color: isActivated ? Colors.green : Colors.white,
                    borderRadius: BorderRadius.circular(50),
                    border: Border.all(color: Colors.black, width: 1.0),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.2),
                        spreadRadius: 2,
                        blurRadius: 5,
                        offset: const Offset(0, 3),
                      ),
                    ],
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      SizedBox(width: 16),
                      isHolding
                          ? Text("Lance em ${(3 * (1 - holdProgress)).ceil()}s", style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold))
                          : Text(isActivated ? widget.finalLabel : widget.initialLabel, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(width: 12),
                      AnimatedSwitcher(
                        duration: const Duration(milliseconds: 500),
                        child: isActivated
                            ? Image.asset(widget.finalImage, key: const ValueKey('finalImage'), width: 40, height: 40)
                            : Image.asset(widget.initialImage, key: const ValueKey('initialImage'), width: 40, height: 40),
                      )
                    ],
                  ),
                ),
              );
            }
          }
        tag_list_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class TagListWidget extends StatelessWidget {
            final List<dynamic> tags;
            const TagListWidget({
              Key? key,
              required this.tags,
            }) : super(key: key);
            @override
            Widget build(BuildContext context) {

              if (tags.isEmpty) return const SizedBox.shrink();
              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: tags.map((tag) {
                      return Container(
                        margin: const EdgeInsets.only(right: 8),
                        child: Row(
                          children: [
                            UIHelper.buildText(
                              context,
                              '#',
                              style: AppTextStylesWidget.body,
                              color: UIHelper.black37BlueColor,
                              weight: FontWeight.w700,
                            ),
                            const SizedBox(width: 2),
                            UIHelper.buildText(
                              context,
                              '$tag,',
                              style: AppTextStylesWidget.body,
                              color: UIHelper.black37BlueColor,
                              weight: FontWeight.w700,
                            ),
                          ],
                        ),
                      );
                    }).toList(),
                  ),
                ),
              );
            }
          }
        text_area_widget.dart: |
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class TextAreaWidget extends StatefulWidget {
            final TextEditingController controller;
            final String label;
            final String hint;
            final void Function(String value) onChanged;
            final int maxLines;
            final int minLines;
            final int? minLength;
            final int? maxLength;
            final bool obscureText;
            final TextAlign? textAlign;
            final FontWeight? fontWeight;
            final double? fontSize;
            final Color textColor;
            final Color backgroundColor;
            const TextAreaWidget({
              Key? key,
              required this.controller,
              required this.label,
              required this.hint,
              required this.onChanged,
              required this.textColor,
              required this.backgroundColor,
              this.maxLines = 7,
              this.minLines = 5,
              this.minLength,
              this.maxLength,
              this.obscureText = false,
              this.textAlign,
              this.fontWeight,
              this.fontSize,
            }) : super(key: key);
            @override
            State<TextAreaWidget> createState() => _TextAreaWidgetState();
          }
          class _TextAreaWidgetState extends State<TextAreaWidget> {
            String _textValue = "";
            String? _errorText;
            late final FocusNode _focusNode;
            @override
            void initState() {

              super.initState();
              _focusNode = FocusNode();
            }
            @override
            void dispose() {

              _focusNode.dispose();
              super.dispose();
            }
            void _handleTextChange(String value) {

              setState(() {

                _textValue = value;
                if (widget.minLength != null && value.length < widget.minLength!) {

                  _errorText = "Minimum ${widget.minLength} characters required";
                } else {
                  _errorText = null;
                }
              });
              widget.onChanged(value);
            }
            void _removeFocus() {

              FocusScope.of(context).unfocus();
            }
            @override
            Widget build(BuildContext context) {

              final counterText = widget.maxLength != null
                  ? "${widget.maxLength! - _textValue.length} characters remaining"
                  : "${_textValue.length} characters entered";
              return Stack(
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      TextField(
                        focusNode: _focusNode,
                        controller: widget.controller,
                        keyboardType: TextInputType.multiline,
                        obscureText: widget.obscureText,
                        onChanged: _handleTextChange,
                        textAlign: widget.textAlign ?? TextAlign.start,
                        textAlignVertical: TextAlignVertical.top,
                        minLines: widget.minLines,
                        maxLines: widget.maxLines,
                        maxLength: widget.maxLength,
                        style: TextStyle(
                          fontSize: widget.fontSize,
                          fontWeight: widget.fontWeight ?? FontWeight.normal,
                          color: widget.textColor,
                        ),
                        decoration: InputDecoration(
                          labelText: widget.label,
                          floatingLabelBehavior: FloatingLabelBehavior.always,
                          labelStyle: TextStyle(
                            fontWeight: widget.fontWeight ?? FontWeight.normal,
                            color: UIHelper.primaryColor,
                            fontSize: UIHelper.getFontSize(
                              simulatorIOSSize: 16.3,
                              simulatorAndroidSize: 16,
                              deviceIOSSize: 16.3,
                              deviceAndroidSize: 14,
                            ),
                          ),
                          hintText: widget.hint,
                          hintStyle: TextStyle(
                            color: Colors.black38,
                            fontWeight: widget.fontWeight ?? FontWeight.normal,
                            fontSize: widget.fontSize,
                          ),
                          filled: true,
                          fillColor: widget.backgroundColor,
                          counterText: "",
                          errorText: _errorText,
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                            borderSide: const BorderSide(color: Colors.grey, width: 0.5),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                            borderSide: const BorderSide(color: Colors.black, width: 1),
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 4, right: 36),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            Text(
                              counterText,
                              style: const TextStyle(fontSize: 12, color: Colors.black54),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  Positioned(
                    bottom: 24,
                    right: 0,
                    child: Material(
                      color: Colors.transparent,
                      child: IconButton(
                        icon: const Icon(Icons.check),
                        iconSize: 24,
                        color: UIHelper.blackBlueColor,
                        onPressed: _removeFocus,
                        tooltip: 'Hide keyboard',
                      ),
                    ),
                  ),
                ],
              );
            }
          }
        ui_helper_widget.dart: |
          import 'dart:io';
          import 'dart:ui';

          import 'package:device_info_plus/device_info_plus.dart';
          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:flutter/services.dart';
          import 'package:google_fonts/google_fonts.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/text_area_widget.dart';

          class UIHelper {
            static bool _isSimulator = false;
            static bool _isAndroid = false;
            static bool _isIOS = false;
            static const Color backgroundColor = Color(0xCCF8F7F7);
            static const Color primaryColor = Color(0xFF741952);
            static const Color secondaryColor = Color(0xFFFE3174);
            static const Color accentColor = Color(0xFFF1C15D);
            static const Color successColor = Color(0xFF94BB68);
            static const Color infoColor = Color(0xFF09A3AD);
            static const Color blackBlueColor = Color(0xFF0C0A2B);
            static const Color black37BlueColor = Color(0xFF817E8F);
            static Future<void> detectSimulator() async {
              final deviceInfo = DeviceInfoPlugin();
              if (Platform.isIOS) {

                _isIOS = true;
                final iosInfo = await deviceInfo.iosInfo;
                const simulators = ["Eduardo-Rocha---MacBook-Pro.local", "iPhone Simulator"];
                _isSimulator = simulators.contains(Platform.localHostname) || !iosInfo.isPhysicalDevice;
              } else if (Platform.isAndroid) {
                _isAndroid = true;
                final androidInfo = await deviceInfo.androidInfo;
                const emulators = [
                  "google_sdk", "sdk_gphone", "sdk", "Emulator", "Android SDK built for x86", "Genymotion"
                ];
                _isSimulator = !androidInfo.isPhysicalDevice ||
                    emulators.any((em) => androidInfo.model.toLowerCase().contains(em.toLowerCase()));
              }
            }
            static double getFontSize({
              required double simulatorIOSSize,
              required double simulatorAndroidSize,
              required double deviceIOSSize,
              required double deviceAndroidSize,
            }) {
              if (_isSimulator) {

                return _isIOS ? simulatorIOSSize : simulatorAndroidSize;
              }
              return _isIOS ? deviceIOSSize : deviceAndroidSize;
            }
            static Future<String> sizeByDeviceModel() async {
              final deviceInfo = DeviceInfoPlugin();
              if (_isIOS) {

                final iosInfo = await deviceInfo.iosInfo;
                return iosInfo.modelName.split(' ').elementAtOrNull(1) ?? 'unknown';
              }
              return '1.2';
            }
            static Widget buildTextField({
              required String label,
              required String hint,
              IconData? icon,
              TextInputType keyboardType = TextInputType.text,
              required void Function(String value) onChanged,
              FocusNode? focusNode,
              void Function(String input)? onSubmitted,
              required bool obscureText,
              TextAlign textAlign = TextAlign.start,
              FontWeight fontWeight = FontWeight.w500,
              int? minLength,
              List<TextInputFormatter>? inputFormatters,
              TextEditingController? controller,
              IconButton? suffixIcon,
            }) {
              return Padding(
                padding: const EdgeInsets.only(top: 16),
                child: TextField(
                  controller: controller,
                  keyboardType: keyboardType,
                  obscureText: obscureText,
                  onChanged: onChanged,
                  onSubmitted: onSubmitted,
                  focusNode: focusNode,
                  textAlign: textAlign,
                  style: TextStyle(
                    fontWeight: fontWeight,
                    color: blackBlueColor,
                    fontSize: getFontSize(
                      simulatorIOSSize: 15,
                      simulatorAndroidSize: 16,
                      deviceIOSSize: 20,
                      deviceAndroidSize: 14,
                    ),
                  ),
                  inputFormatters: [
                    if (minLength != null) LengthLimitingTextInputFormatter(minLength),
                    ...?inputFormatters,
                  ],
                  decoration: InputDecoration(
                    labelText: label,
                    labelStyle: TextStyle(
                      fontWeight: fontWeight,
                      color: blackBlueColor,
                      fontSize: getFontSize(
                        simulatorIOSSize: 14,
                        simulatorAndroidSize: 16,
                        deviceIOSSize: 15,
                        deviceAndroidSize: 14,
                      ),
                    ),
                    hintText: hint,
                    prefixIcon: icon != null
                        ? Icon(icon, size: 20, color: blackBlueColor)
                        : null,
                    suffixIcon: suffixIcon,
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
                    border: _defaultInputBorder(),
                    enabledBorder: _enabledInputBorder(),
                    focusedBorder: _focusedInputBorder(),
                  ),
                ),
              );
            }
            static Widget buildTextArea({
              required String label,
              required String hint,
              required void Function(String value) onChanged,
              required TextEditingController controller,
              int maxLines = 8,
              int minLines = 2,
              int? minLength,
              int? maxLength,
              bool obscureText = false,
              TextAlign textAlign = TextAlign.start,
              FontWeight fontWeight = FontWeight.normal,
              double fontSize = 14,
              Color textColor = Colors.black,
              Color backgroundColor = Colors.white,
            }) {
              return TextAreaWidget(
                label: label,
                hint: hint,
                controller: controller,
                onChanged: onChanged,
                maxLines: maxLines,
                minLines: minLines,
                minLength: minLength,
                maxLength: maxLength,
                obscureText: obscureText,
                textAlign: textAlign,
                fontWeight: fontWeight,
                fontSize: fontSize,
                textColor: textColor,
                backgroundColor: backgroundColor,
              );
            }
            static Widget buildDropdown({
              required BuildContext context,
              required String label,
              required List<String> options,
              required String selectedValue,
              required ValueChanged<String?> onChanged,
            }) {
              return DropdownButtonFormField<String>(
                value: selectedValue,
                decoration: InputDecoration(
                  labelText: label,
                  border: buildInputBorder(Colors.grey),
                  contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                ),
                items: options
                    .map((option) => DropdownMenuItem<String>(
                  value: option,
                  child: buildText(context, option, style: AppTextStylesWidget.subtitle),
                ))
                    .toList(),
                onChanged: onChanged,
              );
            }
            static Widget buildText(
                BuildContext context,
                String text, {
                  Color color = blackBlueColor,
                  FontWeight weight = FontWeight.normal,
                  TextStyle Function(BuildContext context)? style,
                  int? maxLines,
                  TextAlign textAlign = TextAlign.start,
                }) {
              return Text(
                text,
                style: style?.call(context)?.copyWith(color: color, fontWeight: weight) ??
                    GoogleFonts.roboto(color: blackBlueColor, fontWeight: weight),
                maxLines: maxLines,
                overflow: maxLines != null ? TextOverflow.ellipsis : null,
                textAlign: textAlign,
              );
            }
            static OutlineInputBorder _defaultInputBorder() =>
                OutlineInputBorder(borderRadius: BorderRadius.circular(8));
            static OutlineInputBorder _enabledInputBorder() =>
                OutlineInputBorder(borderRadius: BorderRadius.circular(8), borderSide: const BorderSide(color: Colors.grey, width: 0.5));
            static OutlineInputBorder _focusedInputBorder() =>
                OutlineInputBorder(borderRadius: BorderRadius.circular(8), borderSide: const BorderSide(color: Colors.black, width: 1));
            static OutlineInputBorder buildInputBorder(Color color) {

              return OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: color, width: 0.5),
              );
            }
            static Future<double> getDynamicSizedBoxHeight() async {
              if (Platform.isIOS) {

                final iosInfo = await DeviceInfoPlugin().iosInfo;
                final version = double.tryParse(iosInfo.systemVersion.split('.').first) ?? 0;
                return version < 10 ? 60 : 60;
              }
              return 16;
            }
            static Widget buildDynamicSizedBox({required AsyncSnapshot<double> snapshot}) {

              return SizedBox(height: snapshot.data ?? 16);
            }
          }
        vertical_notification_ticker_widget.dart: |
          import 'dart:async';

          import 'package:flutter/cupertino.dart';
          import 'package:flutter/material.dart';
          import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
          import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

          class VerticalNotificationTicker extends StatefulWidget {
            final List<String> messages;
            final IconData icon;
            final VoidCallback onClose;
            const VerticalNotificationTicker({
              super.key,
              required this.messages,
              required this.icon,
              required this.onClose,
            });
            @override
            State<VerticalNotificationTicker> createState() => _VerticalNotificationTickerState();
          }
          class _VerticalNotificationTickerState extends State<VerticalNotificationTicker> {
            int _currentIndex = 0;
            Timer? _tickerTimer;
            Timer? _resumeTimer;
            @override
            void initState() {

              super.initState();
              _startTicker();
            }
            void _startTicker() {

              _tickerTimer?.cancel();
              _tickerTimer = Timer.periodic(const Duration(seconds: 2), (_) {
                if (mounted) {

                  setState(() {

                    _currentIndex = (_currentIndex + 1) % widget.messages.length;
                  });
                }
              });
            }
            void _pauseTicker() {

              _tickerTimer?.cancel();
              _resumeTimer?.cancel();
              _resumeTimer = Timer(const Duration(seconds: 3), _startTicker);
            }
            @override
            void dispose() {

              _tickerTimer?.cancel();
              _resumeTimer?.cancel();
              super.dispose();
            }
            @override
            @override
            Widget build(BuildContext context) {

              if (widget.messages.isEmpty) return const SizedBox.shrink();
              final currentMessage = widget.messages[_currentIndex];
              return Semantics(
                label: 'Vertical notification ticker',
                child: GestureDetector(
                  onTapDown: (_) => _pauseTicker(),
                  onTapCancel: _startTicker,
                  child: Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                    decoration: BoxDecoration(
                      border: Border.all(color: UIHelper.backgroundColor),
                      borderRadius: BorderRadius.zero,
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Wrap(
                          children: [
                            Semantics(
                                label: 'Notification ${_currentIndex + 1} of ${widget.messages.length}',
                                child: UIHelper.buildText(
                                  context,
                                  '${_currentIndex + 1}/${widget.messages.length}',
                                  style: AppTextStylesWidget.body,
                                  color: UIHelper.blackBlueColor, weight: FontWeight.w800,
                                  maxLines: 1,
                                )
                            ),
                            const SizedBox(width: 12),
                            AnimatedSwitcher(
                              duration: const Duration(milliseconds: 300),
                              transitionBuilder: (child, animation) => FadeTransition(opacity: animation, child: child),
                              child: UIHelper.buildText(
                                context,
                                currentMessage,
                                style: AppTextStylesWidget.body,
                                color: UIHelper.blackBlueColor,
                                maxLines: 1,
                              ),
                            ),
                            const SizedBox(width: 12),
                          ],
                        ),
                        Container(
                          child: GestureDetector(
                            onTap: widget.onClose,
                            behavior: HitTestBehavior.translucent,
                            child: Padding(
                              padding: const EdgeInsets.all(0),
                              child: const Icon(Icons.expand_circle_down_rounded, size: 18, color: UIHelper.infoColor),
                            ),
                          ),
                        )
                      ],
                    ),
                  ),
                ),
              );
            }
          }
    views/:
      access_view.dart: |
        import 'dart:io';

        import 'package:device_info_plus/device_info_plus.dart';
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:provider/provider.dart';
        import 'package:showcaseview/showcaseview.dart';
        import 'package:xiis/data/shared_prefs_service.dart';
        import 'package:xiis/l10n/app_localizations.dart';
        import 'package:xiis/presentation/providers/access_provider.dart';
        import 'package:xiis/presentation/sections/components/password_confirmation_field_component.dart';
        import 'package:xiis/presentation/sections/components/submit_button.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/confirm_button_widget.dart';
        import 'package:xiis/presentation/sections/widgets/content_recovery_account_form_widget.dart';
        import 'package:xiis/presentation/sections/widgets/content_validation_form_widget.dart';
        import 'package:xiis/presentation/sections/widgets/generic_bottom_sheet_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
        import 'package:xiis/presentation/views/entrance_view.dart';

        class AccessView extends StatefulWidget {
          final List<dynamic> data;
          const AccessView({super.key, required this.data});
          @override
          _AccessViewState createState() => _AccessViewState();
        }

        class _AccessViewState extends State<AccessView> {
          final TextEditingController _controller = TextEditingController();
          static final GlobalKey _createAccess = GlobalKey();
          static final GlobalKey _accessAccount = GlobalKey();
          String _uiId = "Unknown";

          AppBar _buildAppBar(BuildContext context) {

            return AppBar(
              automaticallyImplyLeading: false,
              backgroundColor: Colors.white,
              elevation: 0,
              title: Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Image.asset(
                    'assets/images/theme/default-icon/new_user.png',
                    width: 22, height: 22,
                    color: Color(0xFF741952),
                  ),
                  const SizedBox(width: 15),
                  UIHelper.buildText(
                    context, AppLocalizations.of(context).translate('registerViewTitle'),
                    style: AppTextStylesWidget.title,
                    weight: FontWeight.w600,
                    color: Color(0xFF741952),
                  )
                ],
              ),
              bottom: PreferredSize(
                preferredSize: Size.fromHeight(80),
                child: TabBar(
                  indicatorColor: Color(0xFF09A3AD),
                  labelColor: Colors.black,
                  unselectedLabelColor: Colors.grey,
                  tabs: [
                    Tab(
                      height: 80,
                      child: Showcase(
                        overlayOpacity: 0.2,
                        key: _createAccess,
                        description: 'Crie seu acesso ao XiiS',
                        child: SizedBox(width: 120, child: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Image.asset(
                              'assets/images/theme/default-icon/new_user.png',
                              width: 32, height: 32,
                              color: Color(0xFF741952),
                            ),
                            const SizedBox(height: 4),
                            UIHelper.buildText(
                              context,
                              "Criar Acesso",
                              style: AppTextStylesWidget.body,
                              weight: FontWeight.w600,
                              color: Color(0xFF741952),
                            ),
                          ],
                        ))
                      ),
                    ),
                    Tab(
                      height: 80,
                      child: Showcase(
                          overlayOpacity: 0.2,
                          key: _accessAccount,
                          description: 'Acesse sua conta.',
                          child: SizedBox(width: 120, child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Image.asset(
                                'assets/images/theme/default-icon/new_user.png',
                                width: 32, height: 32,
                                color: Color(0xFF741952),
                              ),
                              const SizedBox(height: 4),
                              UIHelper.buildText(
                                context, "Acessar",
                                style: AppTextStylesWidget.body,
                                weight: FontWeight.w600,
                                color: Color(0xFF741952),
                              ),
                            ],
                          ))
                      ),
                    ),
                  ],
                ),
              ),
            );
          }
          Widget _buildRegisterForm(BuildContext context) {

            return Consumer<AccessProvider>(
              builder: (context, provider, child) {
                return SingleChildScrollView(
                  child: ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight: MediaQuery.of(context).size.height,
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 32),
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          child: UIHelper.buildText(
                            context,
                            'O n√∫mero exibido acima √© o registro √∫nico do aparelho que ser√° associado √† conta de acesso ao XiiS',
                            style: AppTextStylesWidget.body,
                            color: Colors.black,
                          ),
                        ),
                        const SizedBox(height: 24),
                        _buildFormFieldsRegister(context, provider),
                        const SizedBox(height: 16),
                        ConfirmButtonWidget(
                          label: "Criar Conta",
                          isActive: provider.validateRegisterForm(),
                          activeIcon: Icons.check_circle,
                          inactiveIcon: Icons.cancel,
                          onPressed: provider.isLoading
                              ? () {} : () async {
                            provider.resetStatus();
                            await provider.registerUser(_uiId);
                            if (provider.isSuccess) {

                              GenericBottomSheetWidget.show(
                                content: ContentValidationFormWidget(codeOptions: provider.numbers),
                                context: context,
                                title: '',
                              );
                            } else {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text("Erro ao criar conta. Tente novamente."),
                                ),
                              );
                            }
                          },
                        ),
                        SizedBox(height: MediaQuery.of(context).padding.bottom + 32),
                      ],
                    ),
                  ),
                );
              },
            );
          }
          Widget _buildLoginForm(BuildContext context) {

            return Consumer<AccessProvider>(
              builder: (context, provider, child) {
                return SingleChildScrollView(
                  child: ConstrainedBox(
                    constraints: BoxConstraints(minHeight: MediaQuery.of(context).size.height),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 32),
                        UIHelper.buildText(
                          context,
                          '   O n√∫mero exibido acima √© o registro √∫nico do aparelho que ser√° associado √† conta de acesso ao XiiS',
                          style: AppTextStylesWidget.body,
                          color: Colors.black,
                        ),
                        const SizedBox(height: 24),
                        _buildFormFieldsLogin(context, provider),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () => _showRecoveryAccount(context),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.transparent,
                            shadowColor: Colors.transparent,
                            elevation: 0,
                            padding: EdgeInsets.zero,
                          ),
                          child: UIHelper.buildText(context, 'Recuperar Acesso',
                              style: AppTextStylesWidget.title, color: Colors.pinkAccent),
                        ),
                        const SizedBox(height: 16),
                        ConfirmButtonWidget(
                            label: "Acessar",
                            isActive: provider.validateLoginForm(),
                            activeIcon: Icons.check_circle,
                            inactiveIcon: Icons.cancel,
                            onPressed: () async {
                              provider.resetStatus();
                              await provider.loginUser();
                              if (provider.isSuccess) {

                                await Future.delayed(const Duration(milliseconds: 200));
                                Navigator.of(context).pushReplacement(
                                  PageRouteBuilder(
                                    transitionDuration: const Duration(milliseconds: 300),
                                    pageBuilder: (context, animation, secondaryAnimation) => EntranceView(),
                                    transitionsBuilder: (context, animation, secondaryAnimation, child) {
                                      return FadeTransition(
                                        opacity: animation,
                                        child: child,
                                      );
                                    },
                                  ),
                                );
                              }
                            }
                        ),
                      ],
                    ),
                  ),
                );
              },
            );
          }
          void _showRecoveryAccount(BuildContext context) {

            GenericBottomSheetWidget.show(
              context: context, title: "Recuperar Acesso",
              content: ContentRecoveryAccountFormWidget(),
            );
          }
          Future<void> showModalTopSheet({
            required BuildContext context,
            required Widget child,
          }) async {
            Consumer<AccessProvider>(
                builder: (context, provider, child) {
                return SingleChildScrollView(
                child: ConstrainedBox(
                  constraints: BoxConstraints(minHeight: MediaQuery.of(context).size.height),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 32),
                      UIHelper.buildText(
                        context,
                        '   O n√∫mero exibido acima √© o registro √∫nico do aparelho que ser√° associado √† conta de acesso ao XiiS',
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                      ),
                      const SizedBox(height: 24),
                      _buildFormFieldsLogin(context, provider),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () => _showRecoveryAccount(context),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          shadowColor: Colors.transparent,
                          elevation: 0,
                          padding: EdgeInsets.zero,
                        ),
                        child: UIHelper.buildText(context, 'Recuperar Acesso',
                            style: AppTextStylesWidget.title, color: Colors.pinkAccent),
                      ),
                      const SizedBox(height: 16),
                      _buildLoginSubmitButton(provider, context),
                    ],
                  ),
                ),
              );
            });
          }
          Widget _buildFormFieldsRegister(BuildContext context, AccessProvider provider) {

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                UIHelper.buildText(
                    context, "Cadastre email e senha para acesso",
                    style: AppTextStylesWidget.title, color: Colors.black
                ),
                UIHelper.buildTextField(
                    label: "E-mail", hint: "seu melhor e-mail",
                    icon: Icons.mail_outline,
                    fontWeight: FontWeight.normal,
                    keyboardType: TextInputType.emailAddress,
                    controller: _controller,
                    onChanged: (value) {
                      _controller.value = _controller.value.copyWith(
                        text: value.toLowerCase(),
                        selection: TextSelection.collapsed(offset: value.length),
                      );
                      provider.setRegisterEmail(value.toLowerCase());
                    },
                    obscureText: false,
                ),
                const SizedBox(height: 16),
                PasswordConfirmationField(
                  onPasswordChanged: provider.setRegisterPassword,
                  onConfirmPasswordChanged: provider.setRegisterPasswordConfirm,
                ),
                Center(
                  child: UIHelper.buildText(
                    context,
                    "   ${(provider.errorMessage != null) ? provider.errorMessage! : ''}",
                    style: AppTextStylesWidget.small,
                    weight: FontWeight.normal,
                    color: const Color(0xFF741952),
                  ),
                ),
                Divider(),
                Row(
                  children: [
                    Checkbox(
                      value: provider.acceptsAccountCreation,
                      onChanged: (value) => provider.setAcceptsAccountCreation(value!),
                    ),
                    Expanded(
                      child: UIHelper.buildText(
                        context,
                        "aceito criar uma conta",
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                      ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    Checkbox(
                      value: provider.agreesWithRules,
                      onChanged: (value) => provider.setAgreesWithRules(value!),
                    ),
                    Expanded(
                      child: UIHelper.buildText(
                        context,
                        "concordo com as regras de uso",
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                      ),
                    ),
                  ],
                ),
              ],
            );
          }
          Widget _buildFormFieldsLogin(BuildContext context, AccessProvider provider) {

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                UIHelper.buildText(context, "   Cadastre email e senha para acesso",
                    style: AppTextStylesWidget.title, color: Colors.black),
                UIHelper.buildTextField(
                    label: "E-mail",
                    hint: "seu melhor e-mail",
                    icon: Icons.mail_outline, fontWeight: FontWeight.normal,
                    keyboardType: TextInputType.emailAddress,
                    controller: _controller,
                    onChanged: (value) {
                      _controller.value = _controller.value.copyWith(
                        text: value.toLowerCase(),
                        selection: TextSelection.collapsed(offset: value.length),
                      );
                      provider.setLoginEmail(value.toLowerCase());
                    },
                    obscureText: false
                ),
                UIHelper.buildTextField(
                    label: "Senha",
                    hint: "m√≠nimo 6 d√≠gitos",
                    icon: Icons.lock, fontWeight: FontWeight.normal,
                    keyboardType: TextInputType.visiblePassword,
                    obscureText: true,
                    onChanged: provider.setLoginPassword
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: UIHelper.buildText(context, (provider.errorMessage != null) ? '   ${provider.errorMessage!}' : '', style: AppTextStylesWidget.small, weight: FontWeight.normal, color: Color(0xFF741952)),
                    )
                  ],
                ),
                Divider(),
              ],
            );
          }
          Widget _buildLoginSubmitButton(AccessProvider provider, BuildContext context) {

            return Align(
              alignment: Alignment.centerRight,
              child: SizedBox(
                width: 300,
                child: SubmitButton(
                  label: provider.isLoading ? "Carregando" : "Acessar",
                  isSuccess: provider.isSuccess,
                  hasError: provider.errorMessage != null,
                  onSubmit: provider.isLoading
                      ? () async {}
                      : () async {
                    provider.resetStatus();
                    await provider.loginUser();
                    if (provider.isSuccess) {

                      await Future.delayed(const Duration(milliseconds: 200));
                    }
                  },
                  onEnabled: null,
                  onSuccess: () {
                    Navigator.of(context).pushReplacement(
                      PageRouteBuilder(
                        transitionDuration: const Duration(milliseconds: 300),
                        pageBuilder: (context, animation, secondaryAnimation) => EntranceView(),
                        transitionsBuilder: (context, animation, secondaryAnimation, child) {
                          return FadeTransition(
                            opacity: animation,
                            child: child,
                          );
                        },
                      ),
                    );
                  },
                  onError: null,
                ),
              ),
            );
          }
          Future<void> _initializeUiId() async {
            String deviceId = await _getDeviceId();
            setState(() {

              _uiId = deviceId;
            });
          }
          Future<String> _getDeviceId() async {
            final deviceInfo = DeviceInfoPlugin();
            if (Platform.isAndroid) {

              final androidInfo = await deviceInfo.androidInfo;
              return androidInfo.id;
            } else if (Platform.isIOS) {
              final iosInfo = await deviceInfo.iosInfo;
              return iosInfo.identifierForVendor ?? "Unknown";
            }
            return "Unsupported Platform";
          }
          Future<void> checkAndShowModal(BuildContext context, AccessProvider accessProvider) async {
            bool userAccountCreated = await SharedPrefsService.getBool('userAccountCreated');
            bool userAccountActive = await SharedPrefsService.getBool('userAccountActive');
            if (userAccountCreated && !userAccountActive) {

              GenericBottomSheetWidget.show(
                  content: ContentValidationFormWidget(codeOptions: widget.data),
                  context: context, title: ''
              );
            }
          }
          @override
          void initState() {

            super.initState();
            _initializeUiId();
            Future.delayed(const Duration(milliseconds: 500), () {
              ShowCaseWidget.of(context).startShowCase([
                _createAccess, _accessAccount
              ]);
            });
            WidgetsBinding.instance.addPostFrameCallback((_) {
              AccessProvider accessProvider = AccessProvider();
              checkAndShowModal(context, accessProvider);
            });
          }
          static final GlobalKey _tabCreateAccess = GlobalKey();
          static final GlobalKey _tabAccess = GlobalKey();
          @override
          Widget build(BuildContext context) {

            return ChangeNotifierProvider(
              create: (_) => AccessProvider(),
              child: DefaultTabController(
                length: 2, child: Scaffold(
                  appBar: _buildAppBar(context),
                  backgroundColor: Colors.white,
                  body: Padding(
                      padding: EdgeInsets.only(left: 40, right: 40),
                      child: TabBarView(
                        physics: const NeverScrollableScrollPhysics(),
                        children: <Widget>[
                          _buildRegisterForm(context),
                          _buildLoginForm(context)
                        ],
                      ))),
              ),
            );
          }
        }
      communication_view.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';

        class CommunicationView extends StatelessWidget {
          const CommunicationView({super.key});
          @override
          Widget build(BuildContext context) {

            return Scaffold(
              backgroundColor: Colors.white,
              appBar: AppBar(
                centerTitle: false,
                elevation: 0,
                backgroundColor: const Color(0xFF00BF6D),
                foregroundColor: Colors.white,
                title: const Text("Chats"),
              ),
              body: Column(
                children: [
                  Container(
                    padding: const EdgeInsets.fromLTRB(
                      16.0,
                      0,
                      16.0,
                      16.0,
                    ),
                    color: const Color(0xFF00BF6D),
                    child: Form(
                      child: TextFormField(
                        autofocus: true,
                        textInputAction: TextInputAction.search,
                        onChanged: (value) {
                        },
                        decoration: InputDecoration(
                          fillColor: Colors.white,
                          prefixIcon: Icon(
                            Icons.search,
                            color: const Color(0xFF1D1D35).withOpacity(0.64),
                          ),
                          hintText: "Search",
                          hintStyle: TextStyle(
                            color: const Color(0xFF1D1D35).withOpacity(0.64),
                          ),
                          filled: true,
                          contentPadding: const EdgeInsets.symmetric(
                              horizontal: 16.0 * 1.5, vertical: 16.0),
                          border: const OutlineInputBorder(
                            borderSide: BorderSide.none,
                            borderRadius: BorderRadius.all(Radius.circular(50)),
                          ),
                        ),
                      ),
                    ),
                  ),
                  const Expanded(
                    child: SingleChildScrollView(
                      padding: EdgeInsets.symmetric(vertical: 16.0),
                      child: Column(
                        children: [
                          RecentSearchContacts(),
                          SizedBox(height: 16.0),
                          SuggestedContacts()
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            );
          }
        }
        class SuggestedContacts extends StatelessWidget {
          const SuggestedContacts({super.key});
          @override
          Widget build(BuildContext context) {

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                  child: Text(
                    "Suggested",
                    style: Theme.of(context).textTheme.titleSmall!.copyWith(
                      color: Theme.of(context)
                          .textTheme
                          .titleSmall!
                          .color!
                          .withOpacity(0.32),
                    ),
                  ),
                ),
                const SizedBox(height: 16.0),
                ...List.generate(
                  demoContactsImage.length,
                      (index) => ListTile(
                    contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16.0, vertical: 16.0 / 2),
                    leading: CircleAvatar(
                      radius: 24,
                      backgroundImage: NetworkImage(demoContactsImage[index]),
                    ),
                    title: const Text("Jenny Wilson"),
                    onTap: () {},
                  ),
                ),
              ],
            );
          }
        }
        class RecentSearchContacts extends StatelessWidget {
          const RecentSearchContacts({
            super.key,
          });
          @override
          Widget build(BuildContext context) {

            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "Recent search",
                    style: Theme.of(context).textTheme.titleSmall!.copyWith(
                      color: Theme.of(context)
                          .textTheme
                          .titleSmall!
                          .color!
                          .withOpacity(0.32),
                    ),
                  ),
                  const SizedBox(height: 16.0),
                  SizedBox(
                    width: double.infinity,
                    height: 56,
                    child: Stack(
                      children: [
                        ...List.generate(
                          demoContactsImage.length + 1,
                              (index) => Positioned(
                            left: index * 48,
                            child: Container(
                              decoration: BoxDecoration(
                                border: Border.all(
                                    width: 4,
                                    color: Theme.of(context).scaffoldBackgroundColor),
                                shape: BoxShape.circle,
                              ),
                              child: index < demoContactsImage.length
                                  ? CircleAvatar(
                                radius: 26,
                                backgroundImage:
                                NetworkImage(demoContactsImage[index]),
                              )
                                  : const RoundedCounter(total: 35),
                            ),
                          ),
                        ),
                      ],
                    ),
                  )
                ],
              ),
            );
          }
        }
        class RoundedCounter extends StatelessWidget {
          final int total;
          const RoundedCounter({super.key, required this.total});
          @override
          Widget build(BuildContext context) {

            return Container(
              height: 52,
              width: 52,
              decoration: BoxDecoration(
                color: Theme.of(context).brightness == Brightness.dark
                    ? const Color(0xFF2E2F45)
                    : const Color(0xFFEBFAF3),
                shape: BoxShape.circle,
              ),
              child: Center(
                child: Text(
                  "$total+",
                  style: Theme.of(context).textTheme.titleMedium,
                ),
              ),
            );
          }
        }
        final List<String> demoContactsImage = [
          'https'
        ];
      content_preview_component.dart: |
        import 'dart:ui';

        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/sections/components/coin_counter_action_component.dart';
        import 'package:xiis/presentation/sections/components/show_open_content_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/tag_list_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ContentPreviewComponent extends StatelessWidget {
          final Map<String, dynamic> contentData;
          const ContentPreviewComponent({super.key, required this.contentData});
          Widget _buildLoadImageContent(double size, BuildContext context, Map<String, dynamic> body) {

            final String coverImageUrl = "${DioClientService.baseUrl}${body['cover_image_url']}";
            return Positioned.fill(
                child: ClipRRect(
                    borderRadius: BorderRadius.circular(0),
                    child: Stack(
                      children: [
                        Image.network(
                          coverImageUrl,
                          width: double.infinity,
                          height: MediaQuery.of(context).size.width,
                          fit: BoxFit.cover,
                        ),
                        if (body['settings']['blur']['apply'])
                          Positioned.fill(
                            child: BackdropFilter(
                              filter: ImageFilter.blur(
                                  sigmaX: body['settings']['blur']['level'],
                                  sigmaY: body['settings']['blur']['level']
                              ),
                              child: Container(
                                child: const Center(
                                  child: Icon(Icons.lock, color: Colors.white, size: 40),
                                ),
                              ),
                            ),
                          ),
                      ],
                    )
                )
            );
          }
          Widget _buildOpenContentActions(int contentId, bool hasTippedOwner) {

            return Positioned(
                bottom: 8, right: 8,
                child: CoinCounterActionComponent(
                    content: contentData['last_content'],
                    hasTipped: hasTippedOwner, onSuccess: () {
                }
                )
            );
          }
          @override
          Widget build(BuildContext context) {

            late List<dynamic>tags;
            tags = contentData['last_content']['settings']['tag_list'];
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                LayoutBuilder(
                  builder: (context, constraints) {
                    final size = constraints.maxWidth;
                    return Container(
                      width: double.infinity,
                      height: size,
                      decoration: BoxDecoration(
                        color: Colors.grey[400],
                        border: Border.all(color: Colors.grey, width: 0),
                      ),
                      child: ClipRRect(
                        child: Stack(
                          fit: StackFit.expand,
                          children: [
                            GestureDetector(
                              onTap: () => Navigator.push(
                                context, MaterialPageRoute(
                                    builder: (context) => ShowOpenContentComponent(
                                        bodyContent: contentData['last_content'],
                                        profile: {
                                          'name': contentData['name'],
                                          'location': contentData['location'],
                                          'avatar_url': contentData['avatar_url'],
                                          'relationship': {
                                            'status': contentData['relationship']['status'],
                                            'type': contentData['relationship']['type']
                                          }
                                    })
                                ),
                              ),
                              child: LayoutBuilder(
                                builder: (context, constraints) {
                                  double size = constraints.maxWidth;
                                  return Container(
                                    width: size, height: size,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(0),
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.grey.withOpacity(0.2),
                                          spreadRadius: 1,
                                          blurRadius: 0,
                                        ),
                                      ],
                                    ),
                                    child: Stack(
                                      children: [
                                        _buildLoadImageContent(size, context, contentData['last_content']),
                                        _buildOpenContentActions(contentData['last_content']['id'], false),
                                      ],
                                    ),
                                  );
                                },
                              ),
                            )
                          ],
                        ),
                      ),
                    );
                  },
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 5),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          UIHelper.buildText(
                              context, '${contentData['last_content']['created_at']}', style: AppTextStylesWidget.body, color: Colors.black
                          )
                        ],
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Wrap(
                            children: [
                              Padding(padding: EdgeInsets.symmetric(vertical: 2),
                              child: Image.asset(
                                'assets/images/theme/default-icon/comment.png',
                                width: 16, height: 16, color: UIHelper.black37BlueColor,
                              )),
                              SizedBox(width: 8),
                              UIHelper.buildText(context, 'coment√°rios:',
                                  style: AppTextStylesWidget.body, color: UIHelper.black37BlueColor),
                              SizedBox(width: 4),
                              UIHelper.buildText(context, '${contentData['last_content']['comments_count'] }',
                                  style: AppTextStylesWidget.body, color: UIHelper.black37BlueColor,
                                  weight: FontWeight.w700),
                            ],
                          ),
                        ],
                      )
                    ],
                  )
                ),
                if (tags.isNotEmpty)
                  TagListWidget(tags: tags),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          /*[:memory] Padding(padding: EdgeInsets.only(top: 4), child: Image.asset(
                            'assets/images/theme/default-icon/comment.png',
                            width: 14, height: 14,
                          )),
                          const SizedBox(width: 4),
                          */
                          Expanded(
                            child: UIHelper.buildText(
                              context, '   ${contentData['last_content']['description']}',
                              style: AppTextStylesWidget.body,
                              color: Colors.black,
                            ),
                          ),
                        ],
                      ),
                    ],
                  )
                ),
                SizedBox(height: 16),
              ],
            );
          }
        }
      content_view.dart: |
        import 'dart:ui';

        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:flutter_svg/svg.dart';
        import 'package:provider/provider.dart';
        import 'package:vibration/vibration.dart';
        import 'package:xiis/presentation/providers/content_provider.dart';
        import 'package:xiis/presentation/providers/entrance_provider.dart';
        import 'package:xiis/presentation/sections/components/profile_header_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/close_button_widget.dart';
        import 'package:xiis/presentation/sections/widgets/floating_validation_or_actions_widget.dart';
        import 'package:xiis/presentation/sections/widgets/generic_modal_widget.dart';
        import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ContentView extends StatefulWidget {
          const ContentView({super.key});
          @override
          _ContentViewState createState() => _ContentViewState();
        }
        class _ContentViewState extends State<ContentView>
            with TickerProviderStateMixin {
          late TabController _mainTabController;
          late TabController _subTabController;
          final TextEditingController _titleController = TextEditingController();
          final TextEditingController _descriptionController = TextEditingController();
          bool _isSubmitting = false;
          List<String> _tags = [];
          bool _isDescriptionVisible = false;
          @override
          void initState() {

            super.initState();
            _mainTabController = TabController(length: 2, vsync: this);
            _subTabController = TabController(length: 1, vsync: this);
          }
          @override
          void dispose() {

            _mainTabController.dispose();
            _subTabController.dispose();
            _titleController.dispose();
            _descriptionController.dispose();
            super.dispose();
          }
          Future<void> _submitContent(ContentProvider provider) async {
            setState(() => _isSubmitting = true);
            provider.setTitle(_titleController.text.trim());
            provider.setDescription(_descriptionController.text.trim());
            try {
              final Map<String, dynamic> contentJson = {
                ...provider.toJson(),
                'description': provider.description,
                'classified_as': 'open',
                'tag_list': provider.tagList,
              };
              final formData = await provider.buildFormData(contentJson);
              await provider.submitContent(formData);
              GenericModalWidget.show(
                context: context,
                child: Padding(padding: EdgeInsets.symmetric(horizontal: 16, vertical: 32),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.check_circle, color: Colors.green, size: 48),
                        SizedBox(height: 16),
                        UIHelper.buildText(
                            context,
                            'Success on Create Content',
                            style: AppTextStylesWidget.headerViewUp,
                            color: Colors.black
                        ),
                      ],
                    )),
              );
              provider.resetState();
              provider.clearImages();
              final hasVibrator = await Vibration.hasVibrator() ?? false;
              if (hasVibrator) {

                try {
                  await Vibration.vibrate(duration: 10, amplitude: 255);
                } catch (_) {
                }
              }
              _descriptionController.clear();
              _tags.clear();
              _mainTabController.index = 0;
            } catch (e) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Erro ao enviar conte√∫do. Tente novamente.'),
                  backgroundColor: Colors.redAccent,
                ),
              );
            } finally {
              setState(() => _isSubmitting = false);
            }
          }
          Widget _buildTab(BuildContext context, String text, Image image) {

            return Tab(
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  image,
                  const SizedBox(width: 8),
                  UIHelper.buildText(
                    context, text,
                    style: AppTextStylesWidget.headerViewUp,
                    weight: FontWeight.w700,
                    color: Colors.black,
                  ),
                ],
              ),
            );
          }
          Widget _buildPreview(ContentProvider provider) {

            final profileOwner = context.read<EntranceProvider>().profile;
            return Padding(
              padding: const EdgeInsets.all(0),
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                    child: ProfileHeaderComponent(profileContent: {
                      "name": '${profileOwner['name']?? ''}',
                      "location": profileOwner['location']?.toString().split(',')[1].trim()?? '',
                      "avatar_url": profileOwner['avatar_url']?.toString().trim()?? '',
                      "relationship": {
                        "status": profileOwner['relationship']?['status']?? '',
                        "status": profileOwner['relationship']?['type']?? '',
                      },
                      "is_added": profileOwner['is_added']
                    }),
                   ),
                  Column(
                    children: [
                      LayoutBuilder(
                        builder: (context, constraints) {
                          final size = constraints.maxWidth;
                          if (provider.coverImage != null) {

                            return Container(
                              width: double.infinity,
                              height: size,
                              decoration: BoxDecoration(
                                color: Colors.grey[400],
                                border: Border.all(color: Colors.grey, width: 0),
                              ),
                              child: ClipRRect(
                                child: Stack(
                                  fit: StackFit.expand,
                                  children: [
                                    Transform.translate(
                                      offset: provider.coverOffset,
                                      child: Transform.scale(
                                        scale: provider.coverZoom,
                                        child: Image.file(
                                          provider.coverImage!,
                                          fit: BoxFit.cover,
                                          width: size,
                                          height: size,
                                          color: provider.isObfuscationEnabled
                                              ? Colors.black.withOpacity(
                                              provider.obfuscationIntensity / 100)
                                              : null,
                                          colorBlendMode: provider.isObfuscationEnabled
                                              ? BlendMode.dstATop
                                              : null,
                                        ),
                                      ),
                                    ),
                                    if (provider.isBlurEnabled)
                                      BackdropFilter(
                                        filter: ImageFilter.blur(
                                          sigmaX: provider.blurIntensity,
                                          sigmaY: provider.blurIntensity,
                                        ),
                                        child: Container(
                                          color: Colors.transparent,
                                        ),
                                      ),
                                  ],
                                ),
                              ),
                            );
                          } else {
                            return Container(
                              width: double.infinity,
                              height: size,
                              decoration: BoxDecoration(
                                color: Colors.grey[100],
                              ),
                              child: const Icon(
                                Icons.add_a_photo,
                                size: 48,
                                color: Colors.black45,
                              ),
                            );
                          }
                        },
                      ),
                      SizedBox(height: 8),
                      if (provider.tagList.isNotEmpty)
                        Container(
                          alignment: Alignment.centerLeft,
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          child: SingleChildScrollView(
                            scrollDirection: Axis.horizontal,
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: provider.tagList.map((tag) {
                                return Container(
                                  margin: const EdgeInsets.only(right: 8),
                                  child: UIHelper.buildText(
                                    context,
                                    tag,
                                    style: AppTextStylesWidget.body,
                                    color: Colors.blueGrey,
                                    weight: FontWeight.w700,
                                  ),
                                );
                              }).toList(),
                            ),
                          ),
                        ),
                      if (_descriptionController.text != '')
                        Padding(padding: EdgeInsets.symmetric(horizontal: 16), child: UIHelper.buildText(context, '   ${(_descriptionController.text != '') ? _descriptionController.text : ''}',
                            style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor))
                    ],
                  ),
                ],
              ),
            );
          }
          AppBar _buildAppBar(BuildContext context, ContentProvider provider) {

            return AppBar(
              automaticallyImplyLeading: false,
              toolbarHeight: 100,
              titleTextStyle: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.w600,
                color: Colors.pinkAccent,
              ),
              title: Column(
                children: [
                  const SizedBox(height: 32),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          Padding(padding: EdgeInsets.only(top: 0),
                              child: SvgPicture.asset(
                                'assets/images/theme/default-icon/xiis.svg',
                                height: 24,
                              ))
                        ],
                      ),
                      SizedBox(width: 10),
                      /*[:memory] Row(
                        children: [
                          Padding(padding: EdgeInsets.only(top: 2), child: Image.asset(
                            'assets/images/theme/default-icon/coin.png',
                            width: 16,
                            height: 16,
                          )),
                          SizedBox(width: 8),
                          UIHelper.buildText(context, '0.00',
                              style: AppTextStylesWidget.headerViewUp,
                              color: Colors.black,
                              weight: FontWeight.w700),
                        ],
                      )*/
                    ],
                  ),
                ],
              ),
              surfaceTintColor: Colors.white,
              backgroundColor: Colors.white,
              elevation: 0,
            );
          }
          Widget buildToggleableDescriptionSection() {

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    UIHelper.buildText(
                      context,
                      _isDescriptionVisible ? 'ocultar legenda' : 'exibir e adicionar legenda',
                      style: AppTextStylesWidget.body,
                      color: UIHelper.blackBlueColor,
                    ),
                    SizedBox(width: 10),
                    IconButton(
                      icon: Icon(
                        _isDescriptionVisible ? Icons.visibility : Icons.visibility_off,
                        color: UIHelper.blackBlueColor,
                      ),
                      onPressed: () {
                        setState(() => _isDescriptionVisible = !_isDescriptionVisible);
                      },
                    ),
                  ],
                ),
                if (_isDescriptionVisible) ...[
                  UIHelper.buildTextArea(
                    minLines: 4,
                    maxLines: 7,
                    controller: _descriptionController,
                    fontSize: UIHelper.getFontSize(
                      simulatorIOSSize: 14,
                      simulatorAndroidSize: 14,
                      deviceIOSSize: 17,
                      deviceAndroidSize: 14,
                    ),
                    label: "Legenda",
                    hint: "Enter your text here ...",
                    minLength: 1,
                    maxLength: 200,
                    fontWeight: FontWeight.normal,
                    textColor: Colors.black,
                    onChanged: (_) {},
                  ),
                  SizedBox(height: 16)
                ],
              ],
            );
          }
          Widget _buildClassificationDropdown(
              BuildContext context, ContentProvider provider) {
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        const Icon(Icons.image, size: 18, color: Colors.blueGrey),
                        const SizedBox(width: 8),
                        UIHelper.buildText(context, "Max Images: ${provider.maxImages}",
                            style: AppTextStylesWidget.body, color: Colors.black),
                      ],
                    ),
                    Row(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.camera_alt_sharp,
                              color: Colors.blueGrey),
                          tooltip: "Select & Upload Images",
                          onPressed: () =>
                              provider.pickImages(context),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          icon: const Icon(Icons.settings, color: Colors.blueGrey),
                          tooltip: "Image Effects Settings",
                          onPressed: () => _showImageSettingsModal(context, provider),
                        ),
                        const SizedBox(width: 8),
                      ],
                    )
                  ],
                ),
              ],
            );
          }
          void _showImageSettingsModal(BuildContext context, ContentProvider provider) {

            showModalBottomSheet(
              backgroundColor: Colors.white,
              context: context,
              isScrollControlled: true,
              shape: const RoundedRectangleBorder(
                borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
              ),
              builder: (context) {
                return Padding(
                  padding: const EdgeInsets.all(16),
                  child: StatefulBuilder(
                    builder: (BuildContext context, StateSetter setModalState) {
                      return Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              UIHelper.buildText(
                                context,
                                'Ajustar Imagem',
                                style: AppTextStylesWidget.headerViewUp,
                                color: Colors.black,
                              ),
                              const CloseButtonWidget(),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Align(
                            alignment: Alignment.centerLeft,
                            child: IconButton(
                              tooltip: 'Recortar imagem',
                              icon: const Icon(Icons.crop, size: 28, color: Colors.black87),
                              onPressed: () async {
                                await provider.cropCoverImage();
                                setModalState(() {});
                              },
                            ),
                          ),
                          const SizedBox(height: 24),
                          _buildEffectToggle(
                            context,
                            title: "Aplicar Blur",
                            value: provider.isBlurEnabled,
                            onChanged: (bool value) {
                              if (value) provider.disableObfuscation();
                              provider.toggleBlur(value);
                              setModalState(() {});
                            },
                            sliderValue: provider.blurIntensity,
                            onSliderChanged: (value) {
                              provider.setBlurIntensity(value);
                              setModalState(() {});
                            },
                          ),
                          const SizedBox(height: 24),
                        ],
                      );
                    },
                  ),
                );
              },
            );
          }
          Widget _buildEffectToggle(
              BuildContext context, {
                required String title,
                required bool value,
                required Function(bool) onChanged,
                required double sliderValue,
                required Function(double) onSliderChanged,
              }) {
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SwitchListTile(
                  title: UIHelper.buildText(context, title,
                      style: AppTextStylesWidget.headerViewUp, color: Colors.black),
                  value: value,
                  onChanged: onChanged,
                ),
                if (value)
                  Slider(
                    value: sliderValue,
                    min: 0, max: 100,
                    divisions: 10,
                    label: "${sliderValue.round()}%",
                    onChanged: onSliderChanged,
                  ),
              ],
            );
          }
          Widget _buildSelectedImages(ContentProvider provider) {

            return SizedBox(
              height: 120,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: provider.selectedImages.length,
                itemBuilder: (context, index) {
                  return Stack(
                    children: [
                      GestureDetector(
                        onTap: () => provider.setCoverImage(index),
                        child: Container(
                          margin: const EdgeInsets.only(right: 8),
                          width: 100, height: 100,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            border:
                            provider.coverImage == provider.selectedImages[index]
                                ? Border.all(color: Colors.green, width: 3)
                                : null,
                            image: DecorationImage(
                              image: FileImage(provider.selectedImages[index]),
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                      ),
                      Positioned(
                        top: 4,
                        right: 4,
                        child: GestureDetector(
                          onTap: () => provider.removeImage(index),
                          child: const CircleAvatar(
                            backgroundColor: Colors.red,
                            radius: 12,
                            child: Icon(Icons.close, color: Colors.white, size: 16),
                          ),
                        ),
                      ),
                    ],
                  );
                },
              ),
            );
          }
          Widget _buildImageSection(BuildContext context, ContentProvider provider) {

            double imageSize = MediaQuery.of(context).size.width;
            return Column(
              children: [
                Stack(
                  children: [
                    GestureDetector(
                      onTap: () async {
                        await provider.pickImages(context);
                        if (provider.selectedImages.isNotEmpty && provider.coverImage == null) {

                          provider.setCoverImage(0);
                        }
                      },
                      child: _buildCoverImageContainer(context, provider, imageSize),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                if (provider.selectedImages.isNotEmpty)
                  Padding(padding: EdgeInsets.symmetric(horizontal: 16), child: _buildSelectedImages(provider))
              ],
            );
          }
          Widget _buildCoverImageContainer(
              BuildContext context, ContentProvider provider, double imageSize) {
            if (provider.coverImage != null) {

              return Container(
                width: double.infinity,
                height: imageSize,
                decoration: BoxDecoration(
                  color: Colors.grey[400],
                  border: Border.all(color: Colors.grey, width: 1),
                ),
                child: ClipRRect(
                  child: Stack(
                    children: [
                      Transform.translate(
                        offset: provider.coverOffset,
                        child: Transform.scale(
                          scale: provider.coverZoom,
                          child: Image.file(
                            provider.coverImage!,
                            fit: BoxFit.cover,
                            width: double.infinity,
                            height: imageSize,
                            color: provider.isObfuscationEnabled
                                ? Colors.black
                                .withOpacity(provider.obfuscationIntensity / 100)
                                : null,
                            colorBlendMode: provider.isObfuscationEnabled
                                ? BlendMode.dstATop
                                : null,
                          ),
                        ),
                      ),
                      _applyImageEffects(context, provider, isCover: true),
                      _buildImageActionButtons(context, provider),
                      Positioned(
                        bottom: 8, right: 8, left: 0,
                        child: SizedBox(
                          height: 56,
                          child: FloatingValidationOrActionWidget(
                            options: _buildValidationOptions(provider),
                            onSavePressed: () => print('Salvar clicado'),
                            onSendPressed: () => _submitContent(provider),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            } else {
              return Container(
                width: double.infinity,
                height: imageSize,
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                ),
                child: const Center(
                  child: Icon(Icons.add_a_photo, size: 48, color: Colors.black45),
                ),
              );
            }
          }
          Widget _buildImageActionButtons(
              BuildContext context, ContentProvider provider) {
            return Positioned(
              top: 8,
              right: 8,
              child: Column(
                children: [
                  IconButton(
                    icon: const Icon(Icons.delete, color: Colors.white),
                    tooltip: 'Remover imagem',
                    onPressed: () => provider.clearCoverImage(),
                    style: IconButton.styleFrom(
                      backgroundColor: Colors.black54,
                      padding: const EdgeInsets.all(8),
                      shape: const CircleBorder(),
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.settings, color: Colors.white),
                    tooltip: 'Aplicar filtro',
                    onPressed: () => _showImageSettingsModal(context, provider),
                    style: IconButton.styleFrom(
                      backgroundColor: Colors.black54,
                      padding: const EdgeInsets.all(8),
                      shape: const CircleBorder(),
                    ),
                  ),
                ],
              ),
            );
          }
          Widget _applyImageEffects(BuildContext context, ContentProvider provider,
              {required bool isCover}) {
            return Stack(
              children: [
                if (provider.isBlurEnabled)
                  ClipRRect(
                    child: BackdropFilter(
                      filter: ImageFilter.blur(
                        sigmaX: provider.blurIntensity,
                        sigmaY: provider.blurIntensity,
                      ),
                      child: Container(color: Colors.transparent),
                    ),
                  ),
                if (provider.isWatermarkEnabled)
                  Positioned(
                    left: provider.watermarkX * MediaQuery.of(context).size.width,
                    top: provider.watermarkY * MediaQuery.of(context).size.width,
                    child: GestureDetector(
                      onPanUpdate: (details) {
                        double newX = provider.watermarkX +
                            (details.delta.dx / MediaQuery.of(context).size.width);
                        double newY = provider.watermarkY +
                            (details.delta.dy / MediaQuery.of(context).size.width);
                        newX = newX.clamp(0.0, 1.0);
                        newY = newY.clamp(0.0, 1.0);
                        provider.setWatermarkX(newX);
                        provider.setWatermarkY(newY);
                      },
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Opacity(
                            opacity: provider.watermarkOpacity,
                            child: UIHelper.buildText(context, provider.watermarkText,
                                style: AppTextStylesWidget.body, color: Colors.black),
                          ),
                          const SizedBox(height: 4),
                          Container(
                            padding: const EdgeInsets.all(4),
                            decoration: BoxDecoration(
                              color: Colors.black54,
                              borderRadius: BorderRadius.circular(6),
                            ),
                            child: const Icon(
                              Icons.drag_indicator,
                              color: Colors.white,
                              size: 20,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
              ],
            );
          }
          List<String> _buildValidationOptions(ContentProvider provider) {

            final List<String> options = [];
            if (provider.coverImage == null) {

              options.add('adicione imagem');
            }
            /*[:memory] if (_descriptionController.text == '') {
              options.add('defina legenda');
            }*/
            return options;
          }
          @override
          Widget build(BuildContext context) {

            return ChangeNotifierProvider(
              create: (_) => ContentProvider(),
              child: Consumer<ContentProvider>(
                builder: (context, provider, child) {
                  return Scaffold(
                    appBar: _buildAppBar(context, provider),
                    backgroundColor: Colors.white,
                    body: SafeArea(
                      child: PillTabBar(
                        tabs: [
                          {
                            "iconPath": 'assets/images/theme/default-icon/colored_share.png',
                            "label": 'Share content'
                          },
                          {
                            "iconPath": 'assets/images/theme/default-icon/colored_preview.png',
                            "label": 'Preview'
                          }
                        ],
                        children: [
                          Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 0),
                            child: ListView(
                              children: [
                                Padding(
                                      padding: EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                                      child: _buildImageSection(context, provider)),
                                  Padding(
                                      padding: EdgeInsets.symmetric(horizontal: 16),
                                      child: buildToggleableDescriptionSection()),
                                  const SizedBox(height: 128),
                                ],
                            ),
                          ),
                          _buildPreview(provider),
                        ],
                      ),
                    )
                    /*[:memory] */
                  );
                },
              ),
            );
          }
        }
      content_view_component.dart: |
        import 'dart:ui';

        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/sections/components/coin_counter_action_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/tag_list_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ContentViewComponent extends StatelessWidget {
          final Map<String, dynamic> contentData;
          const ContentViewComponent({super.key, required this.contentData});
          @override
          Widget build(BuildContext context) {

            final settings = contentData['settings'] ?? {};
            final blur = settings['blur'] ?? {};
            late List<dynamic>tags;
            tags = contentData['settings']['tag_list'];
            final bool isBlurEnabled = blur['apply'] == true;
            final double blurLevel = (blur['level'] ?? 0.0) * 10;
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                LayoutBuilder(
                  builder: (context, constraints) {
                    final size = constraints.maxWidth;
                    return Container(
                      width: double.infinity,
                      height: size,
                      decoration: BoxDecoration(
                        color: Colors.grey[400], border: Border.all(color: Colors.grey, width: 0),
                      ),
                      child: ClipRRect(
                        child: Stack(
                          fit: StackFit.expand,
                          children: [
                            LayoutBuilder(
                              builder: (context, constraints) {
                                double size = constraints.maxWidth;
                                return Container(
                                  width: size, height: size,
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(0),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.grey.withOpacity(0.2),
                                        spreadRadius: 1,
                                        blurRadius: 0,
                                      ),
                                    ],
                                  ),
                                  child: Stack(
                                    children: [
                                      _buildLoadImageContent(size, context, contentData),
                                      _buildOpenContentActions(contentData['id'], false),
                                    ],
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
                SizedBox(height: 4),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          UIHelper.buildText(
                              context, contentData['created_at'], style: AppTextStylesWidget.body, color: Colors.black
                          )
                        ],
                      ),
                    ),
                    Padding(
                        padding: EdgeInsets.symmetric(horizontal: 16),
                        child: Row(
                          children: [
                            Wrap(
                              children: [
                                Image.asset(
                                    'assets/images/theme/default-icon/comment.png',
                                    width: 18, height: 18, color: UIHelper.black37BlueColor,
                                ),
                                SizedBox(width: 8),
                                UIHelper.buildText(context, 'coment√°rios:',
                                    style: AppTextStylesWidget.body, color: UIHelper.black37BlueColor),
                                SizedBox(width: 4),
                                UIHelper.buildText(context, '${contentData['comments_count']?? 0 }',
                                    style: AppTextStylesWidget.body, color: UIHelper.black37BlueColor,
                                weight: FontWeight.w700),
                                                ],
                                              ),
                          ])
                    )
                  ],
                ),
                SizedBox(height: 8),
                if (tags.isNotEmpty)
                  TagListWidget(tags: tags),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          /*[:memory] Padding(padding: EdgeInsets.only(top: 4), child: Image.asset(
                            'assets/images/theme/default-icon/comment.png',
                            width: 14, height: 14,
                          )),
                          const SizedBox(width: 4),
                          */
                          Expanded(
                            child: UIHelper.buildText(
                              context, '   ${contentData['description']}',
                              style: AppTextStylesWidget.body,
                              color: Colors.black,
                            ),
                          ),
                        ],
                      ),
                    ],
                  )
                ),
              ],
            );
          }
          Widget _buildLoadImageContent(double size, BuildContext context, Map<String, dynamic> body) {

            final String coverImageUrl = "${DioClientService.baseUrl}${body['cover_image_url']}";
            return Positioned.fill(
                child: ClipRRect(
                    borderRadius: BorderRadius.circular(0),
                    child: Stack(
                      children: [
                        Image.network(
                          coverImageUrl,
                          width: double.infinity,
                          height: MediaQuery.of(context).size.width,
                          fit: BoxFit.cover,
                        ),
                        if (true)
                          Positioned.fill(
                            child: BackdropFilter(
                              filter: ImageFilter.blur(
                                  sigmaX: 50,
                                  sigmaY: 50
                              ),
                              child: Container(
                                child: const Center(
                                  child: Icon(Icons.lock, color: Colors.white, size: 40),
                                ),
                              ),
                            ),
                          ),
                      ],
                    )
                )
            );
          }
          Widget _buildOpenContentActions(int contentId, bool hasTippedOwner) {

            return Positioned(
                bottom: 8, right: 8,
                child: CoinCounterActionComponent(content: contentData, hasTipped: hasTippedOwner, onSuccess: () {
                })
            );
          }
        }
      engine_view.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:xiis/presentation/sections/components/content_album_gallery_component.dart';
        import 'package:xiis/presentation/sections/components/content_album_promotion_component.dart';
        import 'package:xiis/presentation/sections/components/content_auction_component.dart';
        import 'package:xiis/presentation/sections/components/content_open_component.dart';
        import 'package:xiis/presentation/sections/components/content_restricted_component.dart';

        class EngineView extends StatelessWidget {
          final Map<String, dynamic> content;
          const EngineView(BuildContext context, {
            Key? key, required this.content
          }) : super(key: key);
          @override
          Widget build(BuildContext context) {

            final String classifiedAs = content['settings']['classified_as'] ?? 'default';
            return Container(
              child: _getWidgetByClassification(classifiedAs, content),
            );
          }
          Widget _getWidgetByClassification(String classification, Map<String, dynamic>itemContent) {

            switch (classification) {

              case 'open':
                return ContentOpenComponent(body: content);
              case 'auction':
                return ContentAuctionComponent(body: content);
              /*[:memory] case 'restricted':
                return ContentRestrictedComponent(body: content);
              case 'profile_album_promotion':
                return ContentAlbumPromotionComponent(body: content);
              case 'profile_gallery':
                return ContentAlbumGalleryComponent(body: content); */
              default:
                return DefaultComponent(body: content);
            }
          }
        }
        class DefaultComponent extends StatelessWidget {
          final Map<String, dynamic> body;
          const DefaultComponent({Key? key, required this.body}) : super(key: key);
          @override
          Widget build(BuildContext context) {

            return Container(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Text('Default Component: ${body['title'] ?? 'No Title'}'),
            );
          }
        }
      entrance_view.dart: |
        import 'package:flutter/material.dart';
        import 'package:provider/provider.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/data/socket_service.dart';
        import 'package:xiis/presentation/providers/entrance_provider.dart';
        import 'package:xiis/presentation/providers/financial_provider.dart';
        import 'package:xiis/presentation/providers/home_provider.dart';
        import 'package:xiis/presentation/providers/notification_provider.dart';
        import 'package:xiis/presentation/providers/profile_provider.dart';
        import 'package:xiis/presentation/sections/components/color.dart' as Colors;
        import 'package:xiis/presentation/views/navigation_view_component.dart';

        class EntranceView extends StatefulWidget {
          const EntranceView({Key? key}) : super(key: key);
          @override
          _EntranceViewState createState() => _EntranceViewState();
        }

        class _EntranceViewState extends State<EntranceView> {
          late EntranceProvider entranceProvider;
          late ProfileProvider profileProvider;
          late HomeProvider homeProvider;
          late FinancialProvider financialProvider;
          late NotificationProvider notificationProvider;

          bool _hasProfile = false;
          bool _showWatermark = false;
          bool _isLoading = true;

          loadSocket() async {
            final socketService = SocketService();
            await socketService.connect(baseUrl: DioClientService.baseUrl);
          }

          Future<void> _checkUserProfile() async {
            _hasProfile = await entranceProvider.checkUserAccountProfile();
            if (_hasProfile) {

              profileProvider.refreshHistory();
            }
            setState(() => _isLoading = false);
          }

          NavigationViewComponent _buildNavigationBar() {
            return NavigationViewComponent(
              hasProfile: _hasProfile,
            );
          }

          Widget _buildWatermarkOverlay() {

            return Positioned.fill(
              child: Container(
                color: Colors.black.withOpacity(0.1),
                alignment: Alignment.bottomRight,
                child: const Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Text(
                    '¬© XiiS',
                    style: TextStyle(color: Colors.white, fontSize: 12),
                  ),
                ),
              ),
            );
          }

          @override
          void initState() {

            super.initState();
            entranceProvider = Provider.of<EntranceProvider>(context, listen: false);
            profileProvider = Provider.of<ProfileProvider>(context, listen: false);
            homeProvider = Provider.of<HomeProvider>(context, listen: false);
            financialProvider = Provider.of<FinancialProvider>(context, listen: false);
            notificationProvider = Provider.of<NotificationProvider>(context, listen: false);
            _checkUserProfile();
          }

          @override
          Widget build(BuildContext context) {
            return Scaffold(
              backgroundColor: Colors.white,
              body: Stack(
                children: [
                  if (_isLoading)
                    const Center(child: CircularProgressIndicator())
                  else
                  if (_showWatermark) _buildWatermarkOverlay(),
                ],
              ),
              bottomNavigationBar: _isLoading ? null : _buildNavigationBar(),
            );
          }
        }
      home_view.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:flutter_svg/svg.dart';
        import 'package:provider/provider.dart';
        import 'package:xiis/presentation/providers/entrance_provider.dart';
        import 'package:xiis/presentation/providers/notification_provider.dart';
        import 'package:xiis/presentation/providers/reward_provider.dart';
        import 'package:xiis/presentation/sections/components/following_scrollable_component.dart';
        import 'package:xiis/presentation/sections/components/suggestion_scrollable_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
        import 'package:xiis/presentation/sections/widgets/vertical_notification_ticker_widget.dart';

        class HomeView extends StatefulWidget {
          const HomeView({super.key});

          @override
          State<HomeView> createState() => _HomeViewState();
        }
        class _HomeViewState extends State<HomeView> {
          late EntranceProvider entranceProvider;
          late NotificationProvider notificationProvider;
          late RewardProvider rewardProvider;

          static const double _toolbarHeight = 100;
          static const double _titleTopPadding = 32;
          static const double _coinIconSize = 16;
          static const double _coinSpacing = 8;
          static const double _logoHeight = 32;

          bool showTicker = true;

          AppBar _buildAppBar(BuildContext context) {

            final balance = context.watch<RewardProvider>().balance;
            return AppBar(
              automaticallyImplyLeading: false,
              toolbarHeight: _toolbarHeight,
              backgroundColor: Colors.white,
              elevation: 0,
              leading: Padding(
                  padding: EdgeInsets.only(top: 26, left: 16),
                  child: Container(
                    child: SvgPicture.asset(
                        fit: BoxFit.contain,
                        'assets/images/theme/default-icon/xiis.svg'
                    ),
                  )),
              title: UIHelper.buildText(context, '',
                  style: AppTextStylesWidget.headerViewUp,
                  color: UIHelper.blackBlueColor),
              actions: [
                /*[:memory] Padding(
                    padding: EdgeInsets.only(top: 36, right: 16),
                    child: _buildBalanceInfo(context, balance))*/
              ],
            );
          }
          Widget _buildNotificationTicker() {

            return SizedBox(
              height: 36,
              width: 200,
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 300),
                switchInCurve: Curves.easeIn,
                switchOutCurve: Curves.easeOut,
                child: VerticalNotificationTicker(
                  key: const ValueKey('ticker'),
                  messages: [
                    'You earned 15 tokens',
                    'New message received',
                    'Someone followed you',
                  ],
                  icon: Icons.notifications_active_outlined,
                  onClose: () {
                    setState(() => showTicker = false);
                  },
                ),
              ),
            );
          }
          Widget _buildBalanceInfo(BuildContext context, String balance) {

            return Row(
              children: [
                Semantics(
                  label: 'Reward Coin Icon',
                  child: Tooltip(
                    message: 'Your coin balance',
                    child: Padding(padding: EdgeInsets.only(top: 2), child: Image.asset(
                      'assets/images/theme/default-icon/coin.png',
                      width: _coinIconSize,
                      height: _coinIconSize,
                    )),
                  ),
                ),
                const SizedBox(width: _coinSpacing),
                Semantics(
                  label: 'Current balance: $balance coins',
                  child: UIHelper.buildText(
                    context,
                    balance,
                    style: AppTextStylesWidget.headerViewUp,
                    weight: FontWeight.w700,
                    color: UIHelper.blackBlueColor,
                  ),
                ),
              ],
            );
          }

          @override
          void initState() {

            super.initState();
            entranceProvider = Provider.of<EntranceProvider>(context, listen: false);
            notificationProvider = Provider.of<NotificationProvider>(context, listen: false);
            rewardProvider = Provider.of<RewardProvider>(context, listen: false);
          }

          @override
          Widget build(BuildContext context) {

            return Scaffold(
              appBar: _buildAppBar(context),
              backgroundColor: Colors.transparent,
              body: SafeArea(
                child: PillTabBar(
                  tabs: const [
                    {
                      "iconPath": 'assets/images/theme/default-icon/colored_suggesting_content.png',
                      "label": 'Explore'
                    },
                    {
                      "iconPath": 'assets/images/theme/default-icon/colored_following_content.png',
                      "label": 'Suggesting'
                    },
                    {
                      "iconPath": 'assets/images/theme/default-icon/colored_following_content.png',
                      "label": 'Following'
                    }
                  ],
                  children: const [
                    SuggestionScrollableComponent(),
                    SuggestionScrollableComponent(),
                    FollowingScrollableComponent(),
                  ],
                ),
              ),
            );
          }
        }
      invite_view.dart: |2

        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:share_plus/share_plus.dart';
        import 'package:xiis/presentation/sections/components/count_down_timer_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class InviteView extends StatefulWidget {
          const InviteView({super.key});

          @override
          State<InviteView> createState() => _InviteViewState();
        }

        class _InviteViewState extends State<InviteView> {
          final TextEditingController _emailController = TextEditingController();
          final List<Contact> _contacts = [
            Contact(name: 'Jo√£o Silva', email: 'joao@example.com', isOnline: true),
            Contact(name: 'Maria Santos', email: 'maria@example.com', isOnline: false),
            Contact(name: 'Carlos Oliveira', email: 'carlos@example.com', isOnline: true),
            Contact(name: 'Ana Pereira', email: 'ana@example.com', isOnline: false),
            Contact(name: 'Pedro Costa', email: 'pedro@example.com', isOnline: true),
          ];
          List<Contact> _filteredContacts = [];
          final Map<String, dynamic> _onlineUsers = {};

          @override
          void initState() {
            super.initState();
            _filteredContacts = List.from(_contacts);
            _setupPresence();
          }

          void _setupPresence() {
          }

          void _filterContacts(String query) {
            setState(() {
              _filteredContacts = query.isEmpty
                  ? List.from(_contacts)
                  : _contacts
                  .where((c) =>
              c.name.toLowerCase().contains(query.toLowerCase()) ||
                  c.email.toLowerCase().contains(query.toLowerCase()))
                  .toList();
            });
          }

          void _inviteContact(Contact contact) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Convite enviado para ${contact.name}')),
            );
          }

          bool _isValidEmail(String email) {
            final regex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');
            return regex.hasMatch(email);
          }

          void _inviteByEmail() {
            final email = _emailController.text.trim();
            if (email.isEmpty || !_isValidEmail(email)) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Insira um email v√°lido')),
              );
              return;
            }

            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Convite enviado para $email')),
            );
            _emailController.clear();
          }

          void _shareInviteLink() {
            const inviteLink = 'https://xiis.app/invite';
            Share.share(
              'Junte-se a mim neste aplicativo incr√≠vel! $inviteLink',
              subject: 'Convite para o aplicativo',
            );
          }

          @override
          void dispose() {
            _emailController.dispose();
            super.dispose();
          }

          @override
          Widget build(BuildContext context) {
            return Scaffold(
              backgroundColor: Colors.white,
              appBar: _buildAppBar(context),
              body: SafeArea(child: PillTabBar(
                tabs: [
                  {
                    "iconPath": 'assets/images/theme/default-icon/colored_share.png',
                    "label": 'Send an Invite'
                  },
                  {
                    "iconPath": 'assets/images/theme/default-icon/colored_invite_sent.png',
                    "label": 'Sent List'
                  }
                ],
                children: [
                  Padding(
                      padding: EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            UIHelper.buildText(context, 'Convide seus amigos',
                                style: AppTextStylesWidget.headerViewUp,
                            color: UIHelper.blackBlueColor, weight: FontWeight.bold),
                            const SizedBox(height: 8),
                            UIHelper.buildText(
                              context,
                              'Compartilhe o aplicativo com seus amigos e ganhe recompensas',
                              style: AppTextStylesWidget.body,
                              color: UIHelper.blackBlueColor,
                            ),
                            const SizedBox(height: 8),

                            Row(
                              children: [
                                Expanded(child: UIHelper.buildTextField(
                                  label: "enviar convite", hint: "email",
                                  icon: Icons.mail_outline,
                                  fontWeight: FontWeight.normal,
                                  keyboardType: TextInputType.emailAddress,
                                  controller: _emailController,
                                  onChanged: (value) {
                                    _emailController.value = _emailController.value.copyWith(
                                      text: value.toLowerCase(),
                                      selection: TextSelection.collapsed(offset: value.length),
                                    );
                                    print(_emailController.value);
                                  },
                                  obscureText: false,
                                )),
                                SizedBox(width: 8),
                                Container(
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Padding(padding: EdgeInsets.only(top: 18),
                                  child: IconButton(
                                    icon: const Icon(Icons.send, color: UIHelper.infoColor),
                                    tooltip: 'Enviar convite',
                                    onPressed: _inviteByEmail,
                                    padding: const EdgeInsets.all(14),
                                    constraints: const BoxConstraints(),
                                  )),
                                ),
                              ],
                            ),

                            Padding(padding: EdgeInsets.symmetric(vertical: 16),
                            child: OutlinedButton.icon(
                              onPressed: _shareInviteLink,
                              icon: const Icon(Icons.share),
                              label: const Text('Compartilhar Link de Convite'),
                              style: OutlinedButton.styleFrom(
                                foregroundColor: UIHelper.secondaryColor,
                                side: const BorderSide(color: UIHelper.secondaryColor),
                                padding: const EdgeInsets.symmetric(
                                    vertical: 12, horizontal: 16),
                              ),
                            ))

                            /*[:memory] Row(
                              children: [
                                Expanded(
                                  child: TextField(
                                    controller: _emailController,
                                    keyboardType: TextInputType.emailAddress,
                                    decoration: InputDecoration(
                                      hintText: 'Email do amigo',
                                      filled: true,
                                      fillColor: Colors.white,
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 8),
                                ElevatedButton(
                                  onPressed: _inviteByEmail,
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.purple,
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 16, horizontal: 20),
                                  ),
                                  child: const Text('Enviar'),
                                ),
                              ],
                            ),
                            const SizedBox(height: 16),
                            OutlinedButton.icon(
                              onPressed: _shareInviteLink,
                              icon: const Icon(Icons.share),
                              label: const Text('Compartilhar Link de Convite'),
                              style: OutlinedButton.styleFrom(
                                foregroundColor: Colors.purple,
                                side: const BorderSide(color: Colors.purple),
                                padding: const EdgeInsets.symmetric(
                                    vertical: 12, horizontal: 16),
                              ),
                            ),*/
                          ],
                        ),
                      )),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 0),
                    child: ListView(
                      children: [
                        Padding(
                            padding: EdgeInsets.symmetric(horizontal: 16),
                            child: SingleChildScrollView(
                              padding: const EdgeInsets.only(bottom: 32),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.stretch,
                                children: [
                                  Row(
                                    children: [
                                      Expanded(child: UIHelper.buildTextField(
                                        label: "contato", hint: "nome ou @email",
                                        icon: Icons.search,
                                        fontWeight: FontWeight.normal,
                                        keyboardType: TextInputType.emailAddress,
                                        onChanged: _filterContacts,
                                        obscureText: false,
                                      )),
                                    ],
                                  ),
                                  SizedBox(height: 8),
                                  ListView.builder(
                                    shrinkWrap: true,
                                    physics: const NeverScrollableScrollPhysics(),
                                    itemCount: _filteredContacts.length,
                                    itemBuilder: (context, index) {
                                      final contact = _filteredContacts[index];
                                      return ListTile(
                                        leading: CircleAvatar(
                                          backgroundColor: UIHelper.backgroundColor,
                                          child: UIHelper.buildText(context, contact.name[0].toUpperCase(),
                                              style: AppTextStylesWidget.headerViewUp, color: UIHelper.blackBlueColor)
                                        ),
                                        title: UIHelper.buildText(context, contact.name,
                                            style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor),
                                        subtitle: UIHelper.buildText(context, contact.email,
                                            style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor),
                                        trailing: Row(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            Icon(
                                              Icons.circle,
                                              size: 12,
                                              color: contact.isOnline ? Colors.green : Colors.grey,
                                            ),
                                            /*[:memory] const SizedBox(width: 8),
                                            ElevatedButton(
                                              onPressed: () => _inviteContact(contact),
                                              style: ElevatedButton.styleFrom(
                                                backgroundColor: Colors.purple,
                                                padding: const EdgeInsets.symmetric(horizontal: 16),
                                              ),
                                              child: const Text('Convidar'),
                                            ),*/
                                          ],
                                        ),
                                      );
                                    },
                                  ),
                                ],
                              ),
                            )),
                        const SizedBox(height: 128),
                      ],
                    ),
                  ),
                ],
              ))
            );
          }

          AppBar _buildAppBar(BuildContext context) {
            return AppBar(
              backgroundColor: Colors.white,
              centerTitle: true,
              title: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: const [
                  Icon(Icons.timelapse, size: 22),
                  SizedBox(width: 8),
                  CountDownTimerComponent(),
                ],
              ),
              leading: IconButton(
                icon: const Icon(Icons.arrow_back),
                onPressed: () => Navigator.pop(context),
              ),
            );
          }
        }

        class Contact {
          final String name;
          final String email;
          bool isOnline;

          Contact({
            required this.name,
            required this.email,
            this.isOnline = false,
          });
        }
      manage_content_view_component.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/sections/components/coin_counter_action_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/tag_list_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ManageContentViewComponent extends StatelessWidget {
          final Map<String, dynamic> contentData;
          const ManageContentViewComponent({super.key, required this.contentData});

          @override
          Widget build(BuildContext context) {

            final settings = contentData['settings'] ?? {};
            final blur = settings['blur'] ?? {};
            late List<dynamic>tags;
            tags = contentData['settings']['tag_list'];
            final bool isBlurEnabled = blur['apply'] == true;
            final double blurLevel = (blur['level'] ?? 0.0) * 10;
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                LayoutBuilder(
                  builder: (context, constraints) {
                    final size = constraints.maxWidth;
                    return Container(
                      width: double.infinity,
                      height: size,
                      decoration: BoxDecoration(
                        color: CupertinoColors.systemGrey, border: Border.all(color: CupertinoColors.systemGrey, width: 0),
                      ),
                      child: ClipRRect(
                        child: Stack(
                          fit: StackFit.expand,
                          children: [
                            LayoutBuilder(
                              builder: (context, constraints) {
                                double size = constraints.maxWidth;
                                return Container(
                                  width: size, height: size,
                                  decoration: BoxDecoration(
                                    color: UIHelper.backgroundColor,
                                    borderRadius: BorderRadius.circular(0),
                                    boxShadow: [
                                      BoxShadow(
                                        color: UIHelper.backgroundColor,
                                        spreadRadius: 1,
                                        blurRadius: 0,
                                      ),
                                    ],
                                  ),
                                  child: Stack(
                                    children: [
                                      _buildLoadImageContent(size, context, contentData),
                                    ],
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
                SizedBox(height: 4),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          UIHelper.buildText(
                              context, contentData['created_at'], style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor
                          )
                        ],
                      ),
                    ),
                    Padding(
                        padding: EdgeInsets.symmetric(horizontal: 16),
                        child: Row(
                          children: [
                            Wrap(
                              children: [
                                Image.asset(
                                    'assets/images/theme/default-icon/comment.png',
                                    width: 18, height: 18, color: UIHelper.black37BlueColor,
                                ),
                                SizedBox(width: 8),
                                UIHelper.buildText(context, 'coment√°rios:',
                                    style: AppTextStylesWidget.body, color: UIHelper.black37BlueColor),
                                SizedBox(width: 4),
                                UIHelper.buildText(context, '${contentData['comments_count']?? 0 }',
                                    style: AppTextStylesWidget.body, color: UIHelper.black37BlueColor,
                                weight: FontWeight.w700),
                                                ],
                                              ),
                          ])
                    )
                  ],
                ),
                SizedBox(height: 8),
                if (tags.isNotEmpty)
                  TagListWidget(tags: tags),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          /*[:memory] Padding(padding: EdgeInsets.only(top: 4), child: Image.asset(
                            'assets/images/theme/default-icon/comment.png',
                            width: 14, height: 14,
                          )),
                          const SizedBox(width: 4),
                          */
                          Expanded(
                            child: UIHelper.buildText(
                              context, '   ${contentData['description']}',
                              style: AppTextStylesWidget.body,
                              color: UIHelper.blackBlueColor,
                            ),
                          ),
                        ],
                      ),
                    ],
                  )
                ),
              ],
            );
          }
          Widget _buildLoadImageContent(double size, BuildContext context, Map<String, dynamic> body) {

            final String coverImageUrl = "${DioClientService.baseUrl}${body['cover_image_url']}";
            return Positioned.fill(
                child: ClipRRect(
                    borderRadius: BorderRadius.circular(0),
                    child: Stack(
                      children: [
                        Image.network(
                          coverImageUrl,
                          width: double.infinity,
                          height: MediaQuery.of(context).size.width,
                          fit: BoxFit.cover,
                        ),
                        Positioned.fill(
                          child: Container(
                            child: const Center(
                              child: Icon(Icons.lock, color: Colors.white, size: 40),
                            ),
                          ),
                        ),
                      ],
                    )
                )
            );
          }
          Widget _buildOpenContentActions(int contentId, bool hasTippedOwner) {

            return Positioned(
                bottom: 8, right: 8,
                child: CoinCounterActionComponent(content: contentData, hasTipped: hasTippedOwner, onSuccess: () {
                })
            );
          }
        }
      navigation_view_component.dart: |
        import 'package:flutter/material.dart';
        import 'package:provider/provider.dart';
        import 'package:vibration/vibration.dart';
        import 'package:xiis/presentation/providers/notification_provider.dart';
        import 'package:xiis/presentation/sections/components/model.dart';
        import 'package:xiis/presentation/sections/components/paint.dart';
        import 'package:xiis/presentation/sections/widgets/content_profile_start_form_widget.dart';

        import 'package:xiis/presentation/sections/widgets/generic_bottom_sheet_widget.dart';
        import 'package:xiis/presentation/views/content_view.dart';
        import 'package:xiis/presentation/views/home_view.dart';
        import 'package:xiis/presentation/views/notification_view.dart';
        import 'package:xiis/presentation/views/profile_view.dart';
        import 'package:xiis/presentation/views/reward_view.dart';

        import '../sections/components/color.dart';

        class NavigationViewComponent extends StatefulWidget {
          final bool hasProfile;
          const NavigationViewComponent({super.key, required this.hasProfile});

          @override
          State<NavigationViewComponent> createState() => _NavigationViewComponentState();
        }

        class _NavigationViewComponentState extends State<NavigationViewComponent> {
          late final PageController _pageController;
          late final ValueNotifier<int> coinsUpdateNotifier;
          late final bool _hasProfile;

          late NotificationProvider notificationProvider;
          int _selectedIndex = 0;

          final List<Widget> _screens = const [
            HomeView(),
            ContentView(),
            RewardView(),
            NotificationView(),
            ProfileView(),
          ];

          void _onItemTapped(int index) {

            setState(() {

              _selectedIndex = index;
            });
            if (_hasProfile) {

              Vibration.vibrate(duration: 10, amplitude: 255);
              _pageController.animateToPage(
                index,
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
              );
            } else {
              GenericBottomSheetWidget.show(
                context: context,
                title: '',
                content: const ContentProfileStartFormWidget(),
              );
            }
          }

          Widget navigationBar() {

            return LayoutBuilder(
              builder: (context, constraints) {
                final buttonWidth = constraints.maxWidth / navBtn.length;
                return AnimatedContainer(
                  height: 100.0,
                  duration: const Duration(milliseconds: 200),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(_selectedIndex == 0 ? 0.0 : 20.0),
                      topRight: Radius.circular(_selectedIndex == navBtn.length - 1 ? 0.0 : 20.0),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: List.generate(
                      navBtn.length, (i) => _buildNavigationButton(i, buttonWidth),
                    ),
                  ),
                );
              },
            );
          }

          Widget _buildNavigationButton(int index, double width) {

            final bool isActive = _selectedIndex == index;
            return Semantics(
              label: navBtn[index].label ?? "Navigation button $index",
              selected: isActive,
              button: true,
              child: Tooltip(
                message: navBtn[index].label ?? "Navigate",
                child: GestureDetector(
                  onTap: () => _onItemTapped(index),
                  child: SizedBox(
                    width: width,
                    child: Stack(
                      clipBehavior: Clip.none,
                      children: [
                        Align(
                          alignment: Alignment.topCenter,
                          child: AnimatedContainer(
                            height: isActive ? 60.0 : 0.0,
                            width: isActive ? 50.0 : 0.0,
                            duration: const Duration(milliseconds: 600),
                            child: isActive ? CustomPaint(painter: ButtonNotch()) : const SizedBox(),
                          ),
                        ),
                        Align(
                          alignment: Alignment.center,
                          child: Container(
                            padding: const EdgeInsets.all(0),
                            decoration: const BoxDecoration(
                              color: Colors.white,
                              shape: BoxShape.circle,
                            ),
                            child: Image.asset(
                              navBtn[index].imagePath,
                              width: index == 2 ? 40 : 28,
                              height: index == 2 ? 40 : 28,
                              color: index == 2 ? null : (isActive ? selectColor : black),
                            ),
                          ),
                        ),
                        Positioned(
                          top: 24,
                          right: 20,
                          child: BadgeWidget(
                            index: index,
                            coinsUpdateNotifier: coinsUpdateNotifier,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            );
          }

          @override
          void initState() {

            super.initState();
            _hasProfile = widget.hasProfile;
            _pageController = PageController();
            coinsUpdateNotifier = ValueNotifier<int>(0);
            notificationProvider = Provider.of<NotificationProvider>(context, listen: false);
          }

          @override
          void dispose() {

            _pageController.dispose();
            coinsUpdateNotifier.dispose();
            super.dispose();
          }

          @override
          Widget build(BuildContext context) {

            return Scaffold(
              body: Container(
                color: Colors.white,
                child: Stack(
                  children: [
                    PageView(
                      controller: _pageController,
                      physics: const NeverScrollableScrollPhysics(),
                      children: _screens,
                    ),
                    /*[:memory] Positioned(
                      bottom: 10,
                      right: 25,
                      child: Builder(
                        builder: (context) => FloatingActionButton(
                          heroTag: 'global-action-button',
                          mini: true,
                          onPressed: () {
                            Scaffold.of(context).openEndDrawer();
                          },
                          backgroundColor: Colors.black,
                          child: const Icon(Icons.menu, color: Colors.white),
                        ),
                      ),
                    ),*/
                  ],
                )
              ),
              bottomNavigationBar: MediaQuery.removePadding(
                context: context,
                removeBottom: true,
                child: Container(
                  height: 80,
                  decoration: const BoxDecoration(),
                  child: navigationBar(),
                ),
              ),
            );
          }
        }

        class BadgeWidget extends StatelessWidget {
          final int index;
          final ValueNotifier<int> coinsUpdateNotifier;

          const BadgeWidget({
            super.key,
            required this.index,
            required this.coinsUpdateNotifier,
          });

          Widget _buildBadge(String text) {

            return Container(
              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 1),
              decoration: BoxDecoration(
                color: Colors.red,
                borderRadius: BorderRadius.circular(12),
              ),
              constraints: const BoxConstraints(minWidth: 16, minHeight: 16),
              child: Text(
                text,
              ),
            );
          }

          @override
          Widget build(BuildContext context) {

            return Consumer<NotificationProvider>(
              builder: (context, notification, _) {
                if (index == 3 ) {

                  return _buildBadge('!');
                }
                if (index == 0) {

                  return ValueListenableBuilder<int>(
                    valueListenable: coinsUpdateNotifier,
                    builder: (context, value, _) {
                      if (value > 0) {

                        return _buildBadge(value > 99 ? '99+' : '$value');
                      }
                      return const SizedBox.shrink();
                    },
                  );
                }
                return const SizedBox.shrink();
              },
            );
          }
        }
      notification_view.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:flutter_svg/svg.dart';
        import 'package:provider/provider.dart';
        import 'package:xiis/presentation/providers/notification_provider.dart';
        import 'package:xiis/presentation/providers/reward_provider.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class NotificationView extends StatelessWidget {
          const NotificationView({super.key});
          static const double _toolbarHeight = 100;
          static const double _titleTopPadding = 32;
          static const double _coinIconSize = 16;
          static const double _coinSpacing = 8;
          static const double _logoHeight = 24;
          Widget _buildLogo() {

            return Semantics(
              label: 'XiiS logo',
              child: Tooltip(
                message: 'Home - XiiS',
                child: Padding(padding: EdgeInsets.only(top: 0),
                    child: SvgPicture.asset(
                      'assets/images/theme/default-icon/xiis.svg',
                      height: _logoHeight,
                    )),
              ),
            );
          }
          Widget _buildBalanceInfo(BuildContext context, String balance) {

            return Row(
              children: [
                Semantics(
                  label: 'Reward Coin Icon',
                  child: Tooltip(
                    message: 'Your coin balance',
                    child: Padding(padding: EdgeInsets.only(top: 2), child: Image.asset(
                      'assets/images/theme/default-icon/coin.png',
                      width: _coinIconSize,
                      height: _coinIconSize,
                    )),
                  ),
                ),
                const SizedBox(width: _coinSpacing),
                Semantics(
                  label: 'Current balance: $balance coins',
                  child: UIHelper.buildText(
                    context,
                    balance,
                    style: AppTextStylesWidget.headerViewUp,
                    weight: FontWeight.w700,
                    color: UIHelper.blackBlueColor,
                  ),
                ),
              ],
            );
          }
          AppBar _buildAppBar(BuildContext context) {

            final balance = context.watch<RewardProvider>().balance;
            return AppBar(
              automaticallyImplyLeading: false,
              toolbarHeight: 100,
              backgroundColor: Colors.white,
              elevation: 0,
              title: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 32),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      _buildLogo(),
                      /*[:memory] const SizedBox(width: 40),
                      if (showTicker) _buildNotificationTicker(),
                      const SizedBox(width: 10), */
                      /*[:memory] _buildBalanceInfo(context, balance), */
                    ],
                  ),
                ],
              ),
            );
          }
          @override
          Widget build(BuildContext context) {

            final notifications = context.watch<NotificationProvider>().notifications;
            return Scaffold(
              appBar: _buildAppBar(context),
              backgroundColor: Colors.white,
              body: notifications.isEmpty
                  ? const Center(child: Text('Nenhuma notifica√ß√£o dispon√≠vel'))
                  : ListView.separated(
                padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                itemCount: notifications.length,
                separatorBuilder: (_, __) => const Divider(height: 24),
                itemBuilder: (context, index) {
                  final notification = notifications[index];
                  return ListTile(
                    leading: Icon(
                      Icons.notifications,
                      color: UIHelper.blackBlueColor,
                    ),
                    title: Text(
                      notification.title,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    subtitle: Text(notification.message),
                    trailing: Text(
                      notification.timeAgo,
                      style: const TextStyle(color: Colors.grey, fontSize: 12),
                    ),
                    onTap: () => _handleNotificationTap(context, notification),
                  );
                },
              ),
            );
          }
          void _handleNotificationTap(BuildContext context, dynamic notification) {

            switch (notification.type) {

              case 'comment':
                Navigator.pushNamed(context, '/comments/${notification.targetId}');
                break;
              case 'profile':
                Navigator.pushNamed(context, '/profile/${notification.targetId}');
                break;
              default:
                break;
            }
          }
        }
      profile_view.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:flutter_svg/svg.dart';
        import 'package:provider/provider.dart';
        import 'package:xiis/data/dio_client_service.dart';
        import 'package:xiis/presentation/providers/entrance_provider.dart';
        import 'package:xiis/presentation/sections/components/history_scrollable_component.dart';
        import 'package:xiis/presentation/sections/components/network_scrollable_component.dart';
        import 'package:xiis/presentation/sections/components/show_edit_date_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/custom_drawer_widget.dart';
        import 'package:xiis/presentation/sections/widgets/pill_tab_bar_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ProfileView extends StatefulWidget {
          const ProfileView({super.key});
          @override
          _ProfileViewState createState() => _ProfileViewState();
        }
        class _ProfileViewState extends State<ProfileView> with SingleTickerProviderStateMixin {
          final verificationItems = {
            "Age": {"image": 'assets/images/theme/default-icon/verify.png', "active": true},
            "Address": {"image": 'assets/images/theme/default-icon/verify.png', "active": false},
            "Payment": {"image": 'assets/images/theme/default-icon/verify.png', "active": true},
            "Identity": {"image": 'assets/images/theme/default-icon/verify.png', "active": true},
          };
          late TabController _tabController;
          final TextEditingController _descriptionController = TextEditingController();
          bool _isDescriptionVisible = false;
          final EdgeInsets standardPadding = const EdgeInsets.symmetric(horizontal: 16, vertical: 0);
          String? _savedDescription;
          final ScrollController _scrollController = ScrollController();
          bool _showScrollUpButton = false;
          static const double _toolbarHeight = 100;
          @override
          void initState() {

            super.initState();
            _tabController = TabController(length: 3, vsync: this);
            _scrollController.addListener(() {
              if (_scrollController.offset > 300 && !_showScrollUpButton) {

                setState(() => _showScrollUpButton = true);
              } else if (_scrollController.offset <= 300 && _showScrollUpButton) {
                setState(() => _showScrollUpButton = false);
              }
            });
          }
          @override
          void dispose() {

            _tabController.dispose();
            _descriptionController.dispose();
            _savedDescription = '';
            _scrollController.dispose();
            super.dispose();
          }
          Widget _buildProfileImage(ImageProvider imageProvider) {

            return Container(
              padding: const EdgeInsets.all(7),
              decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: Colors.grey),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(8),
                  topRight: Radius.circular(75),
                  bottomLeft: Radius.circular(75),
                  bottomRight: Radius.circular(75),
                ),
              ),
              child: CircleAvatar(
                radius: 65,
                backgroundColor: Colors.grey[300],
                backgroundImage: imageProvider,
              ),
            );
          }
          Widget _buildToggleableDescription() {

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    UIHelper.buildText(
                      context,
                      _isDescriptionVisible ? 'atualize o perfil' : 'editar perfil',
                      style: AppTextStylesWidget.body,
                      color: UIHelper.blackBlueColor,
                      weight: FontWeight.bold
                    ),
                    const SizedBox(width: 10),
                    IconButton(
                      padding: const EdgeInsets.all(4),
                      icon: Icon(_isDescriptionVisible ? Icons.close : Icons.edit, size: 18,
                          color: _isDescriptionVisible ? UIHelper.blackBlueColor : UIHelper.blackBlueColor),
                      tooltip: _isDescriptionVisible ? 'Fechar' : 'Editar',
                      onPressed: () {
                        setState(() {

                          if (_isDescriptionVisible) {

                            _savedDescription = _descriptionController.text.trim();
                          }
                          _isDescriptionVisible = !_isDescriptionVisible;
                        });
                      },
                    ),
                    if (_isDescriptionVisible)
                      IconButton(
                        padding: const EdgeInsets.all(4),
                        icon: Icon(Icons.send_rounded, size: 18,
                            color: UIHelper.blackBlueColor),
                        tooltip: 'Enviar',
                        onPressed: () {
                          setState(() {

                            _savedDescription = _descriptionController.text.trim();
                          });
                        },
                      ),
                  ],
                ),
                if (_isDescriptionVisible)
                  Padding(padding: EdgeInsets.symmetric(horizontal: 32),
                  child: Column(
                    children: [
                      ShowEditDateComponent(),
                      UIHelper.buildTextField(
                        label: "profile",
                        hint: "name to show",
                        icon: Icons.person,
                        fontWeight: FontWeight.normal,
                        keyboardType: TextInputType.name,
                        obscureText: false,
                        suffixIcon: IconButton(
                          icon: const Icon(Icons.check),
                          onPressed: () {
                          },
                        ),
                        onChanged: (value) {
                        },
                      ),
                      UIHelper.buildTextField(
                        label: "shared link",
                        hint: "address to",
                        icon: Icons.link_rounded,
                        fontWeight: FontWeight.normal,
                        keyboardType: TextInputType.name,
                        obscureText: false,
                        suffixIcon: IconButton(
                          icon: const Icon(Icons.check),
                          onPressed: () {
                          },
                        ),
                        onChanged: (value) {
                        },
                      ),
                      UIHelper.buildTextField(
                        label: "link label",
                        hint: "u should label the link",
                        icon: Icons.label_important_rounded,
                        fontWeight: FontWeight.normal,
                        keyboardType: TextInputType.name,
                        obscureText: false,
                        suffixIcon: IconButton(
                          icon: const Icon(Icons.check),
                          onPressed: () {
                          },
                        ),
                        onChanged: (value) {
                        },
                      ),
                      SizedBox(height: 16),
                      UIHelper.buildTextArea(
                        minLines: 4,
                        maxLines: 7,
                        controller: _descriptionController,
                        fontSize: UIHelper.getFontSize(
                          simulatorIOSSize: 14,
                          simulatorAndroidSize: 14,
                          deviceIOSSize: 14,
                          deviceAndroidSize: 14,
                        ),
                        label: "My personal bio",
                        hint: "Add text",
                        minLength: 1,
                        maxLength: 200,
                        fontWeight: FontWeight.normal,
                        textColor: Colors.black,
                        onChanged: (_) {},
                      ),
                      SizedBox(height: 16),
                      UIHelper.buildText(context, '   The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters',
                          style: AppTextStylesWidget.body, color: UIHelper.blackBlueColor),
                      SizedBox(height: 16),
                      Divider()
                    ],
                  ))
              ],
            );
          }
          Widget _buildVerificationTag(String label, String imagePath, bool isActive) {

            return Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
              decoration: BoxDecoration(borderRadius: BorderRadius.circular(8)),
              child: Image.asset(
                imagePath,
                width: 22,
                height: 22,
                color: isActive ? Colors.black : Colors.grey,
              ),
            );
          }
          Widget _buildVerificationsRow() {

            return Wrap(
              spacing: 8,
              runSpacing: 4,
              children: verificationItems.entries.map((entry) {
                final label = entry.key;
                final imagePath = entry.value['image'] as String;
                final isActive = entry.value['active'] as bool;
                return _buildVerificationTag(label, imagePath, isActive);
              }).toList(),
            );
          }
          String _getLocationLabel(String? location) {

            if (location == null || location.isEmpty) return 'Localiza√ß√£o n√£o definida';
            final parts = location.split(',');
            return parts.length > 1 ? parts[1].trim() : location;
          }
          void _scrollToTop() {

            _scrollController.animateTo(
              0,
              duration: const Duration(milliseconds: 500),
              curve: Curves.easeInOut,
            );
          }
          AppBar _buildAppBar(BuildContext context) {

            /*[:memory] final balance = context.watch<RewardProvider>().balance;*/
            return AppBar(
              automaticallyImplyLeading: false,
              toolbarHeight: _toolbarHeight,
              backgroundColor: Colors.white,
              elevation: 0,
              leading: Padding(
                  padding: EdgeInsets.only(top: 26, left: 16),
                  child: Container(
                    child: SvgPicture.asset(
                        fit: BoxFit.contain,
                        'assets/images/theme/default-icon/xiis.svg'
                    ),
                  )),
              title: UIHelper.buildText(context, '',
                  style: AppTextStylesWidget.headerViewUp,
                  color: UIHelper.blackBlueColor),
              actions: [
                Padding(
                    padding: EdgeInsets.only(top: 36, right: 16),
                    child: Builder(
                      builder: (context) => IconButton(
                        icon: const Icon(Icons.menu, color: Colors.white, size: 22),
                        style: ButtonStyle(
                          backgroundColor: MaterialStateProperty.all(Colors.black),
                          shape: MaterialStateProperty.all(
                            RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12)),
                          ),
                        ),
                        tooltip: 'Abrir menu',
                        onPressed: () {
                          Scaffold.of(context).openEndDrawer();
                        },
                      ),
                    ))
              ],
            );
          }
          @override
          Widget build(BuildContext context) {

            final profile = context.watch<EntranceProvider>().profile;
            final String imagePath = profile['avatar_url'] ?? '';
            final String fullImageUrl = "${DioClientService.baseUrl}$imagePath";
            final bool hasRemoteImage = imagePath.isNotEmpty;
            final ImageProvider imageProvider = hasRemoteImage
                ? NetworkImage(fullImageUrl)
                : const AssetImage('assets/images/default_profile.png');
            return Scaffold(
              appBar: _buildAppBar(context),
              backgroundColor: Colors.white,
              endDrawer: CustomDrawerWidget(),
              body: SafeArea(
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    return SingleChildScrollView(
                      controller: _scrollController,
                      padding: const EdgeInsets.symmetric(vertical: 0),
                      child: ConstrainedBox(
                        constraints: BoxConstraints(minHeight: constraints.maxHeight),
                        child: IntrinsicHeight(
                          child: Column(
                            children: [
                              Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                                child: Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    _buildProfileImage(imageProvider),
                                    const SizedBox(width: 16),
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          UIHelper.buildText(context, profile['name'],
                                              style: AppTextStylesWidget.profileName,
                                              color: Colors.black,
                                              weight: FontWeight.bold),
                                          TextButton.icon(
                                            onPressed: () {},
                                            icon: const Icon(Icons.location_on, color: Colors.blueGrey, size: 18),
                                            label: UIHelper.buildText(
                                              context,
                                              _getLocationLabel(profile['location']),
                                              style: AppTextStylesWidget.headerViewUp,
                                              color: UIHelper.blackBlueColor,
                                            ),
                                          ),
                                          UIHelper.buildText(context, '   ${profile['short_bio']}',
                                              style: AppTextStylesWidget.small,
                                              color: UIHelper.blackBlueColor,
                                              weight: FontWeight.normal),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              Padding(
                                padding: standardPadding,
                                child: _buildToggleableDescription(),
                              ),
                              SizedBox(height: 8),
                              Expanded(
                                child: SizedBox(
                                  height: 500,
                                  child: PillTabBar(
                                    tabs: [
                                      {
                                        "iconPath": 'assets/images/theme/default-icon/colored_share.png',
                                        "label": 'Shared Content'
                                      },
                                      {
                                        "iconPath": 'assets/images/theme/default-icon/colored_share.png',
                                        "label": 'My Network'
                                      },
                                    ],
                                    children: const [
                                      HistoryScrollableComponent(),
                                      NetworkScrollableComponent()
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            );
          }
        }
      reward_view.dart: |
        import 'package:flutter/cupertino.dart';
        import 'package:flutter/material.dart';
        import 'package:provider/provider.dart';
        import 'package:xiis/presentation/providers/reward_provider.dart';
        import 'package:xiis/presentation/sections/components/savings_card_component.dart';
        import 'package:xiis/presentation/sections/components/scrollable_contents_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class RewardView extends StatefulWidget {
          const RewardView({super.key});
          @override
          _RewardViewState createState() => _RewardViewState();
        }
        class _RewardViewState extends State<RewardView> with SingleTickerProviderStateMixin {
          late TabController _tabController;
          @override
          void initState() {

            super.initState();
            _tabController = TabController(length: 1, vsync: this);
          }
          @override
          void dispose() {

            _tabController.dispose();
            super.dispose();
          }
          Widget _buildTab(BuildContext context, String text, Image image) {

            return Tab(
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  image,
                  const SizedBox(width: 8),
                  UIHelper.buildText(
                    context,
                    text,
                    style: AppTextStylesWidget.headerViewUp,
                    weight: FontWeight.w700,
                    color: Colors.black,
                  ),
                ],
              ),
            );
          }
          AppBar _buildAppBar(BuildContext context) {

            final balance = context.watch<RewardProvider>().balance;
            return AppBar(
              automaticallyImplyLeading: false,
              toolbarHeight: 20,
              backgroundColor: Colors.white,
              elevation: 0,
              titleTextStyle: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.w600,
                color: Colors.pinkAccent,
              ),
              title: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 32),
                ],
              ),
            );
          }
          @override
          Widget build(BuildContext context) {

            return Scaffold(
              appBar: _buildAppBar(context),
              backgroundColor: Colors.white,
              body: Column(
                children: [
                  SizedBox(height: 26),
                  SavingsCardComponent(
                    profileImageUrl: 'https:',
                    totalSavings: 0.00,
                    withdrawalAmount: 0.00,
                  ),
                  Expanded(
                    child: ScrollableContentsComponent(),
                  ),
                ],
              ),
            );
          }
        }
      splash_view.dart: |
        import 'package:flutter/material.dart';
        import 'package:flutter_svg/svg.dart';
        import 'package:provider/provider.dart';
        import 'package:showcaseview/showcaseview.dart';
        import 'package:xiis/data/shared_prefs_service.dart';
        import 'package:xiis/l10n/app_localizations.dart';
        import 'package:xiis/presentation/providers/locale_provider.dart';
        import 'package:xiis/presentation/providers/splash_provider.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/footer_section_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';
        import 'package:xiis/presentation/views/access_view.dart';
        import 'package:xiis/presentation/views/entrance_view.dart';

        class SplashView extends StatefulWidget {
          const SplashView({super.key});
          @override
          State<SplashView> createState() => _SplashViewState();
        }

        class _SplashViewState extends State<SplashView> {
          static final GlobalKey _accessButton = GlobalKey();
          static final GlobalKey _selectLanguage = GlobalKey();

          Widget _buildButton({
            required IconData icon,
            required String text,
            required VoidCallback onTap}) {
            return Material(
              color: Colors.transparent,
              child: InkWell(
                onTap: onTap,
                borderRadius: BorderRadius.circular(12),
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.black, width: 1),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black12,
                        blurRadius: 4,
                        offset: Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(icon, color: Colors.black, size: 20),
                      const SizedBox(width: 8),
                      Text(
                        text,
                        style: const TextStyle(
                          fontSize: 20,
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          }

          Widget _buildLinkButton(IconData icon, String text, VoidCallback onTap) {

            return InkWell(
              onTap: onTap,
              child: Padding(
                padding: const EdgeInsets.symmetric(vertical: 40, horizontal: 20),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(icon, color: Colors.black, size: 20),
                    const SizedBox(width: 8),
                    Text(
                        text, style: const TextStyle(
                        fontSize: 20, color: Colors.black, fontWeight: FontWeight.bold
                    )),
                  ],
                ),
              ),
            );
          }

          Future<void> _handleNavigation(BuildContext context) async {
            try {
              SharedPrefsService.printSharedPrefs();
              SplashProvider splashService = SplashProvider();
              bool isActive = await splashService.verifyAccount();
              bool isAuthorized = await splashService.checkUserAuthorization();
              Navigator.of(context).pushReplacement(
                PageRouteBuilder(
                  transitionDuration: const Duration(milliseconds: 50),
                  pageBuilder: (context, animation, secondaryAnimation) {
                    if (isAuthorized) {

                      return EntranceView();
                    } else {
                      return isActive ? EntranceView() : AccessView(data: splashService.codeOptions);
                    }
                  },
                  transitionsBuilder: (context, animation, secondaryAnimation, child) {
                    const begin = Offset(1.0, 0.0);
                    const end = Offset.zero;
                    const curve = Curves.easeInOut;
                    var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
                    return SlideTransition(
                      position: animation.drive(tween),
                      child: child,
                    );
                  },
                ),
              );
            } catch (e) {
            }
          }

          Widget _buildLogo(double squareSize) {

            return Semantics(
              label: 'XiiS logo',
              child: Tooltip(
                message: 'Home - XiiS',
                child: SvgPicture.asset(
                  'assets/images/theme/default-icon/xiis.svg',
                  height: squareSize * 0.3,
                ),
              ),
            );
          }

          @override
          void initState() {

            super.initState();
            Future.delayed(const Duration(milliseconds: 500), () {
              ShowCaseWidget.of(context).startShowCase([
                _selectLanguage, _accessButton
              ]);
            });
          }

          @override
          Widget build(BuildContext context) {

            final double screenHeight = MediaQuery.of(context).size.height;
            final double squareSize = screenHeight * 0.27;
            return Scaffold(
              backgroundColor: Colors.white,
              body: Stack(
                children: [
                  Center(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        SizedBox(
                          height: squareSize,
                        ),
                        _buildLogo(squareSize),
                        SizedBox(
                          height: squareSize * 0.5,
                        ),
                        /*[:memory] Image.asset(
                          'assets/images/theme/img.png',
                          width: squareSize * 0.5,
                          height: squareSize * 0.5,
                        ),
                        const SizedBox(width: 16),
                        const Text(
                          'Xii\$',
                          style: TextStyle(
                            fontSize: 36,
                            fontWeight: FontWeight.bold,
                            color: Colors.black,
                          ),
                        ),*/
                        Showcase(
                          overlayOpacity: 0.2,
                          key: _accessButton,
                          description: 'Acesse seu Perfil',
                          child: _buildLinkButton(
                            Icons.login,
                            AppLocalizations.of(context).translate('splashViewGetIn'),
                                () => _handleNavigation(context),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Showcase(
                          overlayOpacity: 0.2,
                          key: _selectLanguage,
                          description: 'Defina um Idioma',
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                                horizontal: 12, vertical: 4
                            ),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              border:
                              Border.all(color: Colors.white, width: 0),
                            ),
                            child: DropdownButtonHideUnderline(
                              child: DropdownButton<Locale>(
                                value: Provider.of<LocaleProvider>(context)
                                    .locale,
                                onChanged: (Locale? newLocale) {
                                  if (newLocale != null) {

                                    Provider.of<LocaleProvider>(context,
                                        listen: false)
                                        .setLocale(newLocale);
                                  }
                                },
                                dropdownColor: Colors.white, elevation: 4,
                                borderRadius: BorderRadius.circular(12),
                                items: [
                                  DropdownMenuItem(
                                    value: const Locale('en'),
                                    child: Row(
                                      children: [
                                        Image.asset(
                                          'assets/images/theme/usa_flag.png',
                                          width: 20,
                                          height: 20,
                                        ),
                                        const SizedBox(width: 10),
                                        UIHelper.buildText(
                                          context,
                                          'English',
                                          style: AppTextStylesWidget.body,
                                          color: Colors.blueGrey,
                                        ),
                                      ],
                                    ),
                                  ),
                                  DropdownMenuItem(
                                    value: const Locale('pt'),
                                    child: Row(
                                      children: [
                                        Image.asset(
                                          'assets/images/theme/br_flag.png',
                                          width: 20,
                                          height: 20,
                                        ),
                                        const SizedBox(width: 10),
                                        UIHelper.buildText(
                                          context,
                                          'Portugu√™s',
                                          style: AppTextStylesWidget.body,
                                          color: Colors.blueGrey,
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                        SizedBox(
                          height: squareSize * 0.5,
                        ),
                        FooterSectionWidget(),
                      ],
                    ),
                  ),
                ],
              ),
            );
          }
        }
      view_settings_shared_data_widget.dart: |
        import 'package:flutter/material.dart';
        import 'package:provider/provider.dart';
        import 'package:xiis/presentation/providers/content_provider.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';
        import 'package:xiis/presentation/providers/entrance_provider.dart';
        import 'package:xiis/presentation/providers/home_provider.dart';
        import 'package:xiis/presentation/providers/profile_provider.dart';
        import 'package:xiis/presentation/providers/reward_provider.dart';
        import 'package:xiis/presentation/sections/components/count_down_timer_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ViewSettingsSharedDataWidget extends StatefulWidget {
          const ViewSettingsSharedDataWidget({super.key});
          @override
          State<ViewSettingsSharedDataWidget> createState() => _ViewSettingsSharedDataWidgetState();
        }
        class _ViewSettingsSharedDataWidgetState extends State<ViewSettingsSharedDataWidget> {
          @override
          Widget build(BuildContext context) {

            final providers = <DebuggableProvider>[
              context.read<EntranceProvider>() as DebuggableProvider,
              context.read<HomeProvider>() as DebuggableProvider,
              context.read<ProfileProvider>() as DebuggableProvider,
              context.read<RewardProvider>() as DebuggableProvider,
              context.read<ContentProvider>() as DebuggableProvider,
            ];
            return Scaffold(
              backgroundColor: Colors.white,
              appBar: _buildAppBar(context),
              body: SingleChildScrollView(
                padding: const EdgeInsets.only(bottom: 32),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: _buildProviderDataView(providers),
                ),
              ),
            );
          }
          AppBar _buildAppBar(BuildContext context) {

            return AppBar(
              backgroundColor: Colors.white,
              title: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: const [
                  Icon(Icons.timelapse, size: 22),
                  SizedBox(width: 8),
                  CountDownTimerComponent(),
                ],
              ),
              centerTitle: true,
              leading: IconButton(
                icon: const Icon(Icons.arrow_back),
                onPressed: () => Navigator.pop(context),
              ),
            );
          }
          List<Widget> _buildProviderDataView(List<DebuggableProvider> providers) {

            return providers.map((provider) {
              final type = provider.runtimeType.toString();
              final fields = provider.debugValues();
              return ExpansionTile(
                title: UIHelper.buildText(context, type,
                    style: AppTextStylesWidget.body,
                    color: Colors.black,
                    weight: FontWeight.w700),
                children: fields.entries.map((entry) {
                  return ListTile(
                    title: UIHelper.buildText(context, entry.key,
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                        weight: FontWeight.normal),
                    subtitle: UIHelper.buildText(context, entry.value.toString(),
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                        weight: FontWeight.normal),
                  );
                }).toList(),
              );
            }).toList();
          }
        }
      view_shared_preferences_data_widget.dart: |
        import 'package:flutter/material.dart';
        import 'package:provider/provider.dart';
        import 'package:shared_preferences/shared_preferences.dart';
        import 'package:xiis/presentation/providers/content_provider.dart';
        import 'package:xiis/presentation/providers/debuggable_provider.dart';
        import 'package:xiis/presentation/providers/entrance_provider.dart';
        import 'package:xiis/presentation/providers/home_provider.dart';
        import 'package:xiis/presentation/providers/profile_provider.dart';
        import 'package:xiis/presentation/providers/reward_provider.dart';
        import 'package:xiis/presentation/sections/components/count_down_timer_component.dart';
        import 'package:xiis/presentation/sections/widgets/app_text_styles_widget.dart';
        import 'package:xiis/presentation/sections/widgets/ui_helper_widget.dart';

        class ViewSharedPreferencesDataWidget extends StatefulWidget {
          const ViewSharedPreferencesDataWidget({super.key});
          @override
          State<ViewSharedPreferencesDataWidget> createState() => _ViewSharedPreferencesDataWidgetState();
        }
        class _ViewSharedPreferencesDataWidgetState extends State<ViewSharedPreferencesDataWidget> {
          Map<String, Object> _sharedValues = {};
          bool _isLoading = true;
          @override
          void initState() {

            super.initState();
            _loadSharedPreferences();
          }
          Future<void> _loadSharedPreferences() async {
            final prefs = await SharedPreferences.getInstance();
            final keys = prefs.getKeys();
            final Map<String, Object> values = {};
            for (final key in keys) {

              final value = prefs.get(key);
              if (value != null) values[key] = value;
            }
            setState(() {

              _sharedValues = values;
              _isLoading = false;
            });
          }
          @override
          Widget build(BuildContext context) {

            return Scaffold(
              backgroundColor: Colors.white,
              appBar: _buildAppBar(context),
              body: _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : SingleChildScrollView(
                padding: const EdgeInsets.only(bottom: 32),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: _buildSharedPreferencesView(),
                ),
              ),
            );
          }
          AppBar _buildAppBar(BuildContext context) {

            return AppBar(
              backgroundColor: Colors.white,
              title: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: const [
                  Icon(Icons.timelapse, size: 22),
                  SizedBox(width: 8),
                  CountDownTimerComponent(),
                ],
              ),
              centerTitle: true,
              leading: IconButton(
                icon: const Icon(Icons.arrow_back),
                onPressed: () => Navigator.pop(context),
              ),
            );
          }
          List<Widget> _buildSharedPreferencesView() {

            return [
              ExpansionTile(
                title: UIHelper.buildText(context, 'Shared Preferences',
                    style: AppTextStylesWidget.body,
                    color: Colors.black,
                    weight: FontWeight.w700),
                children: _sharedValues.entries.map((entry) {
                  return ListTile(
                    title: UIHelper.buildText(context, entry.key,
                        style: AppTextStylesWidget.body,
                        color: Colors.black,
                        weight: FontWeight.w700),
                    subtitle: Text(entry.value.toString()),
                  );
                }).toList(),
              ),
            ];
          }
        }
test/:
  widget_test.dart: |
    import 'package:xiis/main.dart';
    import 'package:flutter/material.dart';
    import 'package:flutter_test/flutter_test.dart';
    void main() {

      testWidgets('Counter increments smoke test', (WidgetTester tester) async {
        await tester.pumpWidget(MyApp());
        expect(find.text('0'), findsOneWidget);
        expect(find.text('1'), findsNothing);
        await tester.tap(find.byIcon(Icons.add));
        await tester.pump();
        expect(find.text('0'), findsNothing);
        expect(find.text('1'), findsOneWidget);
      });
    }
